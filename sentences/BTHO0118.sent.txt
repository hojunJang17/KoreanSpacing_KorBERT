컴퓨터를 제일 처음으로 만든 사람이 누구인가라는 질문은 아라비아숫자를 처음으로 고안한 사람이 누구인가라는 질문과 별로 다를 바가 없다. 
왜냐하면 라디오나 디젤엔진 같은 것은 그 발명자가 누구라고 정확히 말할 수 있지만 아라비아숫자를 처음 만든 사람이 특정한 누구라고는 딱히 지적할 수 없듯이 컴퓨터도 누구라고 지적할 수 없을 만큼 여러 사람들이 그 기본적인 원리, 기계적인 장치, 전자적인 장치의 발달에 관여해왔기 때문에 어느 한 명만을 발명자라고 말할 수가 없는 것이다. 
인류는 원시시대 이래 수렵.농경생활을 거쳐 물물교환시대를 맞이하였다. 
물물교환시대 초기에는 물건의 가치보다 물건의 개수를 헤아려 많고 적음을 비교하였다. 
그러나 처음에는 많고 적음을 단순히 구체적인 사물을 통해 느꼈을 뿐이다. 
그러다가 차차 추상적인 수의 개념이 발달하게 되었다. 
즉 염소 세 마리, 사과 세 개, 나무 세 그루를 일 대 일로 짝을 맞추다보면 모두 항상 짝을 이룰 수 있게 되니, '3' 또는 '세 개'라는 추상적인 개념이 생겨나게 된 것이다. 
수는 특정인의 발명품이 아니라 인류가 문명을 이루면서 만들어낸 최초의 관념체계이다. 
그리고 이것은 인류의 고유한 특성 중의 하나이다. 
까마귀도 수를 헤아린다지만 다섯 이상의 수는 헤아리지 못한다고 한다. 
그러나 사람은 생후 16개월 정도가 지나면 일 대 일 짝짓기를 할 수 있다. 
가장 원시적인 셈의 기법은 자신이 헤아리고자 하는 물건과 같은 개수의 대체물을 가지고 서로 맞춰보는 방법이다. 
예컨대 15마리의 양을 기르는 사람은 15개의 조각돌을 가지고 있다가 그 하나하나에 짝을 맞추어봄으로써 양이 도망갔는지 아닌지를 알아내는 것이다. 
이러한 일 대 일 대응은 지금도 기도나 염불에서 횟수를 헤아리는 데 사용된다. 
최초의 셈 도구는 인간의 신체였는데, 그중에서도 가장 쉽게 사용할 수 있는 것이 손가락이었다. 
유럽과 인도 등 여러 곳에서 10진법의 뿌리가 발달하였다는 것은 손가락이 셈의 기원이었음을 잘 말해주고 있다. 
이렇게 해서 인간의 손은 간편하고 단순한 최초의 계산기가 되었다. 
그후 손가락의 관절 마디를 이용해서 좀더 큰 숫자의 셈을 할 수 있게 되었다. 
문헌에 의하면 인도와 중국 남부지방 등에서는 손 마디마디마다 의미를 부여하여 만 이상의 수도 표시할 수 있었으며 간단한 덧셈과 뺄셈도 할 수 있었다고 한다. 
그래서 그 당시의 사람들은 시장에서 물건을 사고 팔 때 서로 손바닥을 펴 맞추어서 계산을 하였다고 한다. 
그후 구전되던 손가락을 이용한 셈방식은 더욱 발달하여 체계적인 방법으로 교육되기 시작했다. 
이 손가락셈은 크게 유행하여 로마제국에서부터 중세가 끝날 때까지 교양인들의 필수적인 기술이 되었다. 
마치 현대사회에서 컴퓨터의 초보적인 프로그래밍을 아는 것과 비견된다. 
중국에는 인간의 손가락만으로도 수를 100억까지 헤아릴 수 있는 손가락셈법이 있었다. 
비록 인간 손가락의 모든 관절이 서로 독립적으로 원활하게 움직이지는 못하겠지만 적어도 이론상으로는 그러했다. 
나아가 곱셈과 일원일차방정식도 손가락으로 풀 수 있었다고 하니 놀라울 따름이다. 
손가락을 사용치 않은 곳에서는 인간의 신체가 아닌 나무가지나 점토판, 뼈막대 등 계산패를 사용하였다. 
이러한 계산패는 나중에 주판의 모태가 되고 계산의 기계화의 시초가 된다. 
계산패는 몇 개의 구역으로 나누어진 패로서 각 구역에 조약돌이나 날카로운 쇳조각으로 그 값을 표시하게 되어 있었다. 
거기에 사용된 돌멩이를 로마인들은 칼쿨리(calculi)라고 불렀고, 이것은 나중에 계산이라고 하는 캘큘러스(calculus)의 어원이 되기도 한다. 
이후 생산과정이 복잡해지고 분업화됨에 따라서 셈만 전문적으로 하는 사람이 필요하게 되었다. 
즉 산업이 분업화 현상을 보이게 되면 각 계층별로 별도의 전문적 생산방법을 가진 사람들이 서로 무리를 형성하는데, 이러한 사람들에게는 좀더 효율적이고 빠른 계산을 위해서 휴대용계산기가 필요하게 되었다. 
이 휴대용계산기의 기원은 주판에서부터 시작된다. 
오늘날에도 전해져오는 주판은 중국에서 발명되어 한국을 비롯한 동남아시아 여러 나라와 일본에 보급되었으며 지금도 그 맥을 유지하고 있다. 
러시아에도 스쵸티라는 주판이 있다. 
우리나라의 경우 몇 년 전까지만 해도 주판셈이 상업계 학교의 중요한 과목이었으며 실력을 계층화하는 국가공인 급수제도도 시행되었다. 
그러나 요즘 와서는 컴퓨터교육이 강화됨에 따라서 주판셈과 부기.타자 교육이 점점 간단한 프로그래밍 수업과 스프레드 쉬트(Spread Sheet) 그리고 워드프로세서 사용교육으로 빠른 속도로 대치되어가고 있다. 
지금도 가끔 탁상용계산기로 계산하고 나서 주판으로 검산해보아야 안심하는 사람을 볼 수 있다. 
물론 계산기도 자료의 입력과정에서 잘못 입력하면 잘못된 결과를 낼 수 있지만, 그런 때에도 역시 계산기로 다시 검산하는 것이 합리적일 것이다. 
인간은 한번 익숙해진 자신의 버릇에 대해서는 매우 보수적이기 때문에 어린 시절에 배운 주판셈에 대해서는 심리적인 안정을 느낀다. 
그러나 심리적인 안정을 느낀다는 것과 올바른 결과를 얻는다는 것은 다르므로 자료를 전자계산기에 실수없이 빨리 입력하는 방법에 익숙해져야 할 것이다. 
옛것에 대한 향수에만 사로잡혀서 감정적으로 전자계산기를 거부한다면 시대에 뒤떨어지게 될 것이다. 
계산기구의 발달은 동서양의 차이를 잘 보여준다. 
동양에서는 자연에 적응하는 데 주력하여 주판셈과 같이 기구의 개량보다는 사람을 기계에 맞추는 방향으로 발달했다. 
즉 놀랍도록 빠른 주판의 운지법이 몇 세기를 걸쳐서 개발되어왔다. 
이에 반해 서양은 기구 자체를 개량하여 현재의 디지털컴퓨터에까지 이른다. 
기독교적 자연관 ― 땅을 지배하라 ―과 동양의 노자적 자연관인 무위자연은 계산기구의 역사에도 또렷하게 반영되고 있는 것이다. 
동양에서 주판이 그 실용성과 발달된 운지법의 도움으로 확실하고도 안정된 위치에 머물러 있는 동안, 서양에서는 좀더 편리한 기계식계산기에 대한 연구가 이루어져왔다. 
최초의 쓸만한 기계식계산기는 프랑스 사람인 빠스깔에 의해서 만들어졌는데, 빠스깔의 주된 아이디어는 숫자의 크기를 단순한 물체의 특정한 위치에 의해서 나타내는 데서 탈피하여 톱니바퀴의 상태로 나타낼 수 있지 않을까 하는 것이었다. 
예를 들어 십단위를 나타내는 톱니바퀴의 톱니 하나를 선택하여 그것을 좀더 길게 튀어나오도록 한다. 
십단위를 나타내는 바퀴가 한 바퀴를 회전하면 그 길게 튀어나온 톱니바퀴가 백단위를 나타내는 톱니바퀴의 톱니를 건드려 그것 역시 한 칸 진행한다. 
이런 식으로 각 단위마다 하나씩의 톱니를 지정해두면 자동적으로 자리올림 계산을 수행하여 계산이 가능하게 된다. 
이것은 확실히 이전의 일 대 일 대응에 의한 산술법보다는 뛰어난 방법이었다. 
빠스깔계산기의 또 다른 특징은 뺄셈도 덧셈과 같은 방식으로 할 수 있었다는 것이다. 
빠스깔의 톱니방식에 의한 계산기구는 이후 유럽에서 250여년 동안 모든 유형의 계산기의 기본 원리가 되었다. 
그렇다면 빠스깔계산기에서 곱셈과 나눗셈은 어떻게 할 수 있었을까? 
불행히도 빠스깔의 계산기로는 곱셈과 나눗셈을 할 수 없었다. 
우리가 현재 사용하는 곱셈과 나눗셈의 계산방법이 언제부터 굳어졌는가를 증명해 줄 명백한 자료는 없다. 
그러나 문헌에 의하면 B.C.2600년경 현재 이란 근교에서 흙구슬을 이용하여 나눗셈을 행하였음을 알 수 있다. 
그 시대에 나눗셈은 주로 수확한 곡물이나 가축 따위를 골고루 나누는 데 사용되었을 것이다. 
중국에서도 일찍이 곱셈의 원리가 표기 자체에 포함되어 발달했다. 
최초로 곱셈과 나눗셈을 할 수 있는 계산기를 만든 사람은 독일의 철학자이며 과학자, 수학자인 라이프니쯔였다. 
이 계산기의 원리는 빠스깔의 방식과 유사하였으나 그렇게 정교한 톱니장치를 만들 만한 기술이 없었기 때문에 계산된 결과가 틀릴 경우가 매우 잦았다. 
그래서 이는 이론적인 흥미만 끈 채 사라지고 말았다. 
자동계산기에 관한 최초의 실용적인 연구는 찰스 바비지(Charles Babbage)의 미분기(differential engine)에 대한 연구였다. 
최고 20자리까지의 숫자를 계산할 수 있는 이 기계는 계산된 결과를 간단히나마 인쇄된 형태로까지 출력할 수 있도록 설계되었다. 
이는 계산기의 진일보된 면이라 할 수 있을 것이다. 
바비지의 이러한 생각은 그 시대에 풍미한 철학과도 관계가 있다. 
즉 기계적유물론의 관점에서 보면, 몇 가지 초기결과만 가지고도 다소 복잡한 계산과정을 거쳐서 최종의 상태를 알 수 있기 때문이다. 
바비지는 사람이 하는 미분과정을 기계가 대신해서 로그(log)테이블과 같은 복잡한 수치계산표를 구할 수 있다고 믿었다. 
그러나 20년 동안의 각고의 노력에도 불구하고 재정의 부족으로 이는 완성을 보지 못하였다. 
바비지가 재정지원을 더 해달라고 지원자를 찾아갔을 때 지원자는 "당신이 만드는 그 기계는 내가 당신에게 지원해 줄 엄청난 돈을 계산하는 데밖에 쓸 수 없을 것이오"라고 말했다는 일화가 있다. 
이후 바비지는 사재를 털어서 1833년부터 생을 마칠 때까지 해석기관(analytic engine)을 만드는 데 주력하였으나 이것 역시 미분기관처럼 완성을 보지 못하였다. 
그럼에도 불구하고 바비지는 현대 전자컴퓨터의 시조라고 불릴 만한 몇 가지 중요한 개념을 만들어 냈다. 
그것은 계산기관을 하나의 장치가 아니라 제어장치, 산술장치, 기억장치, 입.출력장치 등으로 나누어 설계하는 것이었다. 
이것이 현대 컴퓨터와 차이가 있다면 그 작동원리가 전자적인 것이 아니라 기계적인 것이었다는 점이다. 
또한 해석기관에는 자료 보관과 제어를 위해서 천공카드가 처음으로 사용되었으며, 설계상으로 대충 1분 동안 약 50자리의 숫자를 서로 곱할 수 있을 정도의 능력을 가지고 있었다고 한다. 
빠스깔의 생각을 물려받은 바비지의 생각은 기발한 것이었으나 결과적으로는 구체적인 계산기를 만들지 못하였다. 
바비지가 실패한 데는 공학적인 이유와 사회적인 이유가 있었다. 
먼저 공학적인 이유로는, 그 모든 제어장치와 연산장치가 제대로 작동하기 위해서는 엄청나게 큰 동력기관이 필요했다는 점이다. 
이것이 완성되었을 때의 모습을 한번 상상해 보자. 
천장을 가로지른 커다란 축으로 동력이 공급되고 거기에 수많은 전달벨트가 걸려서 다른 바퀴를 돌리고, 다시 그 바퀴에서 나온 벨트가 또 다른 바퀴를 돌리고, 계산기를 작동하는 기사는 커다란 스위치를 밀고 당겨서 기계를 움직이고…… 영락없이 커다란 방앗간과 같을 것이다. 
즉, 계산기가 아니라 그야말로 계산소가 되었을 것이다. 
그러나 그만한 동력기관이 없었기 때문에 바비지는 동력전달장치를 정밀하게 만들어 동력 손실을 줄이려 했으나 당시의 기계공학기술 수준으로 볼 때 그것은 불가능하였다. 
이후 전자장치의 사용은 그 동력의 소모를 줄이는 데 결정적인 기여를 하였다. 
사회적인 이유를 살펴보자. 
바비지가 발명한 계산기가 실패한 이유는 먼저 그 시대의 산업상황에서 그것이 절실히 필요하지 않았기 때문이다. 
그 정도의 대규모 계산이 산업에서 필요하지 않았기 때문에 단 몇 사람의 선심성 연구지원은 필연적으로 중단될 수밖에 없었던 것이다. 
다시 말하면 자본가들의 관심을 끌지 못했기 때문에 바비지의 꿈은 이론화작업에 머물고 만 것이다. 
한 과학적 발명품의 배경에는 몇몇 과학자의 개인적인 의식뿐만 아니라 사회적인 생산체계 및 관계도 밀접한 관련이 있다. 
다른 예를 들어보자. 
산업혁명 초기에 자동방적기를 발명한 청년이 있었다. 
단순히 생각할 경우, 그 사람의 기술을 도입해서 더 많은 직물을 생산해내려는 것이 일반적인 직물공장 사장의 생각이라고 추측할 수 있을 것이다. 
그런데 몇몇 사장들이 공모하여 그 방적기를 만든 청년을 물 속에 빠뜨려 죽여버렸다. 
그 당시 부의 정도는 자기 휘하에 거느리고 있는 농노나 노동자의 수로 평가되었다. 
왜냐하면 그때는 모든 일을 사람이 손으로 했고 사람이 손으로 할 수 있는 일의 양은 일정 정도 이상을 넘지 못했기 때문이다. 
그런데 새로운 기술이 도입되면 몇 사람만으로도 비슷한 양의 직물을 생산할 수 있기 때문에 자본가들은 평상시 자신들이 누려온 경제적 우위를 일시에 잃게 되었다. 
따라서 그들은 자신들의 위치를 고수하기 위해서 그 발명가를 죽여버리는 편이 낫다고 생각했을 것이다. 
참신한 이론에 의한 발명이 곧 상업적인 성공을 가져올 수 있다는 생각은 너무 단순하다. 
과학적 발명품의 성공 여부는 더욱 복잡한 정치.경제적 조건에 의해서 제한되기 때문이다. 
천공카드의 등장은 머리 속의 숫자를 카드의 구멍으로 바꾸었다. 
숫자의 기계화가 시작된 것이다. 
기계식계산기가 점점 발달함에 따라서 사용자가 모든 자료를 필요할 때마다 일일이 입력해주는 일은 매우 불편하게 되었다. 
그래서 사용자가 필요한 숫자를 어떻게, 어떤 형태로 보관해야 할 것인가가 큰 문제로 대두하게 되었다. 
예를 들어 12,049라는 숫자를 어떻게 하나의 물체에 보관하여 계산이 필요할 때마다 꺼내 사용할 수 있을까? 
선사시대처럼 진흙판에 쓴다면 기계식계산기에 눈이 없는 이상 알아볼 수 없을 것이고, 나무작대기에 홈을 파서 기록해두는 것도 기계가 인식하는 데에는 불편할 것이다. 
이 문제에 최초로 해답을 던진 것은 구멍 뚫린 카드 즉 천공카드 방식이었다. 
이 천공카드는 기계식계산기 자료보관을 위해 처음으로 사용된 것은 아니다. 
모든 과학적 성과가 그렇듯이 어떤 발견이나 발명의 앞에는 반드시 그 최초의 형태(prototype)가 있게 마련이다. 
구멍 뚫린 카드는 일찍이 직조기계에서 사용되던 것이었다. 
짜여진 직물의 무늬에 따라 두터운 종이에 구멍을 뚫고 그 위를 여러 개의 바늘이 지나가면서 뚫린 구멍으로만 통과하여 원하는 무늬나 꼬인 형태의 직물을 만들었다. 
이후 이를 개량한 기계가 여럿 발명되었는데 그중에서도 재커드(Jacquard)가 만든 직조기가 산업혁명기에 많이 쓰였다. 
천공카드가 최초로 계산기에 사용된 것은 1890년대 미국의 인구조사국에서였다. 
당시의 셈능력으로는 조사한 여러 지방의 인구자료를 계산하고 정리하는 데 1년여의 시간이 걸렸기 때문에 인구조사를 행정에 이용하는 것이 전혀 의미가 없었다. 
즉 인구를 계산하고 있는 동안에도 계속해서 인구가 불어나고 그 구성성분이 변화하기 때문에, 계산된 결과를 행정에 이용하는 것이 의미가 없어지게 되는 것이었다. 
그래서 인구조사국에서는 좀더 빠른 계산방법을 공모하였다. 
이때 홀러리스(Hollerith)라는 기술자가 전자장치와 천공카드를 이용한 계수기를 발명하였고, 이후 자기 이름을 딴 천공기계회사를 설립하였다. 
홀러리스가 개발한 기계는 여러 가지의 의미를 갖는다. 
공학적으로는 자료의 표현이 천공카드라는 좀더 표준화된 기구로 통일되었다는 점이고, 사회적으로는 인구가 증가하고 산업이 거대화됨에 따라 체계적인 경제발전을 위해서 대규모 계산기계의 등장이 요청되었고 이에 따라 전자식계산기의 출현을 예고하게 되었다는 점이다. 
그러나 최근 한 연구에 의하면, 원시인도 놀라울 정도로 발달된 컴퓨터를 사용했다고 한다. 
앞장의 그림은 뉴기니의 한 부족 유물에서 발견된 AND, OR 소자들이다. 
이 소자들의 끈을 움직인 주동력은 코끼리였는데, 이 복잡한 장치가 어디에 사용되었는지는 아직 알려져 있지 않다. 
A.D.400년경 개발된 이 장치의 구조는 지금의 우리에게도 경탄할 만한 것이다. 
기계식계산기는 신뢰도가 낮고 연산속도도 느렸다. 
신뢰도가 낮다는 것은 계산결과가 자주 틀린다는 것을 의미한다. 
기계식 부품은 기계적인 접촉으로 마모가 심하며 열이나 습기, 먼지에 약하기 때문에 고장이 잘 난다. 
또한 지나치게 크고 무겁다는 단점도 있다. 
최초의 전자식 계산기는 벨연구소에서 만들어졌다. 
벨연구소는 현재까지 IBM의 왓슨연구소와 함께 전기 전산 통신분야에서 세계적으로 가장 영향력 있는 연구소로 꼽힌다. 
또한 하버드의 에이켄(Aiken)에 의해서 구상된 자동순서제어계산기(automatic sequence controlled calculator)가 IBM연구진과 함께 발표되었다. 
지금도 하버드대학에는 에이켄의 이름을 딴 유명한 에이켄 전자계산연구소가 있다. 
그곳에서 만들어진 좀더 실용적인 계산기인 마크Ⅰ(Mark Ⅰ)은 4칙연산뿐 아니라 삼각함수 계산 그리고 복잡한 계산을 위한 프로그램의 입력이 가능했고 속도는 23자리 계산을 5초당 평균 1번 정도 할 수 있었다. 
이것은 이후 10년 이상 사용되어 그 실용성을 톡톡히 보여주었다. 
그러나 그렇게 유용하게 사용되었던 마크Ⅰ도 요즈음 값싸게 구입할 수 있는 XT 수준의 컴퓨터와 비교해 볼 때 거북이와 치타의 경주라 할 수 있다. 
요즘은 아무리 싸구려 컴퓨터라도 1초당 만 번 이상의 4칙연산을 할 수 있으니 마크Ⅰ에 비해 적어도 5만 배 정도는 빠른 것이다. 
크기 면에서도 마크Ⅰ은 가로 15m×세로 2.5m 그리고 900km 정도의 전선과 5톤이나 되는 무게를 가지고 있었다. 
그러므로 휴대하는 것이 불가능함은 물론 엄청난 전기와 무게를 감당해야만 했다. 
약 40년 사이의 발전을 살펴볼 때 컴퓨터의 발전속도는 놀라움을 금할 수 없게 한다. 
값의 변화로도 이러한 발전을 한눈에 알 수 있다. 
1940년대 롤스로이스라는 최고급 자동차 가격이 컴퓨터 가격이 떨어지는 폭으로 하락했다면 지금은 얼마 정도나 될까? 
1000달러? 
100달러? 
그러나 해답은 놀랍게도 약 0.9달러 정도에 지나지 않는다. 
아마 그 어떤 기계도 그렇게 짧은 시간 내에 이만큼 심한 변화를 겪기는 어려울 것이다. 
전자식컴퓨터가 되기 위해서는 먼저 자료의 표현이 전자적 장치에 의해서 이루어져야 한다. 
예를 들어서 전체 동력이 전기에 의해서 움직이고 입출력 장치가 훌륭하다손 치더라도 천공카드를 이용해서 내부자료를 표현하거나 천공카드가 계산의 제어장치에 직접 작용한다면 그것은 현대적 의미의 전자계산기가 될 수 없는 것이다. 
본격적인 전자식컴퓨터는 진공관의 등장과 함께 개발되기 시작했다. 
진공관의 등장으로 컴퓨터는 속도 면에서 수천 배의 능률을 보였고 신뢰도 면에서 엄청난 발전을 가져왔다. 
이때부터 2진 숫자에 의해 자료를 표현하는 법이 연구되었고 프로그래밍에 의한 계산에 관심을 기울이기 시작하였다. 
어떤 사람들은 최초의 전자계산기는 1942년에 아타나소프박사에 의해 만들어진 ABC컴퓨터(Atanasoff Berry Calculator)라고 말한다. 
또 펜실베니아대학에서 1946년에 만든 에니악(ENIAC: Electronic Numerical Integrator And Calculator)이 최초의 컴퓨터라고 하기도 한다. 
둘을 비교해보면 ABC는 원리에는 충실하였지만 규모에서 에니악에 미치지 못하였다. 
진공관 수로 따져볼 때 각각 45개와 1만 9000개였으니 신생아와 어른의 차이라고나 할까. 
이 시대의 사회적인 환경은 어땠는지 살펴보자. 
전자식계산기가 그 발전의 맥을 꿈틀거리고 있던 때는 바로 2차대전이 막바지에 이른 시기였다. 
과학과 기술에 대한 전쟁의 요구수준은 엄청나게 높아 그 모든 방법과 경과가 합리화될 수 있었다. 
예를 들면 콜로서스(COLOSSUS)라는 컴퓨터는 1943년에 제작되었는데, 용도는 적국의 암호를 해독하기 위한 것이었다. 
에니악 역시 총기의 발사속도 등을 계산하여 최고의 총기류를 만들기 위한 최적의 조건을 구하는 데 사용되었다. 
최초의 전자계산기는 원리상으로 볼 때는 아타나소프의 ABC이고 실용성 면에서 볼 때는 에니악이라고 할 수 있겠다. 
에니악은 약 100여 평 정도의 공간을 요구하는 크기였으며 무게 역시 30톤이나 돼 그것을 설치하는 데만 해도 상당한 노력이 들었다. 
게다가 소비전력도 130킬로와트나 되어 그 시대 사람에게는 그야말로 괴물로 보였을 것이다. 
소비전력이 큰 것은 주된 동력원이 진공관을 데우는 데 사용되었기 때문인데, 요즘은 손톱만한 수은전지 몇 개로 에니악이 할 수 있었던 계산기능을 거의 모두 해낼 수 있으니 발전 속도에 놀랄 뿐이다. 
에니악을 켰을 때는 어떠했을까? 
진공관이 데워져서 웅웅거리는 소리는 마치 노파가 낮은 목소리로 웅얼거리는 소리 같았다고 하니 2만여 명의 노파가 한 방에서 웅얼거리는 소리는 제법 시끄러웠을 것이다. 
따라서 만일 진공관을 없앨 수만 있다면 이것은 여러 가지 면에서 컴퓨터의 새로운 세대를 예고하는 것이라고 할 수 있었겠다. 
에니악의 키보드는 어디에 있었을까? 
불행히도 에니악은 키보드가 없었다. 
대신에 오퍼레이터가 기계에 붙어 있는 스위치를 부지런히 내렸다 올렸다 해서 작동시켰으며 IBM이 개발한 천공카드 시스템을 보조기억장치로 사용하였다. 
아마도 아무런 설명 없이 그 시대에 작동중이던 에니악의 사진을 보여주면 대부분의 사람들은 전화교환대에서 작업중인 남자교환원의 모습쯤으로 여길 것이다. 
이때만 하더라도 전자계산기는 특수목적에만 사용되었으며, 그 사용자도 고도로 훈련받은 사람들뿐이었다. 
에니악의 계산능력은 진일보하여 초당 5000번 정도의 덧셈과 300번 정도의 곱셈을 실행할 수 있었다. 
에니악의 주요한 특징은 여러 개의 연산을 연속적으로 수행할 수 있다는 것이었다. 
이후 에니악은 10여 년 정도 더 이용되다가 다른 개량된 기계의 출현으로 사용이 중단되었다. 
이후에 출현한 계산기로는 에드박(EDVAC: Electronic Discrete Variable Automatic Calculator)을 들 수 있다. 
이 계산기는 에커트(Eckert)와 모클리에 의해서 제작되었는데 과거의 계산기에서 몇 가지 면이 개량되었다. 
먼저 명령어, 즉 자료의 계산을 제어하는 자료(예를 들면 더하라, 빼라와 같은 동작을 나타내는 명령어들의 표현)가 2진수로 표현되었다는 점이 가장 큰 차이점이다. 
이로부터 전자계산기의 기억장치로 2진장치를 선호하게 되었다. 
그러면 2진장치는 어떤 것인가? 
2진장치란 각 자릿수의 자료를 나타내는 진공관의 전압이 어떤 특정한 전압 V를 넘으면 '1'로 해석하고 V 이하의 전압을 가지면 '0'로 해석하여 주어진 숫자를 '0'과 '1'로 표시하는 방법이다. 
이 방법은 전압의 불안정 때문에 한 진공관에는 두 개의 수치만을 표시하는 것이 좀더 안전하고 신뢰성이 있다는 경험에서 나온 것으로 진공관이 좀더 값싼 트랜지스터로 대치되면서 완전히 정착되었다. 
같은 시기에 영국의 케임브리지대학에서 에드삭(EDSAC: Electronic Delay Storage Automatic Computer)이 제작되었다. 
에드삭은 프로그램을 저장할 수 있는 최초의 컴퓨터였으며 프로그램의 저장은 기술의 획기적인 발전이었다. 
먼저 주판셈을 생각해보자. 
주판셈의 경우, 자료는 모두 주판 위에 표시되고 더할 것인지 곱할 것인지 등의 연산종류는 셈을 하는 사람의 머리 속에 들어 있다. 
그러니까 주판셈에서는 운지법에 해당하는 기술로써 연산이 가능하게 된다. 
이렇듯 컴퓨터의 개발 초기에는 모든 계산기가 계산과정 그 자체를 모두 계산기의 외부에 두었다. 
복잡한 계산 그러니까 여러 가지 산술셈이 뒤섞여 있을 때 각각의 연산순서는 사람에 의해서 조정되었다. 
그러나 에드삭에 이르러서는 그 연산순서 역시 계산기에 옮겨져서 사람은 더 이상 연산순서에도 관여치 않게 되었다. 
이때 계산기의 동작을 구분해보면 다음과 같다. 
먼저 계산해야 할 숫자들을 일일이 스위치를 사용해서 기억장치로 쓰이는 트랜지스터나 진공관에 '1'이나 '0'의 형태로 집어넣는다. 
그 다음에 자료들을 이용한 연산순서를 '0'과 '1'의 형태로 표현하여 산술식을 저장하는 기억장치에 같은 방식으로 집어넣는다. 
그러고 나선 산술식을 차례대로 수행시키는 버튼을 누른다. 
이때 산술식의 순서가 기억장치에 표현된 것을 프로그램이라고 부르고 그러한 방식을 사용한 계산기를 프로그램내장형 계산기 또는 폰 노이만형 계산기라고 부른다. 
그 이유는 폰 노이만(von Neumann)이라는 한 천재적인 수학자가 이러한 프로그램이 내장된 컴퓨터의 구조에 관해서 이론적으로 연구하였기 때문이다. 
이후 에커트와 모클리는 유니백Ⅰ(UNIVACⅠ)이라는 컴퓨터를 만들었는데, 이는 상업용으로 성공한 최초의 전자식 계산기였다. 
유니백Ⅰ은 미국 대통령선거 결과를 정확히 예측함으로써 대중들에게 큰 충격을 주었다. 
유니백Ⅰ이 나온 이후로 컴퓨터에는 좀더 쓰이기 쉽도록 프로그래밍언어라는 개념이 도입되기 시작했다. 
유니백Ⅰ은 IBM에서 만든 기계보다 훨씬 빠르고 정확한 답을 낼 수 있는 기계였지만 결국 그 둘의 승부에서는 IBM이 이겨 현재까지 초거대 다국적기업으로 독주할 수 있게 되었다. 
IBM의 주된 특성은 계산기의 각 부품을 기능별로 부품화하여 천공 입출력장치, 제어장치, 전원공급장치로 나누어 설계한 것이다. 
그러나 IBM이 그 시대에 설립된 다른 회사보다 우위를 누릴 수 있었던 것은 뛰어난 판매전략이 있었기 때문이다. 
IBM은 빠른 애프터서비스와 사용자 교육에 대한 투자 등으로 일반 사용자들에게 좋은 이미지를 줄 수 있었다. 
기계 자체의 능력보다는 뛰어난 마케팅전술이 상업적 성공을 가져다주었던 것이다. 
한편 시기적으로도 컴퓨터는 더이상 특수한 목적이나 특별히 교육받은 소수층만의 전유물이 아니라 여러 단체에서 널리 요구되는 필수품이 되어가고 있었다. 
IBM의 성공은 바로 이런 사회적 요구를 잘 분석하였기 때문이며, 이에 오늘날의 IBM이 될 수 있었던 것이다. 
제1 세대의 특징을 요약해보면, 제1 세대는 경제성과 신뢰성이 주목표였고, 주기억장치로서 유니백에 수은연기장치(mercury delay line storage)가 처음으로 사용되었으며, 마크Ⅲ와 유니백1103 시리즈에 자기드럼(magnetic drum)장치가 사용되었다는 점이다. 
제2 세대 컴퓨터는 1948년에 발명된 트랜지스터와 함께 시작되었다. 
진공관에 비해서 트랜지스터가 지닌 장점이 곧 인식되어 그 사용이 급격히 증가해나갔으나, 실제로 트랜지스터를 이용한 컴퓨터는 1959년에 가서야 등장하였다. 
제2 세대의 주기억장치는 자기코어장치로 제1 세대에서 주기억장치로 사용되던 자기드럼과 자기테이프는 모두 보조기억장치로 밀려났다. 
제2 세대에 와서야 비로소 대형 과학계산에 적합한 컴퓨터가 나오기 시작하였다. 
그 시초는 필코(Philco)사에서 만든 Transac-2000시스템이었으며, 이후 유니백회사에서 군사용으로 트랜지스터를 이용해서 유니백 M460시리즈를 개발하였는데 당시에 개발된 컴퓨터로는 IBM 790, RCA 301, NCR 315, GE 200, NCR 300을 들 수 있다. 
이들의 전체 계산능력은 10자리 수의 덧셈을 초당 10만 번 가량 하는 정도였으니 제1 세대에 비해서 비약적인 발전을 한 것이다. 
제3 세대에 이르러서는 집적회로라는 혁명적인 기술이 개발되었다. 
기존의 제2 세대에서는 트랜지스터를 하나하나씩 따로 만들어서 이들을 각각 전선으로 연결하여 하나의 연산처리나 기억장치를 구성하였다. 
그러나 그 방식보다는 폴리실리콘과 메탈의 접합으로 생기는 트랜지스터와 같은 현상을 이용해서 트랜지스터와 그들의 상호연결을 하나의 웨이퍼라고 불리는 실리콘(규소)이나 게르마늄 위의 얇은 박막 위에서 한꺼번에 처리하고자 하였다. 
이러한 기술개발은 양자전자공학과 재료공학 그리고 고체물리학이 비약적인 발전을 이룩함에 따라 가능하게 된 것이다. 
집적회로는 컴퓨터의 신뢰도를 높이고 에너지 소비를 최소화한 점에서 특기할 만하다. 
제2 세대부터는 소프트웨어가 집중적으로 연구되기 시작하였다. 
이전 시대의 컴퓨터들은 프로그램의 호환성이 없다는 크나큰 결함이 있었다. 
즉 어떤 컴퓨터에서 작업을 하던 사용자가 다른 기계에 가서는 아무런 일도 할 수 없을 정도로 각 기계마다 자료의 표현방식, 연산체제 그리고 작동방법이 너무나도 달랐다. 
그래서 마치 영어를 상용하는 사람을 중국땅에 데려다놓고 일을 시키려는 것이나 마찬가지였다. 
또한 하드웨어의 호환성도 없어 한 기계에서 사용되던 장치를 다른 기계에 붙여서는 아무런 작동도 시키지 못했다. 
이런 불편함을 없애기 위해서 IBM에서는 컴퓨터 발달사에 획기적인 전환점을 이루는 상품인 IBM 360 시리즈를 내놓았는데, 이 시리즈의 컴퓨터들은 서로 프로그램을 교환할 수 있었다. 
이 IBM 360 시리즈의 '오퍼레이팅 시스템'을 개발하는 데서 얻어진 여러 경험은 나중에 다른 대형 소프트웨어 프로젝트를 수행하는 데 매우 중요한 기초를 제공하였으며, 그 경험의 산물들을 모아서 소프트웨어공학이라는 전산학의 한 새로운 분야를 개척하기도 했다. 
제3 세대에 개발된 계산기는 모두 집적회로를 사용했다. 
뷰로우(Burroughs), NCR, 허니웰, CDC, DEC 등 여러 다른 회사에서도 이 세대에 걸맞은 기계를 생산하였다. 
제3 세대의 또 하나 특기할 만한 사항은 미니컴퓨터의 등장이다. 
미니컴퓨터는 IBM 360과 같은 대형(main frame)컴퓨터에 비해서 처리능력은 떨어지지만 그것이 가지는 구조적 특성을 모두 갖춘 시스템이다. 
미니컴퓨터 개발의 선두주자는 DEC(Digital Equipment Corporation)였다. 
DEC에서 개발한 미니컴퓨터는 PDP 시리즈인데, 1970년에 완성된 PDP-11은 아주 성공적인 상품이 되었다. 
또한 자기잉크 문자판독기, 광학 문자판독기 등이 이 세대에 개발되었으며 통신 채널에 의한 원거리조작기능이 첨부된 컴퓨터가 개발되기 시작했다. 
제4 세대는 제3 세대에 비해 비약적인 진보나 기술 발전상 단층을 이룰 만한 계기는 없었으나 고체물리학 기술의 발달로 반도체의 집적도가 더욱 높아졌다. 
그 집적 규모는 하나의 정방형 실리콘조각에 수만 개의 트랜지스터회로를 그려넣을 수 있는 것으로 그 정도의 규모를 보통 초고집적회로(VLSI: Very Large Scale Integrated Circuit)라고 부른다. 
대형컴퓨터는 성능이 더욱 강화되었으며, 미니컴퓨터의 시장화도 성공하였다. 
IBM은 초대형컴퓨터로서 3031, 3032, 3033을 내놓았고 소형컴퓨터로서는 4300 시리즈를 내놓아 기존의 가장 발달된 370 시리즈를 대체하는 단계로 나아갔다. 
많은 계산이 필요한 일들이 갈수록 늘어남에 따라 빠른 속도를 가진 과학계산전용 계산기가 탄생하게 된다. 
그 시조는 바로 세이머 크레이(Seymour Cray)라는 젊은 기술자가 만든 최초의 슈퍼컴퓨터인 크레이Ⅰ(Cray Ⅰ)이다. 
크레이는 이전의 CDC의 6000 시리즈와 7000 시리즈 개발에서 얻은 경험을 되살려서 과학계산용에 더욱 적합한 벡터처리장치를 새로 개발하였다. 
벡터장치는 간단히 설명해서 서로 독립적으로 수행 가능한 연산을 각각 다른 처리장치에 넣어서 한꺼번에 동시적으로 계산하는 것이다. 
이후 슈퍼컴퓨터는 고에너지물리학이나 핵물리, 기상관측과 같이 엄청난 계산을 요구하는 일에 필수불가결하게 되었다. 
그리고 하나의 완성된 컴퓨터가 아닌 특수한 기능만을 가지고 있는 간단한 마이크로프로세서가 가격이 싸짐에 따라서 특수한 목적에 널리 사용되었다. 
특히 인텔(Intel)사와 자일로그(Zilog)사가 이 분야의 선두주자로 부상하여 엄청난 매출액을 기록했는데, 지금은 잘 사용되지 않는 Z80이라는 자일로그사의 8비트 마이크로프로세서는 80년대 초반까지 가장 널리 쓰였다. 
이러한 마이크로프로세서의 등장으로 마이크로컴퓨터의 시대가 열렸다. 
마이크로컴퓨터(일본식으로 부르면 마이컴)는 완전히 개인용컴퓨터로서 간단한 몇 개의 칩으로만 구성되므로 누구든지 어렵지 않게 제작할 수 있었다. 
제4 세대에 와서 초기 에니악 정도 크기의 계산기는 완전히 손바닥에 들어갈 정도의 크기로 줄었다. 
그래서 이 세대부터 마이크로프로세서가 단순히 계산기뿐만 아니라 가전용품과 통신기계에도 침투하기 시작하였다. 
값싼 계산기의 등장으로 누구나 개인용컴퓨터를 가질 수 있게 되어 생활에서도 비약적인 발전을 이룩했다. 
이것은 컴퓨터가 더 이상 셈놀이를 돕기 위한 수단만이 아니라 인간사회 구성원들 사이에서 정보의 흐름을 제어하는 차원의 기계로 발전했다는 것을 의미한다. 
이로 인해서 사회적으로도 컴퓨터로 말미암아 새로운 문화가 생겨나기 시작했다. 
컴퓨터미술과 컴퓨터음악이 생겨나고 컴퓨터를 잘 아는 사람과 그렇지 못한 사람들 간의 문화적인 갈등이 표출되기도 하였다. 
컴퓨터 본체의 케이스를 용기 있게 뜯어본 사람이라면 실망스러울 정도로 속이 비어 있는 것을 발견했을 것이다. 
칩들로 가득 찬 내부를 아무리 살펴보아도 데이터가 흘러가는 모습이라든지 톱니가 움직이는 따위의 광경은 볼 수가 없다. 
컴퓨터는 냉장고, 세탁기 등의 속과는 다르다. 
움직이는 것이라고는 쌩쌩거리며 돌아가는 요란한 꼬마선풍기(방열팬)뿐이다. 
컴퓨터시스템은 크게 하드웨어와 소프트웨어로 나뉜다. 
단어 자체는 단단한 것과 무른 것이라는 느낌을 주지만 그것과는 다소 거리가 있다. 
어떤 이는 하드웨어를 '여문모', 소프트웨어를 '무른모'로 번역해서 쓰자고도 하지만 아직까지는 어색하고, 기왕에 쓰이는 하드, 소프트란 단어도 이젠 제법 친숙해져 있으므로 그냥 사용해도 될 듯하다. 
하드웨어는 말 그대로 단단한 성분으로, 컴퓨터에 쓰이는 칩이라든지, 모니터스크린, 하드디스크, 키보드 등이 여기에 속한다. 
이 하드웨어는 독립적으로는 존재할 수가 없고 반드시 소프트웨어를 같이 가지고 있어야만 한다. 
즉 소프트웨어는 하드웨어를 움직이는 정보라고 할 수 있겠다. 
음악용 기기(오디오)에서 예를 든다면, 플레이어 즉 앰프나 턴테이블은 하드웨어에 속하고, 레코드판이나 녹음된 테이프 또는 컴팩트디스크 따위는 소프트웨어에 해당한다고 할 것이다. 
아무리 비싼 턴테이블이나 잡음이 적고 소리를 원음에 충실히 재생시켜주는 앰프가 있더라도, 들을 만한 레코드판이 없으면 그 오디오시스템은 원래의 가치를 상실한다. 
또한 역으로 명곡을 수록한 레코드판이 아무리 많다고 할지라도, 매끄럽게 재생시켜주는 앰프나 턴테이블이 없으면 아무런 소용이 없다. 
즉 한 오디오시스템은 이렇게 하드웨어와 소프트웨어의 적절한 배합과 균형으로 완성되는 것이다. 
컴퓨터시스템에서도 마찬가지다. 
아무리 빠른 중앙연산장치가 있다고 하더라도 그 연산장치에서 수행되는 프로그램이 비효율적으로 짜여 있다면 일은 능률이 오르지 않게 된다. 
이 단점을 극복하기 위해서 펌웨어(firmware)라고 하는 것이 생겨났다. 
이는 일반적으로 하드웨어와 소프트웨어의 중간단계라고 말하는데 사실은 소프트웨어의 일종이라고 보는 게 더 타당하다. 
왜냐하면 펌웨어란 기존에 하드웨어로 작동시키던 과정을 프로그램화하여, 유연성과 변화에 대한 적응성을 높인 프로그램이기 때문이다. 
어떤 동작을 수행하는 데 필요한 작업을 AND/OR 게이트 등 모두 트랜지스터 회로로 구현했다고 가정해보자. 
계산속도는 빠를 것이다. 
그러나 좀더 큰 숫자를 계산하기 위해서 자릿수를 몇 자리 더 늘리려면 다시금 트랜지스터의 회로를 뜯어서 새롭게 연결하여야 할 것이다. 
이 과정 자체를 마이크로 프로그래밍이라고 부르는 최하위 단위의 프로그래밍 기법을 사용하면 해결할 수 있다. 
즉 사용자가 시스템 밖에서 간단한 조작으로 내부의 연결상태를 바꾸어 놓는 것과 같은 결과를 얻을 수 있다. 
시간이 지날수록 하드웨어의 가격이 싸지고 대량생산이 가능해지며 각 부품의 표준화가 잘 되어가고 있기 때문에 마이크로프로그래밍 기법은 퇴조하고 있는 추세이다. 
한 연구조사에 의하면, 5년마다 하드웨어의 가격은 약 반으로 떨어지는 반면 소프트웨어의 가격은 크게 오르고 있다고 한다. 
하드웨어는 크게 연산장치와 주기억장치 그 밖에 주변장치인 모니터와 보조기억장치로 나뉜다. 
칩은 초고집적회로(VLSI) 기술이 발달함에 따라서 급격히 발달하고 있는데, 집적.초집적회로를 만드는 기술은 전산학의 분야라기보다는 전자공학이나 고체물리학의 분야이므로 그쪽의 관련서적을 찾아보기 바란다. 
소프트웨어에는 시스템 소프트웨어와 응용 소프트웨어가 있다. 
시스템 소프트웨어는 컴퓨터시스템이 무리 없이 작동하도록 자동적으로 조절해주는 프로그램으로서 운영체제(operating system)가 그 대표적인 예라 하겠다. 
얼핏 듣기에 운영체제란 어떤 체계 같은 느낌이 들지만 실은 거대한 프로그램이다. 
이 밖에도 프로그래밍언어를 번역해주는 컴파일러, 어셈블러 등이 시스템 소프트웨어에 속한다. 
이들에 대한 자세한 설명은 뒤에서 하기로 하자. 
한편, 응용 소프트웨어는 주어진 운영체제 내의 시스템 소프트웨어를 사용해서 만든 특별한 목적을 위한 프로그램이다. 
상업용 프로그램, 예를 들어 자동회계 프로그램이라든지 통신제어 프로그램들이 모두 이러한 응용 프로그램에 속한다. 
다음에는 시스템 소프트웨어 중에서 가장 중요한 운영체제(O/S)에 대해서 알아보자. 
운영체제를 인간의 신체에 비유한다면 숨골에 비유할 수 있겠다. 
숨골에서 하는 가장 중요한 역할은 무엇인가? 
숨골은 숨을 쉬게 하는 신경을 정기적으로 자극하여 인간의 호흡이 멈추지 않게 한다. 
대뇌에 상처를 입으면 기억이 상실된다든지 간단한 계산이나 읽기, 쓰기를 할 수 없는 바보가 되지만 숨골에 상처를 입으면 대부분 죽게 된다. 
그리고 우리의 심장이 뛰고 숨을 쉬는 것은 우리가 특별히 애를 쓰지 않아도 계속 진행된다. 
가령 인간이 계속 신경을 써야만 호흡을 할 수 있다면, 잠자고 나서 살아 있을 사람은 아무도 없을 것이다. 
우리가 잠자는 동안에 의식적으로 할 수 있는 일이란 아무것도 없기 때문이다. 
다시 컴퓨터로 돌아와 생각해보자. 
컴퓨터의 모니터스크린을 쳐다보면 아무런 움직임도 없다. 
다만 본체 뒷면에서 송풍기 돌아가는 소리만 요란스럽게 들릴 뿐이다. 
그러나 이때에도 인간의 숨골이 계속 작용하는 것과 마찬가지로 컴퓨터의 운영체제는 사용자로부터의 명령어가 무엇인지를 체크하면서 계속 기다리고 있다. 
운영체제는 우리가 컴퓨터를 켰을 때 최초로 기억장치에 올라와서 수행되는 프로그램이다. 
전자식 계산기를 켜면 곧바로 0이라는 숫자가 지시판에 나타나지만 개인용컴퓨터에 전원을 넣으면 한참 동안이나 덜거덕거리며 본체 속의 보조기억장치 돌아가는 소리가 난다. 
그리고 메모리 테스트(memory test)라는 메시지가 화면에 나타난다. 
이렇게 전자식 계산기에 비해서 컴퓨터가 제대로 작동하는 데 걸리는 시간이 긴 이유는 운영체제가 순조로이 수행준비를 갖춰 수행되기까지 소요되는 시간이 길기 때문이다. 
즉 운영체제가 필요 없는 전자식 계산기보다 운영체제를 가진 컴퓨터가 작동시간이 길 수밖에 없는 것이다. 
대형컴퓨터의 경우에 전원을 넣어서 일반 사용자가 제대로 사용하기까지 걸리는 시간이 짧게는 10분, 길게는 30∼40분 정도 되므로 그 운영체제의 크기를 짐작할 수 있을 것이다. 
운영체제는 컴퓨터시스템 내의 그 어떤 프로그램보다도 크다. 
운영체제와 프로그램 우리는 앞에서 중앙처리장치가 매우 중요한 한 부분임을 알았다. 
그래서 컴퓨터를 살 때 보통 중앙처리장치(간단히 말해서 CPU라고 한다)의 성능, 즉 얼마나 빠르게 움직이는가, 초당 연산할 수 있는 횟수는 몇 번 정도인가 등에 많은 관심을 가진다. 
그러나 이러한 수준에 관심을 가져야 할 사람은 극히 소수에 불과하다. 
즉 시스템을 전문적으로 제작하여 팔려고 하는 하드웨어 엔지니어나 또는 시스템 프로그램을 개발하려는 시스템 엔지니어 등에게는 의미가 있으나 일반 사용자 입장에서는 CPU의 차이가 별로 중요하지 않다는 것이다. 
그보다는 오히려 어떤 운영체제를 사용하는가가 더 중요하다고 하겠다. 
예를 들어 개인용컴퓨터 AT급에 흔히 쓰이는 운영체제로 DOS라는 시스템과 UNIX 계열의 XENIX라는 운영체제가 있는데, 이 둘은 매우 달라서 DOS만을 사용하던 사람이 처음 XENIX를 사용하게 되면 무슨 뜻인지 전혀 모른다. 
물론 XENIX만 사용하던 사람이 DOS를 처음 만나도 마찬가지다. 
이와같이 컴퓨터는 어떤 운영체제를 하드웨어에 입히는가에 따라서 완전히 다른 기계로 변해버린다. 
그래서 일반 사용자에게 제공되는 컴퓨터는 하나의 운영체제가 완전히 깔려 있는 시스템이지 아무런 프로그램도 들어 있지 않는 그 자체(보통은 배어머쉰(bare machine)이라고 한다)는 아니다. 
이렇게 컴퓨터 하드웨어 위에 운영체제만 올라가 있는 시스템을 사용자 입장에서는 '운영체제 가상기계'라고 말한다. 
만일 DOS를 쓰고 있다면 이는 DOS기계라고 불리며, 이 DOS기계는 DOS체제 내에서 개발된 프로그램만을 수행할 수 있는 것이다. 
컴퓨터시스템만큼 순수혈통을 따지는 기계도 없을 것이다. 
선반이나 기타의 공작기계는 다른 기계에서 작업하던 물건도 새로운 종류의 기계를 가져오면 적당히 조이고 늘여서 다시 작업을 할 수 있지만 컴퓨터시스템은 전혀 그렇지 못하다. 
따라서 제법 복잡한 프로그램은 그 프로그램이 어떤 운영체제 아래에서 수행될 것인지를 반드시 고려해서 작성해야만 한다. 
또한 같은 운영체제 내에서라도 그 버전(version)이 다르면 프로그램 교환을 할 수 없는 경우가 적지 않다. 
예를 들어 UNIX BSD 4.3 버전에서 잘 작동하는 어떤 프로그램이 BSD 4.1 버전에서는 같은 BSD 계열이긴 하지만 작동하지 않는 경우가 있다. 
이런 이유로 컴퓨터를 구입할 때는 모든 면에서 신중을 기해야 한다. 
어떤 컴퓨터는 값이 아주 싸게 매겨져 있지만 그 대신에 운영체제가 아주 불안하기도 하다. 
이런 시스템을 싼 맛에 그냥 덜컥 샀다가는 두고두고 후회하는 일이 생긴다. 
또 A라는 운영체제에서 개발된 P라는 프로그램이 좋아보여서 복사를 해왔다고 하더라도 A와 다른 운영체제를 가진 기계에선 그 프로그램이 전혀 돌아가지 않는다. 
그러므로 컴퓨터를 구입할 때는 기계에 어떤 운영체제를 올릴 것인지를 먼저 구상해야 한다. 
운영체제가 하는 일을 살펴보자. 
우리가 컴퓨터 앞에 앉아서 자판을 두드리면 그 명령어가 먼저 운영체제에 전달되어 그 명령어에 해당하는 프로그램을 수행시킨다. 
만일 운영체제가 알아듣지 못하는 괴상한 명령어를 주면 운영체제는 "그런 명령어는 없습니다"라는 영어 메시지 "Command not found."를 
보여주고 다음 명령어를 기다린다. 
따라서 컴퓨터를 사용한다는 것은 바로 운영체제와 대화를 하며 명령과 결과를 주고받는 것이다. 
다양한 명령어를 소화할 수 있는 운영체제가 사용자에게 편하리라는 것은 두말할 나위도 없다. 
그러면 이제부터 명령어를 수행시키는 과정에 대해서 살펴보기로 하자. 
먼저 컴퓨터의 전원 스위치를 올리면 특별한 일이 없는 한 보조기억장치에 수록된 운영체제가 주기억장치로 들어오게 된다. 
주기억장치보다 더 큰 운영체제가 있으면 경우에 따라 필요한 부분만 먼저 주기억장치로 들어오기도 한다. 
예를 들어서 주기억장치의 용량이 1메가바이트라고 하면 실제로 사용자가 마음대로 사용할 수 있는 양은 그것보다 적다. 
왜냐하면 운영체제란 항상 수행되고 있어야 할 프로그램이고 이렇게 수행중인 어떤 프로그램은 반드시 주기억장치에 있어야 하기 때문이다. 
운영체제가 주기억장치에 완전히 올라오면(보통 로드(load)되었다고 말한다) 운영체제가 작동하기 시작한다. 
운영체제가 책임지고 있는 일은 한두 가지가 아니다. 
주변장치의 상태점검부터 시작해서 불의의 사태, 예를 들면 정전과 같은 상황에 대한 응급처치, 사용자 중에서 누가 쓸데없이 보조기억장치를 필요 이상으로 또는 규정 이상으로 사용하고 있는가, 그리고 다른 컴퓨터시스템과 네트워크로 연결되어 있다면 전자우편이 그들로부터 도착했는지를 체크하는 일 등 무수히 많다. 
그중에서도 가장 중요한 것은 시스템의 현재 사용자로부터 명령어를 받아서 그것을 처리하는 역할이다. 
사용자가 시스템을 사용하고 있지 않을 때에도 모니터스크린에서 다음 글자가 어디에 출력될 것인지를 나타내는 조그만 밑줄인 커서는 깜박거린다. 
이렇게 커서를 깜박거리면서 운영체제는 끊임없이 사용자가 입력할 것을 기다리고 있다. 
사용자가 어떤 특정한 명령어를 입력하면 그 글자를 곧바로 명령어 번역기가 받아 어떤 명령어인지를 해석한다. 
그리고 여러 가지 명령어가 수록되어 있는 보조기억장치를 뒤져서 그 명령어군들을 주기억장치에 올려놓는다. 
그런 후 그 명령어들을 하나씩 가져와서 수행한다. 
한 명령어가 수행되기 위해서 그 명령어는 다시 주기억장치에서 밖으로 나와 명령어분석기로 들어간다. 
다음 그림을 보자. 
위 그림에서 프로그램카운터는 다음에 수행해야 할 명령어의 번지수를 가리킨다. 
여기에서 번지수란 기억장치의 몇 번째 칸인가를 지시하는 것이다. 
컴퓨터 내의 모든 자료는 반드시 두 가지의 의미 있는 사항과 결부되어 있다. 
그 둘은 내용과 그 내용이 담겨 있는 기억장치의 번지수이다. 
중앙처리장치 내에서 어떤 자료의 번지수를 모른다면 그 내용은 영영 찾지 못하게 된다. 
프로그램카운터는 대개 하나씩 내려가면서 다음 명령어를 지시한다. 
여기에서 우리는 주기억장치 내에 들어 있는 모든 자료는 '0'과 '1'로 구성된 2진(binary)자료임을 알고 있다. 
이런 상태를 흔히 기계어상태라고 한다. 
즉 지금의 기억장치에 1010110111010011이 저장되어 있다고 하자. 
이 코드의 앞부분은 주로 어떤 작업을 할 것인가 즉 덧셈을 할 것인가, 주기억장치에서 자료를 뽑아내올 것인가 또는 반대로 레지스터에 들어 있는 내용을 주기억장치 내로 불러와 쓸 것인지를 결정한다. 
그 뒤에 있는 내용은 그 연산의 목적어에 해당하는 것으로 보통 오퍼란드(operand)라고 부른다. 
예를 들어보자. 
➀ LOAD R1, MEM1 
❷ STORE R2, MEM2 
➌ ADD R1, R2 
위에서 표시한 기호는 물론 어셈블러(assembler)라는 번역기를 통하면 모두 2진수로 바뀌게 된다. 
이런 간단한 심볼들로 구성된 간단한 프로그래밍언어를 어셈블리 프로그래밍언어라고 한다. 
어셈블리 프로그래밍언어는 중앙처리장치에 따라서 제각기 다르다. 
우리가 가지고 있는 시스템에서 어셈블리 프로그래밍을 하고자 하면, 그 중앙처리장치를 만든 회사에서 제공한 기술자료집에 자세히 설명돼 있으니 그것을 참고로 하면 된다. 
위 명령어들을 하나씩 살펴보기로 하자. 
먼저 ➀번 명령어의 뜻은 MEM 1번지에 있는 내용을 레지스터 1번으로 옮기라는 것이다. 
레지스터란 4칙연산과 논리적 AND, OR를 연산할 수 있는 장치로 물론 정보를 보관할 수도 있다. 
주기억장치에서는 한 번지에서 다른 번지로 자료가 직접 이동될 수 없기 때문에 자료는 반드시 이 레지스터를 통해서 가야만 한다. 
레지스터가 많은 중앙처리장치는 그만큼 큰 힘을 발휘할 수가 있고 어셈블리 프로그래밍을 하기도 쉽다. 
그러나 같은 양의 정보를 주기억장치에 넣는 데 비해서 레지스터의 값이 월등히 비싸기 때문에 무한정 준비할 수는 없다. 
MEM 1도 실은 2진수로 표시된 수치값이 되어야 하는데, 그 일도 어셈블러가 해준다. 
➀번과 같은 것을 보통 로드(load)명령이라고 부른다. 
그 다음 명령은 로드명령의 반대로서 레지스터 R2의 내용을 주기억장치 MEM 2번지로 옮기라는 명령이다. 
그리고 ➌번 명령은 R1의 내용과 R2의 내용을 더해서 그 결과를 다시 R1으로 넣으라는 명령이다. 
물론 각 ➀, ❷, ➌의 명령에도 레지스터에서 레지스터로 옮기는 등의 다양한 변형들이 많다. 
또 레지스터의 종류도 인데스 레지스터니, 스택 레지스터 등 여러 가지가 있다. 
시스템의 자세한 부분까지 좀더 철저히 이용하기 위해서는 어셈블리 프로그래밍이 필수적인데, 이 어셈블리 프로그래밍을 제대로 하기 위해서는 여러 레지스터를 잘 사용하는 것이 급선무이다. 
그러면 이렇게 계산된 결과는 어떤 과정을 거쳐 모니터에 나타나게 되는 것일까? 
그것은 우리가 어떤 메모리의 특정번지에 글자를 쓰게 되면 모니터에 있는 한 프로세서가 메모리의 그 부위를 조사해서 그곳에 담겨 있는 내용을 스크린에 투사해주는 것이다. 
이것 역시 어셈블리 프로그래밍으로 할 수 있긴 하지만 꽤나 까다롭고 복잡한 작업이므로 매크로(MACRO)라고 하는 이미 잘 짜인 프로그램을 한 부분 빌려서 처리하는 것이 보통이다. 
최근에는 RISC(Reduced Instruction Set Computer) 구조를 가진 컴퓨터가 소개되고 있는데, 이 구조는 기존의 컴퓨터에 비해서 월등히 많은 레지스터를 사용하여 속도를 서너 배 정도 증가시켰다. 
앞으로 약 10여 년 정도는 이러한 RISC 구조가 유행할 것이다. 
일반적으로 컴퓨터라는 단어는 다소 추상적으로 쓰이거나 또는 컴퓨터의 중앙처리장치와 기억장치를 이용해서 작동할 수 있는 최소의 단위를 뜻한다. 
모니터스크린이 제거된 개인용컴퓨터 본체를 컴퓨터라고 말해도 크게 틀리지 않는다. 
그러나 이것을 컴퓨터시스템이라고 한다면 틀린 이야기가 된다. 
컴퓨터시스템은 사용자가 응용목적으로 실제 사용하려 할 때 불편 없이 사용할 수 있어야 하기 때문이다. 
따라서 제대로 된 컴퓨터시스템이라면 적어도 모니터스크린과 간단한 프린트 장치 그리고 다소 넉넉한 정도의 보조기억장치가 있어야 할 것이다. 
신문광고를 보다보면 다소 낭패스러울 때가 한두 번이 아니다. 
사진에는 모니터스크린과 간단한 도트프린터를 함께 찍어두고 그 옆에 '가격 인하'라고 강조하면서 가격을 적어둔다. 
그 아래에 조그만 글씨로 "모니터는 별매, VAT 별도"라고 써둔다. 
결국 그 가격은 단지 컴퓨터 본체의 가격만을 뜻하는 것이다. 
따라서 모니터는 따로 사야 한다. 
흔히 사용되고 있는 개인용컴퓨터 AT의 가격이 얼마라고 할 때는 AT시스템의 가격을 언급하는 것이다. 
이와같이 컴퓨터 가격이 의미가 있기 위해서는 컴퓨터시스템 가격을 명시해야 한다. 
대형시스템이 되려면 중앙처리장치를 안정시키기 위해서 부가적으로 자동전압조정장치(automatic voltage controller)와 항온항습장치를 포함하여 시스템을 구성해야 한다. 
어떤 회사에서 대형컴퓨터를 구매하려 할 때 가격을 컴퓨터와 그 부대장치만으로 산정한다면 나중에 전산실에 설치할 냉.온방기의 시설자금 때문에 큰 낭패를 당하게 될 것이다. 
컴퓨터시스템에는 어떤 종류가 있는지 살펴보기 전에 마이크로프로세서와 전자식계산기 그리고 컴퓨터의 차이에 관해 알아보자. 
마이크로프로세서와 컴퓨터는 비교적 높은 수준의 프로그래밍언어의 유무에 따라 구별된다. 
예를 들어서 컴퓨터세탁기라고 선전하고 있는 제품을 보자. 
그 세탁기에 사용자가 내릴 수 있는 명령어는 어느 정도인가? 
그것이 시간 예약기능, 작동시간 조정 정도에 그친다면 이는 마이크로프로세서라고 해야 할 것이다. 
사실 컴퓨터제품이라고 선전하는 대부분의 가전제품은 처리장치가 아무리 비싸더라도 컴퓨터라고는 할 수 없다. 
즉 Z-80이라는 중앙처리장치를 채택하였다고 해서 모두 컴퓨터가 되는 것은 아니다. 
아무리 단순한 프로세서라고 하더라도 적당한 기억장치와 베이직 번역기(basic interpreter) 정도를 갖춘다면 이것은 컴퓨터로 분류해야 할 것이다. 
최근에는 탁상용계산기에서도 나름대로 간단한 프로그램이 가능하게 되었다. 
게다가 손바닥만한 종이테이프로 계산 결과를 출력할 수 있는 정도가 되었으니 훌륭한 컴퓨터시스템이라고 할 수 있겠다. 
마이크로프로세서와 전자식계산기(electronic calculator)의 차이점은 사용 목적이 어디에 있는가이다. 
간단히 말하자면 전자식계산기는 마이크로프로세서를 사용해서 좀더 수치계산에 편리하도록 설계된 장치라고 해야 할 것이다. 
컴퓨터시스템의 종류는 규모에 따라 마이크로컴퓨터, 개인용컴퓨터, 미니컴퓨터, 슈퍼미니컴퓨터, 대형컴퓨터 그리고 슈퍼컴퓨터로 분류된다. 
먼저 마이크로컴퓨터는 현재는 거의 사용되고 있지 않지만 1970년대 애플(Apple)사에서 만들어 세계적인 히트상품이 된 컴퓨터이다. 
중앙처리장치를 8비트 단위로 처리해서 보통 8비트머쉰이라고 부른다. 
애플사에 의해 개발된 8비트컴퓨터는 컴퓨터시대를 여는 하나의 전환점을 이룩하였다. 
이후 IBM사에서 개인용컴퓨터를 개발했는데, 이 시스템은 16비트용 중앙처리장치를 채택하고 있다. 
개인용컴퓨터보다 더 강력한 시스템으로 미니(소형)컴퓨터와 메인프레임(main frame)이라고 부르는 대형시스템이 있다. 
소형컴퓨터 이상의 컴퓨터에서는 다수의 사용자가 동시에 사용할 수 있는 기능이 있어야 하며 또 충분한 하드디스크가 준비되어야 한다. 
요즘에는 기존의 소형컴퓨터시스템과 같은 정도의 능력을 가진 개인용컴퓨터로서 워크스테이션(work station)이 많이 이용된다. 
높은 해상도의 그래픽화면이 콘솔(console)에서 지원되는 워크스테이션은 주로 전문연구기관의 연구원들이 사용하고 있다. 
앞으로의 추세는 다수의 워크스테이션을 네트워크 형태로 묶어서 강력한 성능을 발휘하도록 하는 것이다. 
최근에는 무릎 위에서도 쓸 수 있는 랩탑(lap top)형 컴퓨터가 보급되고 있다. 
이보다 더 큰 성능을 가진 것으로는 슈퍼컴퓨터가 있다. 
그 속도는 대형컴퓨터보다 수백 배 이상이나 빠르기 때문에 특히 수치계산이 많은 기상측정계산이나 원자핵물리에서의 모의실험 등에 필수적으로 쓰이고 있다. 
개인용컴퓨터를 보면 텔레비전 화면과 같은 것과 그 아래에 깔려 있는 널따란 상자 모양의 본체, 그 앞에 놓여 있는 자판 그리고 기종에 따라 부가적으로 달려 있는 마우스가 있다. 
텔레비전과 같은 출력장치는 보통 모니터라고 부르는데, 이것이 가장 흔히 볼 수 있는 출력장치이다. 
모니터의 종류에는 컬러가 나올 수 있는 컬러모니터와 흑백만 나오는 모노크롬이라고 불리는 형이 있다. 
컬러모니터는 컬러텔레비전과 그 화면방식은 비슷하지만 해상도가 높고 각 천연색 점을 나타내는 방식도 다르다. 
예를 들어 컬러모니터에서 컴퓨터 출력을 받아보다가 그것을 컬러텔레비전으로 받으면 글자가 뿌옇게 보인다. 
따라서 가정용 오락기구로 쓰는 것이 아니라 여러 가지 테스트나 자료를 처리하기 위해서라면 컬러전용 모니터를 사용하는 것이 컬러텔레비전을 사용하는 것에 비해서 눈의 피로를 훨씬 덜어준다. 
일반적으로 모니터의 성능을 평가할 때 해상도(resolution)라는 단위를 사용한다. 
예컨대 어떤 컴퓨터의 해상도가 750×650이라고 하면, 그 모니터는 가로 750개의 화소(pixel), 세로 650개의 화소를 가져서 전체적으로 750×650개의 화소를 가진다는 뜻이다. 
따라서 전체 화소 수가 많을수록 세세한 그림까지 정확히 표시할 수 있다. 
1024×1024 정도의 해상도를 가지면 상당히 고급 모니터라고 할 수 있고, 4096×4096 정도면 거의 최고 품질의 모니터라고 하겠다. 
컬러일 경우 각 화소가 나타낼 수 있는 색깔의 수도 성능 평가의 중요한 요소인데, 그 단위는 비트플레인(bitplane)이다. 
예를 들어 어떤 컬러모니터가 8비트플레인이라면 한꺼번에 화면에 나타낼 수 있는 색깔의 수가 모두 28, 즉 256개란 뜻이다. 
한 화소가 가질 수 있는 색깔의 총수와 한 화면에서 동시에 표현할 수 있는 색깔의 수는 다르다. 
즉, 어떤 컬러모니터는 4096개의 색깔이 준비되어 있지만 동시에 표현할 수 있는 색깔은 24인 16개뿐이다. 
약간 단조롭다고 하겠다. 
동시에 표현할 수 있는 색깔이 많으면 많을수록 각 화소에 배당되는 색깔전용 기억장치가 대폭 증가하여 값이 크게 상승하게 된다. 
즉 색깔의 가짓수가 2배 정도 증가하면 전체 모니터의 가격은 2의 제곱배 이상 오른다. 
개인용컴퓨터의 컬러모니터는 대부분 총 256가지 색깔을 가지며, 16가지 색깔을 동시에 보여줄 수 있다. 
이제는 흑백모니터에 대해서 살펴보자. 
가장 흔한 형태인 흑백모니터의 성능은 해상도보다는 (물론 해상도도 중요하지만 일반적으로 대동소이하다) 몇 가지의 글자를 나타낼 수 있는가에 달려 있다. 
흑백화면의 경우 우리가 'A'라는 글자를 입력하면 'A'라는 자형에 관한 이미지가 저장된 칩에서 그 이미지를 전체로 꺼내어 그 모형을 지정한 화면에 투사해주기 때문이다. 
그래서 흑백화면에 한글을 쓰고 싶다면 한글 자형에 관한 이미지가 저장된 칩이 준비되어야 한다. 
모니터는 단순하게 보이지만 실제로 열어 내부를 보면 20여 개의 칩과 아기의 치아같이 생긴 조그마한 스위치가 잔뜩 널려 있는 꽤 복잡한 형태를 띠고 있다. 
그 기판 위에 한글칩이 없다면 일반적으로 한글을 사용할 수 없다. 
즉 한글프로그램이 있더라도 모니터에서 그 한글을 처리해주지 못한다면 한글을 사용할 수 없게 되는 것이다. 
이 경우 화면상에 괴상한 영어문자와 그래픽용 문자들이 한글을 대신해 나타나서 괴이한 장면을 만들어낸다. 
물론 한 화면에서 화소 하나하나를 세세히 조절할 수 있는 상태로 만들면 한글 아니라 다른 여러 가지 무늬도 새겨넣을 수 있는데, 이런 상태를 우리는 그래픽용 화면이 되었다고 말한다. 
그래픽보드로도 글자를 표시할 수는 있지만 말 그대로 한 자씩 그려내기 때문에 속도가 매우 느리다. 
따라서 아직까지는 한글칩이 장착된 모니터에서만 한글을 처리할 수 있다고 보아야 할 것이다. 
흑백모니터에도 완전히 희고 완전히 검은 두 가지 색깔만 나타낼 수 있는 것과 그 가운데 단계인 회색까지 나타낼 수 있는 것이 있다. 
후자의 기능을 가진 모니터를 그레이 스케일(gray scale)을 가진 것이라고 말한다. 
해상도가 같다고 하더라도 일반적으로 화면 자체가 크면 글자가 뿌옇게 보이므로 해상도가 낮은 경우 화면 자체가 약간 작은 것을 구입하는 것이 좋다. 
흑백화면의 색깔도 이전에는 모두 짙은 초록색을 선호하였으나 최근에는 호박색과 약간 희끄무레한 색도 많이 쓰인다. 
연구에 의하면 호박색이 기존의 초록색에 비해서 눈의 피로도를 덜어준다고 하는데, 이것은 아직 확실히 밝혀지지는 않았다. 
어떤 모니터는 모니터 안쪽에 칠해 있는 인(phosphorus)성분이 너무 많아서 앞의 화면이 다 지나가고 나서도 그 화면의 잔상이 많이 남아 눈을 무척 피곤하게 만드는데, 이는 구입시 유의해야 한다. 
또 모니터를 지나치게 밝게 해서 사용하는 것도 눈의 건강을 위해 되도록 피해야 한다. 
자판은 흔히 볼 수 있는 타자기와 같은 모양이다. 
영어자판은 타자기와 동일하지만 컨트롤키와 몇 가지 키들이 덧붙여져 있다. 
그중에는 함수키와 숫자자판이 따로 준비된 것도 있다. 
함수키는 F1, F2 식으로 표현되는데, 이는 특정 어구를 자주 쳐야 할 때 사용된다. 
예를 들어서 만일 "directory show up"이라는 명령어를 빈번히 쳐야 한다면 한 함수키(F1)에 그 글자 모두를 저장해, 그 명령어가 필요할 때마다 F1키만 누르면 되게 해서 사용자의 수고를 훨씬 덜어주는 것이다. 
영어자판은 여러 차례 개선되어왔다. 
그냥 A, B, C를 차례대로 배열하는 것이 아니라 자주 사용하는 모음이라든지 s나 t를 좀더 움직이기 쉬운 검지나 중지에 집중되도록 배열하였다. 
대표적으로 많이 쓰이는 자판 배열은 쿼티배열이라고 하는 것인데, 쿼티란 자판의 왼쪽 위에서부터 오른쪽으로 가면서 나타나는 글자(QWERTY)를 차례대로 쓴 것이다. 
사실 쿼티자판은 기계식 타자기를 위해서 만들어졌기 때문에 고의적으로 타이핑속도가 너무 빨라지지 않도록 고안되었다. 
왜냐하면 기계식타자기는 너무 빠른 속도로 칠 경우에 글쇠들이 서로 엉키기 때문이다. 
따라서 영미권에서는 20년 전 컴퓨터에 맞는 새로운 드보락(dvorak)자판을 고안했으나, 사람들의 타이핑 습관 때문에 널리 채용되지는 않고 있다. 
한글자판에서도 이러한 쿼티자판의 전철을 밟지 않기 위해서 다양한 노력이 기울여지고 있다. 
최근에는 인간공학이 더해진 새로운 자판도 나왔다. 
이 자판은 키가 손바닥 모양으로 배치되어 있어 손을 조금만 움직이고도 타이핑을 할 수 있다. 
그러나 아직은 널리 보급되어 있지는 못하고 시험적으로 쓰이고 있는 정도이다. 
숫자자판은 보통 자판의 오른쪽에, 버튼형전화 숫자판과 같은 배치로 놓여 있다. 
물론 자판의 제일 위쪽 줄에도 1, 2, 3 등 숫자가 차례대로 배열되어 있으나 숫자 입력만 전문적으로 할 경우 일렬로 늘어선 숫자키를 번갈아 누르기가 쉽지 않기 때문에 이런 불편을 덜기 위해서 준비된 것이다. 
이 숫자자판은 슈퍼마켓 등 숫자를 많이 사용하는 곳에는 항상 준비되어 있다. 
그리고 보조입력장치인 마우스(mouse)와 게임전용 입력장치인 조이스틱(joy stick)이 있다. 
먼저 모니터를 내려놓고 본체를 살펴보면 앞쪽에는 플로피디스크를 넣을 수 있는 구멍이 한 개 또는 두 개 있으며, 뒤쪽에는 바람을 불어내는 송풍구가 있고 그 안쪽에 조그만 선풍기가 보인다. 
아마 이 송풍기가 컴퓨터에서 가장 시끄러운 부분일 것이다. 
대형컴퓨터에서도 마찬가지로 가장 시끄러운 부분은 컴퓨터실을 관리하는 에어컨이다. 
컴퓨터실을 견학하고 온 사람들은 컴퓨터를 꽤나 시끄러운 기계라고 생각하는데, 이는 사실 에어컨소리이다. 
보조기억장치에서 발생하는 열을 식히기 위하여 설치한 팬(fan)이 시끄러운 부분일 뿐이므로 디스켓 작업을 자주 하지 않는 사람이라면 아예 본체를 방 밖으로 내놓거나 책상 아래에 두면 한결 소음을 줄일 수 있을 것이다. 
본체 내부를 보기 위해서 겉덮개를 열어보면 기판 위에 여러 크기의 칩들이 붙어 있고, 그 사이사이에 뾰족하게 축전기가 여러 개 솟아 있다. 
또 빛나는 색깔을 가진 저항기도 보인다. 
먼저 가장 중요한 중앙처리장치부터 찾아보자. 
일반적으로 중앙처리장치는 제일 덩치가 큰 칩일 경우가 많다. 
개인용컴퓨터 AT일 경우는 잘 알려진 80286이라는 칩이 중앙처리장치이므로 칩들의 등딱지 위를 자세히 살펴보면 80286이라는 흰색 마크가 찍혀 있다. 
80286은 인텔(Intel)이라는 미국 회사에서 만든 것인데 앞의 두 자리 숫자인 80은 마이크로프로세서의 일련번호를 말하며 같은 시리즈로서는 80386, 80486, 80860 등이 있다. 
중앙처리장치 칩의 가격은 낱개로 살 때 대략 6만 원 정도이므로 개인용컴퓨터 AT 가격을 150만 원으로 가정했을 때 1/20도 되지 않는다. 
중앙처리장치가 핵심 부품임에도 불구하고 이렇게 값이 싼 이유는 대량생산이 가능하고 가격 경쟁이 치열하기 때문이다. 
이에 비해서 기계장치가 많은 하드디스크 드라이브는 1메가바이트당 1만 원 정도이므로 40메가바이트 정도의 보조기억장치를 장착하려면 약 40만 원 정도의 추가비용을 부담해야 한다. 
가격도 중앙처리기가 내린 데 비하면 많이 내리지 않았는데, 그 이유는 아무래도 기계장치가 많기 때문에 가격이 내리는 데 어느 정도 한계가 있기 때문이다. 
주기억장치는 같은 크기의 자그마한 칩들이 규칙적으로 배열된 부분에 있으며, 그 칩 위의 번호를 보면 알 수 있다. 
예를 들어 텍사스 인스트루먼트에서 나온 메모리칩들 중에서 41로 시작되는 칩들은 RAM을 나타내고, 27로 시작되는 것들은 ROM을 나타낸다. 
그리고 뒤의 세 자리 수는 킬로비트 수를 표시한다. 
따라서 41256이라는 마크가 찍힌 칩은 RAM이면서 그 하나의 저장용량이 256킬로비트임을 나타낸다. 
이것을 바이트로 환산하면(1바이트＝8비트) 32킬로바이트이므로 대략 영문 3만 2000자 정도를 기억할 수 있는 것이다. 
최근 들어 외국에서 256메가 메모리칩을 개발하였다고 하니 그 발전속도에 놀랄 따름이다. 
이외에도 모니터 표시를 위한 칩이나, 디스크 드라이브를 제어하기 위한 또는 입출력장치 중에서 자판이나 다른 기계의 접속으로 들어오는 데이터 포트 등을 제어하는 칩들이 준비되어 있다. 
칩들의 번호가 74로 시작되면 이는 텍사스 인스트루먼트에서 나오는 NAND게이트(소자)나 NOR게이트임을 나타낸다. 
이외에 산술연산기(arithmetic logic unit)와 프로그래밍에 자주 나타나는 여러 가지 레지스터는 모두 중앙처리장치 안에 함께 들어 있으므로 우리가 눈으로 확인할 수는 없다. 
컴퓨터시스템 내에서 가장 비싼 부품을 꼽으라면 보조기억장치인 하드디스크 드라이브를 들 수 있을 것이다. 
그러나 이는 비싼데도 사고가 가장 빈번하게 일어나는 부품이다. 
또한 가장 열이 많이 발생하는 부분이기도 하다. 
보조기억장치인 하드디스크 드라이브를 전문가들 사이에서는 보통 간단히 하드라고 부른다. 
하드디스크는 몇 장의 디스크 사이를 헤드가 움직이면서 특정한 위치에서 자료를 읽어오거나, 쓴다. 
디스크는 금속이 주재료이며 그 위에 자기(magnetic)물질이 양면으로 입혀져 있다. 
헤드는 직접 회전하지 않고 디스크가 회전 하여 헤드 아래 특정한 정보를 가져다준다. 
대략의 모양은 아래 그림과 같다. 
정보는 디스크의 트랙이라는 단위에 나뉘어 저장된다. 
특정한 정보를 처리하는 순서는 다음과 같다. 
먼저 주기억장치에 있는 파일테이블에서 찾으려는 자료가 하드디스크의 어느 면, 어느 실린더, 몇 번째 트랙에 있는지를 알아낸다. 
정보 찾기가 시작되면 헤드는 지정한 실린더가 있는 깊이까지 진입한다. 
이 경우 우리는 그 실린더의 제일 처음 포인터를 찾기 위해 반 회전 정도를 해서 그 트랙에 관한 정보를 가진 표를 주기억장치로 읽어들여 분석한다. 
그리고는 어느 정도까지 회전해야 하는지를 결정해서 특정한 트랙을 읽어들인다. 
특정한 트랙까지 찾아가는 데는 대충 몇 밀리 초 정도가 걸린다. 
인간의 관점에서 본다면 눈 깜짝할 사이라고 할 수 있겠지만 중앙처리장치 쪽에서 보면 주기억장치에서 특정한 정보를 찾아내는 데 비해 수천 배나 느리다. 
이런 속도차를 없애기 위해서 여러 가지 방법이 구상되고 있다. 
사용자의 관점에서 본다면 같은 가격이라면 좀더 안정되고 충분히 빠른 하드디스크를 구입하는 것이 전체 시스템의 속도를 높이는 가장 효과적인 방법이다. 
대형컴퓨터의 하드디스크는 개인용컴퓨터에 비해서 훨씬 용량도 크고 정밀하다. 
게다가 팩(pack)이라는 단위로 되어 있기 때문에 디스크를 들고 다닐 수도 있고 교환도 더 용이하다. 
이것은 물론 기계적인 장치까지 들고 다니는 것을 의미하지는 않는다. 
대형컴퓨터의 하드디스크에서 헤드와 디스크면의 간격은 매우 좁아서 담배 연기 알갱이가 들어가도 긁혀서 못 쓰게 될 정도이다. 
따라서 어떤 디스크팩은 사이를 아예 깨끗한 기름으로 채워넣어서 헤드와 디스크면이 긁히는 것을 방지하기도 한다. 
컴퓨터시스템에서 중요한 대형정보는 대부분 하드디스크에 담겨 있기 때문에 디스크의 관리에 매우 신경을 써야 한다. 
잦은 정전이나 벼락, 불결한 실내공기, 실내온도의 급격한 변화 등은 디스크 드라이브에 치명적이기 때문에 주위환경이 불안정해지면 하드디스크를 정지시키는 것이 대형사고를 막는 가장 좋은 방법이다. 
모니터스크린과 더불어 가장 널리 쓰이는 출력장치가 프린터인데 구식 프린터인 데이지 휠 프린터에서부터 최신식 레이저프린터에 이르기까지 그 종류는 매우 다양하다. 
초기의 프린터는 지금과 같이 글자가 찍혀 나오는 것이 아니라 종이테이프에 모르스부호와 같이 또다시 해석을 해야 하는 부호를 나타내는 구멍을 뚫어 표시하였다. 
이후에 나온 데이지 휠 프린터는 부챗살 모양으로 생긴 자형이 프린터 앞에 달려 있어서, 가령 'a'라는 글자를 찍고 싶다면 그 부챗살을 회전시켜 'a'라는 자형을 찍고자 하는 위치에서 멈추게 한다. 
그러면 해머가 'a'자형의 뒤를 전기충격을 이용해서 가볍게 때리고, 이에 따라 자형과 종이 사이의 검은 리본에 의해 글자가 새겨진다. 
부챗살이 돌아야 하므로 속도도 느리지만 더 큰 결점은 부챗살이 잘 부러지고 소음이 크다는 것이다. 
장점이라면 글자 모양이 매우 깨끗하고, 부챗살만 갈아끼우면 여러 가지 글자 모양을 낼 수 있다는 점이다. 
데이지 휠을 개선한 프린터가 도트프린터인데 그 해머는 바늘 십수 개를 뭉쳐놓은 것과 같다. 
필요한 글자를 프린트하고 싶으면 그 전기적 신호가 해머로 전달되어 그 자형에 해당하는 바늘이 전기적 신호로 튀어나와서 종이 위의 리본을 누르게 되어 원하는 글자를 찍게 된다. 
해머는 몇 개의 바늘로 이루어져 있는가에 따라서 등급이 나누어지게 되는데 9핀(pin)과 24핀이 있다. 
도트프린터는 글자뿐만 아니라 다양한 문자와 그림까지도(비록 시간은 많이 걸리지만) 그릴 수 있는 장점이 있다. 
예를 들어서 데이지 휠 프린터에서는 찍을 수 없는 적분기호 등 다양한 기호를 도트프린터는 찍을 수 있다. 
도트프린터의 단점은 먼저 글자모양이 점들로 이루어져 있기 때문에 거칠게 보인다는 것이다. 
또한 속도가 느리며 소음도 꽤 심한 편이다. 
그러나 원고의 초고본을 찍을 때에는 아주 편리하다. 
좀더 높은 질의 프린트를 하려면 한 줄을 몇 번 왔다갔다 하면서 찍으면 된다. 
프린트 도중에 종이를 잡아당긴다든지 하면 핀이 부러지기 쉬우므로 주의해야 한다. 
대형시스템에서는 라인프린터라는 데이지 휠 프린터와 원리가 같은 매우 빠른 프린터를 사용하는데, 이는 글자 모양도 예쁘고 프린터에 장착된 자형판을 한꺼번에 여러 가지를 넣을 수 있기 때문에 편하지만 소음이 많이 나고 그림이나 복잡한 수식을 찍을 수 없다는 단점이 있다. 
플로피디스크나 하드디스크 등 전자시대의 장치들은 기억매체로써 유용하게 쓰이지만 불의의 사고에 취약하기 때문에 아직도 만약의 사태에 대비하여 중요한 정보는 종이에 찍어 보관한다. 
이집트의 파피루스시대에 사용되기 시작한 종이가 레이저디스크 등 최첨단 기계의 발달에도 불구하고 아직도 가장 안전한 기록매체로 남아 있다는 사실이 흥미롭다. 
최근에는 잉크를 전자적 힘으로 분사하는 잉크젯 방식과 복사기의 원리를 응용한 레이저프린터가 급속히 보급되면서 충격식 프린터(도트프린터, 라인프린터)를 몰아내고 있다. 
레이저프린터의 원리는 다음과 같다. 
먼저 레이저광이 원하는 무늬에 따라 음전하를 종이에 입히는데, 그 정밀도는 1cm당 약 200여 개의 점을 지정할 수 있을 정도이다. 
그리고 양전하를 토너(toner)가루에 입혀서 종이 위에 뿌린다. 
이때 양전하를 가진 토너는 종이의 음전하가 있는 곳에 모이게 되고, 그 위를 뜨거운 롤러가 지나가면서 토너입자를 힘껏 누른다. 
그러면 입자 속의 잉크가 터져나와서 한 점씩 그려지게 된다. 
이런 이유로 복사기와 레이저프린터는 항상 뜨거우므로 롤러에 손을 대지 않도록 조심해야 한다. 
레이저프린터에서 나는 약간 비린 냄새는 종이에 음전하가 잘 입혀지도록 먼저 뿌려두는 오존(O3) 냄새이다. 
언어는 인류가 발명한 최고의 걸작이다. 
동시에 인류를 여타의 동물들과 구별해주는 중요한 가름대 역할을 한다. 
돌고래도, 침팬지도 나름대로의 언어가 있다곤 하지만 인간의 그것만큼이나 풍부하지도, 문자화되어 있지도 않다. 
더러 도가 트인 도사들은 전혀 말하지 않고서도 서로 대화를 한다고들 한다. 
선(禪)의 경지에 도달하면 그것이 가능할 것이다. 
부처님께서 가섭에게 연꽃을 보이면서 미소로 말씀하신 뜻은 무엇보다도 깊다. 
그렇지만 그것은 일종의 느낌의 전달이지 사물의 상태를 자세히 전해주는 것은 아닐 것이다. 
아무리 부처님이라지만 지난 밤 늦게까지 본 명화극장의 꽤나 복잡한 줄거리를 말없이 전하기란 쉽지 않을 것이다. 
이와같이 언어는 인간들이 서로의 생각이나 감정을 교환하는 주요한 통신수단이다. 
돈이 재물을 교환하는 매체이듯이 언어는 인간이 사회에서 자신을 외부에 알리고 외부의 정보를 전달받는 매개체가 된다. 
따라서 언어능력을 상실한다는 것은 생물학적으로는 살아있지만 사회적으로는 반쯤 죽은 것이나 다름없다. 
언어에는 인공언어와 자연언어가 있다. 
자연언어는 한국어, 중국어, 영어와 같이 보통 우리가 하는 말(言)이다. 
한 민족의 언어가 제대로 정착되기까지는 오랜 세월이 걸린다. 
인류가 간단한 세포체에서 영장류로 진화해왔듯이, 언어도 원시시대의 '어버버……' 하는 유치한 단계에서 지금과 같이 최고도로 발달하여 도리어 어지럽기까지 한 상태가 되었다. 
이에 비해서 인공언어는 문화적인 진화에 의해서가 아니라 필요에 의해서 발명된 것이다. 
또 그 기초가 매우 단단한 수학적 공리(axiom)에 있기 때문에 정확하다. 
예를 들면 모르스가 만들었다는 '똔과 또 ─ 스' 역시 하나의 훌륭한 인공언어이다. 
모르스부호는 인간의 목소리가 미칠 수 없는 먼 거리를 오가며 서로 통화할 수 있게끔 해준다. 
그보다 더 간단한 것은 우리 주위에 있는 전자식 보온밥통에서도 볼 수 있다. 
ON과 OFF, 두 단어로 되어 있는 언어를 이용하여 우리는 전자밥통과 대화를 한다. 
밥통 앞에서 아무리 "수리수리 밥통아, 데워져라 수리수리"를 외쳐봐야 아무런 소용이 없다. 
밥통이 알아듣지 못하기 때문이다. 
밥통이 알아들을 수 있는 단어는 단 두 가지, ON과 OFF밖에 없다. 
우리가 ON과 OFF라고 외치지 않고 손가락으로 스위치를 누르기 때문에 좀더 정확히 말한다면 일종의 제스처(gesture)언어라고 해야 할 것이다. 
전자보온밥통은 단순한 일을 하기 때문에 단순한 언어만 있으면 된다. 
그러나 좀더 복잡한 기계라면 하는 일도 다양하기 때문에 사용되는 언어도 복잡해질 것이다. 
선풍기는 밥통보다는 복잡하다. 
바람의 강약도 조절해야 하고 바람을 좌우로 돌리기도 해야 하며 또 시간예약도 해야 한다. 
따라서 스위치(기계언어)도 제법 복잡해진다. 
최근에 나온 비디오플레이어는 수많은 스위치가 바윗돌의 따개비같이 다닥다닥 붙어 있다. 
게다가 하나의 스위치가 몇 가지의 기능을 겸하고 있는 것도 있다. 
그래서 노인이나 기계공포증이 있는 사람에게는 이 비디오플레이어용 리모트컨트롤러(remote controller)가 섬찟할 정도로 복잡하게 느껴질 것이다. 
기계가 복잡해질수록 통화언어도 복잡해져서 사용설명서가 제법 도톰한 책으로 나오기도 한다. 
이러한 인공언어를 배우는 데 익숙지 못하다면 현대를 살아가는 것이 점점 더 불안해질 수밖에 없을 것이다. 
인공언어 중에서 가장 복잡한 것이 바로 컴퓨터 프로그래밍언어이다. 
우리가 컴퓨터를 배운다는 것은 바로 이 컴퓨터에 부과된 인공언어를 배우는 것이다. 
이것은 말을 배우는 것과 다를 바가 없다. 
단순한 프로그래밍언어를 배운다면 컴퓨터에게 단순한 명령밖에 내릴 수 없어 그것을 충분히 활용하지 못하게 된다. 
표현력이 충분하지 못한 언어를 배우게 되면 한 마디 할 것을 여러 마디의 잔소리로 부풀려 하게 된다. 
이런 경우는 우리 일상생활에서도 많이 생긴다. 
만약 청소라는 단어를 모른다면 어떻게 될까? 
'청소하라'라는 명령은 그보다 낮은 단계의 동작으로 나뉘어 전달될 수밖에 없을 것이다. 
"빗자루로 방을 쓸고 그 쓰레기를 쓰레받기에 담아서 버려라. 
그리고 그 쓰레기통을 비워라. 
또 물건은 제자리에 두고 방바닥은 물걸레로 닦아라." 
얼마나 복잡한 명령인가. 
만일 '쓸어낸다'라는 단어도 모른다면 우리는 이렇게 명령을 해야 할 것이다. 
"빗자루의 털 달린 부분을 방바닥에 약간 눌러세운 채로 팔을 오른쪽에서 왼쪽으로 움직인다. 
단 이때 빗자루의 등과 방바닥은 수평이 되도록 유지하라." 
이렇게 복잡하다면 우리는 도리어 더 어지러워진다. 
이와같이 청소라는 단어를 가진 언어와 그렇지 않은 것과는 엄청난 차이가 있다. 
프로그래밍언어에서도 마찬가지이다. 
그러나 명령어 수준이 높다고 해서 무조건 좋은 것만은 아니다. 
예를 들어 "외출하는 동안 집 잘 지켜라"라는 명령은 매우 높은 수준의 명령이라 간단하긴 하지만 더 자세한 내용이 그 표현에 가려 있다. 
즉 꽃밭에 물을 주라는 것인지, 그냥 우두커니 집 앞에서 강아지 모양으로 집채를 지키고 앉아 있으라는 이야기인지 다소 모호하다. 
따라서 이때는 그 대신 이렇게 해야 할 것이다. 
"집안 청소하고, 뒤뜰과 꽃밭에 물도 좀 주고, 오는 전화 잘 받고 강아지 저녁도 챙겨주고……" 표현수준을 조금 내린다면 더 자세하고 꼼꼼하게 명령을 내릴 수 있다. 
이것은 컴퓨터에서도 마찬가지이다. 
더 자세한 것은 뒤에서 하나하나 살펴보겠다. 
인공언어에 대한 연구는 일찍이 수학적 기호(notation)에서 비롯되었다. 
그러나 좀더 복잡해지고 기계와의 본격적인 통화수단으로 사용되기 시작한 것은 기계 자체가 복잡한 계산기능을 가지면서부터이다. 
제 2차 세계대전이 끝날 무렵 독일의 콘라드 추제라는 젊은 엔지니어는 자신이 설계한 전자식계산기의 프로그램을 좀더 쉽게 하기 위한 방법 연구에 골몰하였다. 
그러나 불행히도 그것이 완성되기도 전에 독일은 패망하였다. 
그래서 플랑칼퀼이라고 불리는 원시적인 프로그래밍언어는 자신의 조국의 운명과 함께 사라지고 말았다. 
플랑칼퀼은 추제가 만든 Z4라는 암호생성전문계산기 전용 프로그래밍언어였는데 2차대전의 화약연기가 완전히 사라지고도 남을 시간인 무려 30여 년 뒤인 1970년에야 비로소 발표되었다. 
대부분의 학자들은 뒤늦게 알려진 추제의 생각에 감탄과 아쉬움을 동시에 나타내었다. 
그러나 그때는 이미 프로그래밍언어에 대한 연구가 본격적으로 시작되고 있었다. 
1948년, 세기의 천재이자 컴퓨터과학의 바흐격인 알란 튜링(Alan Turing)은 자신이 만든 암호해독용 기계의 프로그래밍에 몰두했다. 
그는 컴퓨터과학의 이론적 기초를 세우면서, 모든 디지털컴퓨터의 수학적 모델인 튜링기계(Turing Machine)를 제안하였다. 
그 기계의 명령어부분은 5개의 비트로 구성되어 있어 모두 32개의 서로 다른 명령이 가능했는데, 그것을 하나하나 외우기란 매우 힘들었다. 
그래서 튜링은 명령어부분의 코드 하나하나를 표준 텔레타이프의 각 키와 결부시켰다. 
즉 텔레타이프의 한 키를 치면 그 키에 해당하는 명령어가 입력되게 하였다. 
그런데 그 명령어를 순서대로 나열해놓고 보니 아주 괴상한 문자들의 일렬이 되어버렸다. 
그래서 좀더 쉽게 그 순서를 외기 위해서 궁여지책으로 각 명령어의 첫 글자로 된 단어로서 엉터리 시를 지어서 외웠다. 
그 엉터리 시를 소개하자면 "나폴레옹의 왕립정의회를 사수하라. 
왜냐하면 챨리가 키 큰 얼룩말이 웃는 것을 알았기 때문이다. 
…" 하는 식이다. 
도무지 무슨 뜻인지 알 수 없었지만 튜링과 같이 일한 동료들은 그 엉터리 시를 낄낄대며 외웠다. 
튜링은 동성연애자로 평생 독신으로 지냈으며 자신의 지적 능력을 시험하는 일을 즐겼다고 한다. 
그래서 그의 죽음은 그의 삶만큼이나 괴상한 것이었다. 
그는 자신이 만든 문제를 제시간 안에 풀지 못하면 독약이 자기 입으로 들어가도록 만든 장치에서 스릴을 만끽하는 '무인도게임'이라는 것을 즐겼는데, 결국 그 게임 도중 자신의 덫에 걸려 자살 아닌 자살을 하게 된 것이다. 
튜링의 엉터리 시는 기계어 프로그래밍이 다음 단계인 어셈블리 프로그래밍으로 발전해가는 데 커다란 공헌을 했다. 
기계의 관점에서 본다면 기계어 프로그램이 가장 명확한 것이다. 
예를 들어서 3+5를 기계어식으로 프로그래밍한다면 우선 3과 5라는 숫자를 기계에 표현한다. 
작대기나 스위치로서 여기저기를 눌러 3과 5라는 숫자를 집어넣는다. 
그리고 '더하기'라는 명령어도 기계내부에 표현한다. 
스위치를 이리저리로 움직여서 두 숫자가 더하기 상태가 되도록 준비시킨다. 
비유하자면 텔레비전에서 채널을 옮길 때마다 수십 가닥의 전선뭉치에서 몇 개를 골라서 그들을 연결하는 것과도 같다. 
이것이 바로 기계식 프로그래밍이다. 
이러한 불편을 덜기 위해서 코드를 부여했다. 
00001은 더하는 명령이므로 ADD(더하라)로 표시한다. 
00010은 저장하라는 명령이므로 STORE라고 일단 표시한다. 
이렇게 바꾸고 나니 프로그램을 읽기가 훨씬 편해졌다. 
그때부터 좁쌀 같은 0과 1 뭉치의 기계어프로그램 사이를 기어다니는 일은 사라지게 되었다. 
뒤를 이어서 앨릭 클레니는 원자탄 제조에 필요한 프로그램을 구성하면서 에드삭컴퓨터에 필요한 기호식 프로그래밍언어를 개발했다. 
이것은 AUTOCODE라는 이름이 말해주듯이 프로그래밍시에 수학적 기호를 사용할 수 있는 것이었다. 
즉 AUTOCODE는 일종의 프로그램으로서 사용자가 수식과 기호로 작성한 프로그램을 번역하여 그에 합당한 기계어를 생산해 주었다. 
따라서 그때까지 프로그래머들이 행한 기계어로의 변환을 AUTOCODE가 담당해주어 이제는 AUTOCODE의 규약대로 프로그래밍하는 일만 남게 되었다. 
최초로 쓸 만한 프로그래밍언어가 탄생하게 된 것이다. 
그러나 AUTOCODE는 그것이 행한 매우 비밀스런 작업(원자탄 제조) 때문에 세간에 널리 알려지지는 못하였다. 
그리고 번역효율이 그렇게 뛰어나지 못해 아주 숙련된 기계어전문 프로그래머보다 못한 면도 보였다. 
그러나 그것이 알려지지 못한 가장 큰 이유는 연구원들 자신이 가진 마술사의식 때문이었다. 
매혹적인 기술이 세상에 널리 알려져서 자신들의 신비스러운 마술이 보편화되는 데에 대하여 그들은 일정 정도 저항감을 갖고 있었던 것이다. 
고려청자가 제대로 전해지지 못한 것처럼. 
이것이 1952년의 일이었다. 
그보다 앞서 에드삭 어셈블리언어가 고안되어 1950년부터 사용되기 시작하였다. 
이후 1951년에는 여성 수학자인 그레이스 호퍼(Grace Hopper)에 의해서 A-O라는 어셈블리언어 번역기가 만들어졌다. 
그리고 IBM에서도 질세라 새롭게 출하하는 시스템 701 시리즈에 스피드코딩이라는 프로그램 번역기를 덧붙여서 공개하였다. 
2차대전의 상처가 아물기 시작하면서 전쟁중에 이룬 과학적 성과들이 산업계에 영향을 끼치기 시작하였다. 
이에 전자계산기도 비밀스러운 기계라는 외투를 벗고서 다양한 산업적 요구에 부응하게 되었다. 
그런데 산업체에는 전문적으로 프로그래밍만 연구하는 사람이 없었기 때문에 무엇보다도 프로그래밍언어 자체가 쉬워야만 했다. 
프로그래밍언어가 아무리 효율적으로 기계를 통제하고 계산을 빠르게 해낸다 하더라도 그것이 마치 힌두교 경전 정도로 어렵다면 아무 소용이 없기 때문이다. 
비유하자면, 여기 무엇이든지 만들어주는 도깨비방망이가 있다고 하자. 
그런데 그 방망이를 사용하기 위한 주문이 100만 개의 단어로 된 고대 이집트말이라면 어떻게 될 것인가. 
더구나 주문을 한 글자라도 잘못 외울 경우 그 방망이가 우리의 뒤통수를 친다면, 그것은 차라리 평범한 지게작대기보다 못한 도깨비방망이라고 할 수 있을 것이다. 
프로그래밍언어도 이와같이 그 숭고한 목적(?)이야 무엇이든지 지나치게 복잡해서 일상적으로 사용하기 어렵다면 별다른 매력이 없게 된다. 
많은 과학자들은 프로그래밍언어가 더욱 평범해지기 위해서는 보통의 영어문장과 유사해야 한다는 데 의견일치를 보았다. 
그래서 일상용어인 '더하시오(add)' '비교하시오(compare)' 등과 같은 동사가 프로그래밍언어에 직접 사용되기 시작했다. 
호퍼와 그의 동료들은 이러한 개념을 도입하여 1956년부터 연이어 FLOW-MATIC과 MATH-MATIC을 발표했다. 
그리고 호퍼는 자신이 고안한 번역프로그램을 컴파일러(Compiler)라고 불렀다. 
1950년대 중엽을 지나면서부터 프로그래밍언어는 본격적으로 대중들 앞에서 경쟁을 하기 시작했다. 
이제 컴퓨터에게 영어를 가르치기 위한 머나먼 여행이 시작된 것이다. 
그것은 기계에게 일방적으로 편한 기계어에서 인간에게 편한 일상언어로 옮아가는 신호탄이기도 하며, 몇몇 군사기술전문가의 손에서 보호받던 컴퓨터가 하늘에서 땅으로 내려오는 단계이기도 했다. 
이에 인공언어에 대한 체계적이고 과학적인 연구의 필요성이 느껴지기 시작하였다. 
또한 혼란한 프로그래밍언어의 표준화에 대한 요구도 거세게 일어났다. 
본격적인 의미에서, 그리고 상업적으로 프로그래밍언어가 주목받기 시작한 것은 바로 포트란, 코볼, 알골의 탄생에서였다. 
우리가 익히 들어서 잘 알고 있는 포트란(FORTRAN)이라는 언어는 약관 28세의 백커스(J.Backus)라는 젊은 과학자에 의해서 만들어졌다. 
1954년 28세의 백커스는 30여 명의 연구원들을 이끌고 포트란컴파일러 개발에 몰두하기 시작한다. 
백커스는 다른 천재과학자와는 달리 어려서는 불량학생으로 낙인 찍혔고 고등학교시절에도 학교에서 퇴학처분을 당해서 건달패같이 이 학교 저 학교를 옮겨다녔다고 한다. 
그가 다닌 학교의 수를 자신도 기억하지 못할 정도였다니 그 불량끼를(?) 짐작할 만하다. 
군을 마치고 난 백커스는 마땅한 자리가 없어 일단 무선전자기술학교(군에서 운영하는)에 들어갔다. 
그곳에서 백커스의 수학재능을 발견한 선생님의 권유로 컬럼비아대학교의 수학과에 입학했고, 1950년에 수학석사로 졸업을 한다. 
그는 곧바로 IBM에 입사했고 IBM 스피드코딩 번역기의 개발책임을 맡게 된다. 
수학적 재능이 뛰어난 백커스는 어떻게 하면 수학적 대수식을 컴퓨터 프로그래밍에 바로 사용할 수 있을까를 고민했다. 
즉 대수식으로 작성된 프로그램을 바로 기계어로 번역해주는 번역프로그램을 만들고 싶어했던 것이다. 
그래서 그는 가장 흔한 대수식인 값지정문(value assignment)인 )인 X=3과 같은 형식을 기본으로 채택했다. 
또한 행렬(array)구조와 D0루프와 같은 반복계산을 가능케 하는 기능을 첨가하였다. 
D0루프와 같은 반복과정을 실제 여러 코드로 반복해서 사용하지 않고 한 개의 간단한 문장으로 표현한 것은 과학계산에서 혁명적인 일이었다. 
그러나 일 자체도 만만치 않아서 예상한 여섯 달이 지나가도 문제만 더 발생하고, 1년이 지나도 별다른 진전이 보이지 않았다. 
설계 초기에 별로 고려하지 않았던 문제들이 여기저기서 터져나왔는데, 주된 문제는 입출력에 관한 것이었다. 
비록 예상한 기간보다 서너 배의 기간이 더 걸리긴 하였지만 포트란컴파일러는 1957년 드디어 세상에 태어났다. 
최초의 테스팅은 웨스팅하우스 부설 원자력연구소에서 실시되었는데 포트란컴파일러는 미세한 프로그래밍 실수까지 빠짐없이 지적해주었으며 순식간에 생성해내었다. 
또한 이는 IBM 704에도 아무런 문제 없이 작동하였다. 
이를 지켜본 연구원들의 입에서는 탄성이 터져나왔다. 
하늘의 컴퓨터가 땅으로 내려온 순간이었다. 
그리고 컴퓨터역사에 커다란 획이 그어졌다. 
포트란의 위력은 입에서 입으로 전해졌고, 다른 기계를 사용하는 곳에서도 포트란컴파일러 개발에 열을 올렸다. 
이후 포트란의 몇 가지 오류들을 수정하여 포트란Ⅱ, 1958년에 포트란Ⅲ, 그리고 1962년에는 포트란Ⅳ까지 선을 보였다. 
필자도 대학시절 포트란Ⅳ로 프로그래밍을 한 경험이 있다. 
이렇게 갈래가 늘어나는 것은 포트란의 위력이 커졌다는 것을 의미해 한편 좋기도 하지만, 사용자의 입장에서는 그렇게 환영할 만한 일만은 아니었다. 
각 회사마다 조금씩 다른 특성으로 인해서 사용자만 골탕을 먹었기 때문이다. 
1977년 드디어 포트란 언어의 표준화에 관하여 국제회의가 개최되었다. 
여기서 뺄 것은 빼고 더할 것은 더해서 표준화된 새로운 포트란이 탄생하게 되었다. 
이름하여 표준화된 포트란 77. 
프로그래밍언어의 덕택으로 과학자와 엔지니어들은 자신이 사용하는 컴퓨터의 내부설명이나 어셈블리 과정이 없어도 컴퓨터와 통화를 할 수 있게 되었다. 
근래 들어 포트란은 초기의 기세가 꺾였다. 
그러나, 물론 새로 탄생한 여러 언어들, 예를 들면 C. 
PASCAL 등과 같은 범용언어 덕택에 옛날의 영화를 누리지는 못하지만 아직도 열렬한 올드팬들을 가지고 있다. 
사람들은 철 지난 마차바퀴나 맷돌 따위의 골동품을 집안에 전시해두고 지난 시대를 회고하곤 하니까. 
포트란 역시 아스라한 프로그래밍언어 발달사의 향기를 간직한 채 아직도 쓰이고 있다. 
기계공학 발달 초기에 개발된 수많은 공학용패키지들은 거의 예외 없이 지금도 포트란으로 짜여진 채 있다. 
그 엄청난 프로그램들을 좀더 효율적인 현대언어로 바꾸는 작업이 그렇게 어려운 작업은 아닐지라도 위험한 일이 될 수 있다. 
"일단 잘 돌아가면 그대로 두라"라는 컴퓨터계의 격언에 의하면 그것은 매우 위험한 작업이 될 수 있는 것이다. 
제일 좋은 프로그래밍 언어가 무엇이냐라는 질문만큼이나 황당한 것은 없다. 
그것은 마치 제일 좋은 그릇은 어떤 것이냐 하는 질문과 같다. 
담을 내용물이 많다면 커다란 양철 대야가 좋을 것이고 반찬그릇으로 쓴다면 조그맣고 예뻐야 할 것이다. 
또한 찻잔으로 쓰는 그릇, 밥그릇, 간장 항아리, 심지어 고양이 밥그릇에 이르기까지 용도에 따라 요구조건은 다양할 것이다. 
이렇듯 서로 배반적인 요소를 뭉뚱그려 놓은 가장 '좋은'이란 어쩌면 아무것도 아닐 수가 있다. 
앞서 소개한 포트란언어가 프로그래밍계에 던져준 위력은 대단하였다. 
순식간에 온 컴퓨터업계는 포트란의 열기에 휩싸였다. 
그러나 컴퓨터가 과학기술계에서 상업계로 퍼져나감에 따라서 불평이 터져나오기 시작했다. 
지나치게 수학식에 가까워서 거칠다느니, 수학 못하는 사람은 어디 무서워서 쓰겠냐는 둥. 
사실 대부분의 회사에서 컴퓨터를 사용하는 것은 급료나 원가 계산 그리고 다양한 상품정보에 관한 자료정리에 국한된다. 
루트(√)계산이라든지 로그, 하이퍼블릭 사인, 코사인 계산이 일반 회사에서 사용될 리는 만무했다. 
확실히 포트란은 계산도 빠르고 프로그램 작성도 빨랐으나 수많은 상업용 데이터를 다루기에는 부적당했다. 
물론 그 전부터 FLOW-MATIC과 공군에서 개발한 AIMACO라는 사무용언어 전문번역기가 있긴 했지만 아직 유치한 수준에 머물렀고, 범용의 성격이 아니라 몇몇 기계에 한정되어 사용되었다. 
컴퓨터가 군사용에 비해서 사무용으로 압도적으로 많이 사용됨에 따라서 사무용프로그램 개발자들의 불평은 대단했다. 
사무용언어는 기계마다 달랐기 때문에 새로운 기계를 살 때마다 새롭게 배워야만 했기 때문이다. 
심지어 그 당시 국방성에는 약 1000여 개의 각양각색의 컴퓨터가 있었는데, 그것 하나하나에 익숙해지는 것은 인간 인내의 한계를 넘어서는 것이었고, 그 경비만도 수억 달러를 넘었다. 
드디어 1959년 사용자, 컴퓨터 제작자, 학계 대표인사들이 모여, 사무용 프로그래밍언어 개발과 그 표준화에 관한 회의를 펜실베니아대학에서 개최하였다. 
좀더 일상 서류서식에 가까우면서 편리한 언어를 구상하려는 목적이었다. 
포트란은 너무 거칠고 수학적인 냄새가 강하다는 이유로 모두 거부하는 눈치였다. 
그 학계 위원들 중 몇몇(그레이스 호퍼를 대장으로 하는)은 국방부로 가서 컴퓨터언어에 관하여 특별회의를 열자고 제안했다. 
그래서 CODASYL(Conference on Data Systems Language)이라는 회의가 개최되었다. 
참가자 중에는 허니웰, GE(General Electric), 뷰로우, RCA, IBM 등 쟁쟁한 컴퓨터 제작회사들이 끼여 있었다. 
각 회사들은 국방성을 이용하여 자신들의 독점을 관철하기 위해서 처절한 싸움을 벌이기 시작했다. 
자신들이 은밀히 준비해온 상업용 프로그래밍 안이 채택된다면 누구보다도 먼저 시장을 점유하게 되고 이에 따라서 안정적인 독점적 지위를 누리게 되기 때문이었다. 
일단 새로이 만들어진 언어의 이름은 코볼(COBOL: Common Business Oriented Language)이라고 붙여졌다. 
회의가 거듭될수록 각 회사들의 싸움은 치열해졌고 CODASYL의 위원회 안에서도 대립과 반목이 심화되었다. 
그 와중에서 허니웰사는 FACT라는 사무용언어를 개발했다. 
FACT는 포트란에 비해서 보고서 작성 능력이 훨씬 뛰어났으며 대용량의 데이터도 손쉽게 처리할 수 있었다. 
그러나 허니웰사를 제외한 회사들이 연합하여 허니웰사를 집중공격했다. 
부득이 FACT는 침몰했고 코볼로 낙착되었다. 
이후 코볼은 미국 내에 급속히 퍼져나갔고, 끝까지 FACT로 고집을 부리던 허니웰도 결국은 코볼로 돌아서고야 말았다. 
1959년말경에는 여기저기서 코볼컴파일러가 속속 소개되었다. 
그리고 1962년 개정판 코볼이 소개되면서 사무용언어로서 부동의 위치를 가지게 되었다. 
코볼은 방대한 데이터처리능력, 보고서 작성능력 그리고 일상적인 영어 구문형식을 그대로 사용함이 큰 특징이었다. 
즉 포트란 프로그램이 해석을 해야 한다면 코볼은 그냥 읽는 정도의 노력만 들이면 되었다. 
이 둘에 비해서 초기의 기계어 프로그램에는 해독이라는 단어가 어울렸다. 
그래서 프로그램은 해독에서 해석으로 그리고 해석에서 읽기로 발전해나갔다. 
그렇지만 전통적으로 깔끔함을 좋아하거나 더 나아가 신봉하는 수학자들에게 코볼로 작성한 프로그램은 너덜너덜한 삼류소설과 같았다. 
혹자는 살아있는 공룡이라고까지 혹평을 하기도 했다. 
필자 역시 코볼 프로그램의 장황함에 대해서 좋은 감정을 가지고 있지 않다. 
곰곰이 생각해보니 그 이유는 치사하게도 경제적인 것이었던 것 같다. 
필자의 학부시절에는 대부분 펀치카드로 작업을 하였다. 
따라서 한 번의 프로그래밍 작업에 수백 장씩 들어가는 펀치카드를 감당해내는 것이 그렇게 호락호락한 일은 아니었다. 
그런데 포트란으로 작성하면 100장 안팎으로 완성될 것도 코볼로 작성하면 200장이 족히 넘었다. 
그러니 그 많은 카드를 사다댈 일 하며 들고 다닐 때의 번거로움 등으로 인해서 점점 코볼과 인연이 멀어졌다. 
두툼한 코볼 프로그램의 카드뭉치를 보면 어쩐지 둔중한 느낌이 들어서 싫었다. 
그러나 회사에서의 코볼의 인기는 점점 더해갔다. 
2차대전 후 유럽과 미국 ― 보통 구대륙과 신대륙으로도 불리는 ―의 은근한 대결이 진행되어왔다. 
2차대전은 유럽의 많은 과학자들을 미국으로 실어다 날랐으며 덕택에 미국은 과학의 부흥기를 절정으로 맞이하였다. 
유럽의 과학자들은 자신들이 중세 이후로 줄곧 지켜온 자존심이 무참히 손상되는 것을 지켜 보고만 있을 수 없었다. 
"무언가 보여주어야 할 텐데……" 유럽의 컴퓨터과학자들의 심정은 초조해지기 시작했고, 포트란의 성공소식은 위기감마저 느끼게 했다. 
유럽도 질세라 1958년 스위스 쮜리히 공대에서 일주일간의 회의를 열었다. 
아인쉬타인의 영예를 유럽에서 되찾겠다는 뜻이었는지는 몰라도(쮜리히 공대는 아인쉬타인이 입학한 대학이었다). 
회의가 끝나면서 드디어 알골 58(ALGOL 58)로 알려진 새로운 언어가 탄생하였다. 
58은 1958년도에 탄생한 언어라는 뜻이다. 
사실상 회의는 매우 위태로운 고비를 몇 번씩이나 넘겼다. 
미국인들은 좀더 실용적인 관점에서 접근하였고 유럽대표들은 좀더 수리적이고 우아한 설계에 중점을 두었다. 
더러는 소수점을 마침표로 쓸 것인가 말 것인가 같은 문제로 한바탕 소동이 일어나기도 했다. 
결국 알골은 포트란의 영향으로 수학적으로 잘 기술하기 위한 방향으로 나아갔다. 
따라서 입출력과 같이 부가적이고 사용자 편의적인 기능들은 많이 무시되었다. 
하여간 수많은 설전과 타협 끝에 새로운 언어가 탄생하게 된 것이다. 
알골은 자기내부적으로 참으로 완결도 높게 구성된 언어였다. 
코볼을 소설에 비유하고 포트란을 잘 다듬어진 수필에 비유한다면 알골은 운율이 단단히 들어맞는 아름다운 한편의 소네트(sonnet:서양의 14행시)와 같다고 할 것이다. 
알골은 수학자들의 극찬을 받았다. 
그러나 세상에 어디 수학자들뿐인가. 
실제 사용자들은 알골이 무심하게 넘겨버린 사용자 편의기능에 대해서 불만을 터뜨렸다. 
시를 좋아하는 사람들이 몽상가적 기질이 있듯이 알골 찬양자들은 몽상가 같다고 비난하는 이야기도 여기저기서 터져나왔다. 
포트란의 후예인 알골을 백커스가 좋아하는 것은 어쩌면 당연한 일인지도 모른다. 
백커스는 알골을 IBM 사용자단체인 SHARE에 소개했으나 갈수록 인기는 식어갔다. 
사람들은 우선 실용적인 것을 좋아했고 우아한 것은 둘째문제였다. 
그리고 한번 포트란에 발을 빠트린 사람들에게 알골은 번거로운 존재일 뿐이었다. 
인간이 언어에 대해서 얼마나 보수적인 존재인가를 잘 보여준 사건이었다. 
어떤 학문이든지 그 탄생 초기에는 항상 외로운 선각자가 있게 마련이다. 
알골도 일반사용자들에게는 차디찬 냉대를 받았지만 프로그래밍언어 구문법상에는 역사적인 전기를 만들어냈다. 
바로 백커스와 네덜란드의 천문학자인 피터 나우어(Peter Naur), 두 사람의 공동연구로 탄생한 백커스 나우어 형식(BNF)이라는 형식문법이 알골을 탄생시켰기 때문이다. 
형식문법의 등장은 컴퓨터과학의 토대를 든든히 마련하여 컴퓨터 프로그래밍언어를 학문적 수준으로 승화시켰다. 
형식문법의 개발로 인해서 프로그래밍언어에 대한 연구는 장인적 기술에서 체계적인 과학으로 진보하게 된 것이다. 
유럽에서 알골의 지위는 확고부동했다. 
영향력 있는 유럽의 국가들은 알골에 대해서 아낌없는 지원을 해주었다. 
유럽의 분위기는 알골을 하나의 국제공통어로 만들자는 것이었다. 
그래서 알골은 컴퓨터언어를 연구하는 사람에게는 마치 성경과도 같았다. 
성공하지는 못했지만 알골이 후대의 프로그래밍언어에 남겨준 유산은 아주 값진 것이었다. 
1963년에 IBM은 시스템 360이라는 야심적인 계획을 추진하고 있었다. 
그 프로젝트의 규모는 원자탄개발 프로젝트인 맨해튼 프로젝트보다 무려 2배나 많은 연구비를 투여하는 거대 규모였다. 
최종 목적은 과학용, 상업용 등 여러 범용컴퓨터를 하나로 묶어 범용으로 설계하고, 또한 프로그램의 호환성을 최대한으로 보장하여 사용자의 효율을 극대화시킨다는 것이었다. 
따라서 새로운 시스템에 알맞은 새로운 언어를 개발해야할 필요를 느꼈다. 
포트란보다는 더 일반적이고, 코볼보다는 더 수리적이며, 알골보다는 더 실용적인 그 어떤 것을 만들어내야만 했다. 
그 팀장은 조지 래딘이 맡았다. 
팀은 포트란과 코볼 지지자들로 온통 소란스러웠다. 
그래서 결론에 도달하기까지는 너무나도 많은 회의와 논쟁이 있었다. 
1964년 4월에 IBM의 모델 360 시리즈가 세상에 공개되었다. 
그와 더불어 새로운 언어인 PL/I이 소개되었다. 
"포트란의 속도에 코볼의 풍부함!"을 
모토로, 또 하나의 고급 프로그래밍언어가 탄생한 것이다. 
덕택에 덩치는 커질 대로 커져 혹평을 하는 사람들도 있었다. 
"없는 기능이 하나도 없으며 제대로 되는 기능도 하나 없다." 
그 사용자설명서의 부피도 엄청났다. 
약 200페이지에 걸쳐서 설명이 장황하게 나열되어 있었다. 
부엌칼이 연필깎이칼을 겸하지 못하고 연필깎이칼이 면도날을 대신하지 못하듯이 PL/I은 지나치게 다목적이었기 때문에 그 어느 하나도 시원하지 않았다. 
IBM의 초기 기대와는 달리 PL/I에 대한 세인들의 열기는 점점 식어갔다. 
포트란과 코볼과 알골의 장점만 뭉쳐놓았으나 드러나는 것은 각각의 단점뿐이었기 때문이다. 
무엇보다도 그 생명을 단축시킨 것은 그 엄청난 덩치였다. 
이후 전개될 마이크로컴퓨터 시대에서 PL/I은 멸종된 공룡의 운명으로 전락하게 되었다. 
결국 지나치게 상업성을 내세운 초기의 고급 프로그래밍언어는 후대의 프로그래밍언어 개발에 뿌리깊은 부정적 영향을 끼쳤다. 
어린 시절 잘못 배운 피아노 연주법이 평생 따라다니면서 새롭고 창의적인 연주법 습득에 방해가 되듯이 PL/I은 더 참신한 언어 개발과 컴퓨터 자체를 폭넓게 이해하는 것을 방해했다 ― 이것은 백커스의 이야기이다. 
필자 역시 대학 2학년과 3학년 시절에 두터운 PL/I 교본을 열심히 뒤져가며 프로그래밍한 기억이 있다. 
그런대로 쓸 수가 있었으나 지금은 구문법도 잘 기억나지 않는다. 
1960년대말이 되면서 프로그래밍언어를 하나 만들어내는 것이 컴퓨터학계에서는 강아지집 만드는 정도의 일이 되어버렸다. 
하루저녁에도 두어 개씩의 새로운 언어가 탄생하고 사라져갔다. 
범용을 지향하고 나타난 PL/I의 쇠퇴는 지나친 범용의 함정을 여러 연구자들에게 알려준 계기가 되었다. 
새로운 인공언어를 만들어내는 것은 더 이상 별스러운 작업이 아니었다. 
1970년초만 해도 세상에 알려진 언어는 무려 150여 가지나 되었다. 
물론 모두가 완전히 다른 것은 아니었다. 
크게 보면 포트란류, 알골류, 코볼류 그리고 기타 특수목적용언어였다. 
그중에는 리스프(LISP)라는 참신한 언어도 포함되어 있었다. 
1950년부터 연구자들 마음에 조금씩 싹트기 시작한 인공지능에 대한 호기심은 그에 알맞은 언어개발을 요청하게 되었는데, 맨 처음으로 개발된 것이 정보처리언어라는 이름의 약자인 IPL(Information Processing Language)이었다. 
그 근간은 리스트라는 특수한 자료형태를 손쉽게 처리하는 메커니즘이다. 
IPL을 기초로 해서 존 매카시(John McCarthy)라는 한 과학자가 리스프라는 색다른 언어를 고안해냈다. 
매카시는 다양한 관심을 가진 사람으로서 한때는 사회주의운동에 심취하여 좌익정치단체에도 깊이 참여하였다. 
리스프는 매우 간단한 구조를 가지고 있었다. 
즉 변수와 상수, 괄호 그리고 함수기호, 이 세 가지로만 구성되어 있었다. 
알골에 이어서 또 하나 기막히게 아름다운 인공언어가 탄생하게 된 것이다. 
지금도 리스프는 이후에 프랑스 학자 알랭 꼴메호우가 만든 프롤로그(Prolog)와 더불어 인공지능을 받치는 두 개의 기둥 역할을 하고 있다. 
이로부터 리스프류라는 새로운 프로그래밍언어의 한 군이 탄생하게 된다. 
한 가지 재미있는 것은 프롤로그 역시 리스프에 선제기습을 당한 유럽의 반발로 태어났다는 것이다. 
요즘도 리스프냐 프롤로그냐는 논쟁이 흔히 인공지능계에서 벌어진다. 
물론 과학적인 근거에 의존한 논쟁이라기보다는 서로 자기쪽 진영의 우월함을 단순히 과시하기 위한 행동으로 보인다. 
필자의 학위공부 시절 리스프냐 프롤로그냐로 술집에서 격렬한 논쟁이 일어났던 것을 기억한다. 
인공지능이 전공이 아닌 필자로선 멀거니 지켜보고 있을 수밖에 없었지만, 언어가 깊어지면 이데올로기가 되지 않는가 하는 의구심도 들었다. 
여하튼 리스프나 프롤로그나 모두 참으로 매혹적인 언어임에는 틀림없다. 
최근 일본에서 제 5 세대 컴퓨터를 제안하면서 프롤로그를 기본언어로 채택한 것도 사뭇 흥미롭다. 
나름대로 이유가 있겠지만 한편으로는 미국의 리스프와 의도적으로 대결하기 위한 한 책략(?)이 아닐까 하는 생각도 든다. 
우리는 흔히 과학이라면 정치와 전혀 무관하게 실험실에서 시험관이나 흔드는 것 정도로 생각한다. 
그러나 과학사를 살펴보면 그 역시 정치적인 혹은 개인적인 야욕으로 비과학적인 결정을 할 때가 있음을 알 수 있다. 
다시 말하면 과학을 하는 과정은 과학적이라 할지라도 그 동기는 충분히 비과학적일 수가 있다는 것이다. 
프롤로그 언어의 기본취지는 계산과정 자체를 사용자에게서 독립시켜주는 것이다. 
즉 사용자는 문제가 어떤 것이라고 프롤로그 문법에 맞도록 쓰기만 하면 프롤로그가 알아서 계산을 해준다. 
일견 꿈과 같은 일이다. 
그러나 문제는 프롤로그 문법에 맞도록 쓰기가 여간 어렵지 않다는 것이다. 
이미 그 문제 자체의 논리적 구성이 잘 알려져 있는 언어라면 쉽게 프롤로그로 프로그래밍된다. 
그러나 그렇지 않은 너저분한 문제를 날씬한 프롤로그로 프로그래밍하기란 덩치 큰 곰 한 마리를 좁다란 꽃병 안에 밀어넣는 것만큼이나 어렵다. 
"곰을 꽃병에!" 
이렇게 문제풀이의 절차를 기술하지 않는 언어를 비절차적 언어(non-procedural language)라 부르거나 또는 선언적 언어(declarative language)라고 부른다. 
이에 비해서 리스프는 절차적 언어이다. 
이외에도 APL(A Programming Language)이라는 언어가 있다. 
APL은 명료성이 최대한으로 살려진 언어로서 두어 페이지의 프로그램도 APL로 작성하면 몇 줄로 해결된다. 
이것을 설계한 사람은 자칭 수학의 이단자인 케니스 아이버슨이었다. 
APL은 많은 수치계산이나 통계량계산에서는 단연코 왕자의 위치를 지켰다. 
그러나 지나치게 암호 같아서 비전문가가 쓰기에는 무리가 있었다. 
1970년대에 들어서면서 프로그래밍언어는 일대 전환기를 맞게 된다. 
퇴화될 언어들은 퇴화되어 사라져버리고 확실한 강자만 살아남게 되었다. 
다시금 슬그머니 범용언어에 대한 기대가 일어났다. 
PL/I의 쓰린 경험을 토대로 하여 두 개의 흑기사가 바람을 가르며 나타났으니 C와 PASCAL이었다. 
C는 어떻게 보면 사생아와 같이 태어났다. 
C언어의 아버지는 케임브리지에서 만들어진 BCPL이었으며 그 할아버지는 ALGOL 60이었다. 
ALGOL의 첫 글자가 A, BCPL의 그것이 B였으니 그 다음은 당연히 C가 되어야 했나보다. 
C는 세상에 공개하기 위해서 만든 것이 아니라, 벨연구소 내에서 비공식적으로 사용키 위해서 장난삼아(?) 만든 것으로 그 개발자는 수학박사인 리치와 토슨이었다. 
둘은 벨연구소에서 사용하기 위한 새로운 시분할 운영체제인 UNIX를 설계하려는 계획을 가지고 있었는데, 무엇을 모체로 할까 하다가 소규모 UNIX 체제에 알맞은 프로그래밍언어를 새로 디자인해서 이용하는 편이 좋겠다는 생각을 하게 되었다. 
어셈블리보다는 조금 더 고급(high-level)이면서 그 정도의 속도를 가지는 언어를 그들은 원했다. 
그렇게 만들어진 C는 UNIX를 구성하는 모든 프로그램의 90%나 차지한다. 
벨연구소가 만든 UNIX가 연구소나 대학 내에서 사용하기 안성맞춤이라는 소문이 꼬리를 물고 퍼져나가자 결국 UNIX는 비영리단체에 아주 헐값으로 팔려갔다. 
더불어 C도 널리널리 퍼졌다. 
모양새는 다소 사납지만 C는 고급 프로그래밍언어의 특징과 어셈블리 언어의 특징인 좀더 세세한 정도까지 하드웨어를 제어할 수 있는 특성으로 인해 큰 호평을 받는 상품이 되었다. 
덩치는 작지만 쓰기에 따라서 얼마든지 날카롭게 또는 육중하게 쓸 수 있는 언어인 이 C는 한번 사용해본 사람이라면 충분히 매혹당할 만한 언어였다. 
더구나 UNIX가 표준운영체제로 굳어져가는 추세에서 C를 모른다는 것은 돌도끼를 들고서 현대전에 참가하는 꼴이었다. 
한편 대륙 한쪽에서는 알골에 대한 논쟁이 어느 정도 가닥을 잡아감에 따라서 새로운 파스칼이라는 언어가 스위스 연방공과대학 교수인 비르트에 의해서 제창되었다. 
파스칼은 알골보다는 사용자 편의성에 중점을 두면서도 구문법을 좀더 엄격히 하여 오류를 번역차원에서 발견하게끔 했다. 
이러한 비르트의 제안은 대성공을 거두었다. 
또 그 시대부터 불기 시작한 구조적 프로그래밍(structured programming) 기법은 비르트가 제안한 파스칼의 구조를 크게 환영하였다. 
구조적 프로그래밍이란 기본적으로 프로그램의 구조를 몇 가지 단순한 구조들의 조합으로 구성하자는 것이다. 
즉 되도록이면 조건 없는 분기문(Go To)을 철저히 억제함으로써 한눈에 전체 구성을 이해하려는 의도였다. 
그전까지만 해도 프로그램의 복잡도는 별로 문제가 되지 않았다. 
몇몇 천재적인 프로그래머들의 마술과도 같은 능력으로 많은 프로그램이 작성되었기 때문이다. 
그러나 갈수록 프로그램의 덩치가 커지고 이에 따라서 아무리 뛰어난 프로그래머라도 혼자서 모든 것을 처리하기에는 역부족인 상태가 되었다. 
엄청난 크기(수십만 라인)의 프로그램을 나누어서 프로그래밍할 때 그것을 어떻게 관리하는가 하는 것도 커다란 문제가 되었다. 
프로그램은 눈덩이같이 불어난다. 
오류가 발생하면 그것을 수정하기 위해서 몇 개의 프로그램이 또 추가되고, 추가된 프로그램이 고장나면 또 추가된다. 
프로그램은 어느덧 너덜너덜 걸레조각이 된다. 
이제 남아 있는 결정은 이것뿐이다. 
다시 한 번 고쳐서 걸레의 운명을 면할 것인가, 아니면 과감히 버리고 새로운 작업을 처음부터 다시 시작할 것인가? 
버리자니 아깝고, 고쳐 쓰자니 지옥문이 보이는 듯하고. 
이 모든 원인은 프로그래밍 자체를 과학이라기보다 기술로 인식했기 때문이다. 
이에 네덜란드의 다익스트라는 과학으로서의 프로그래밍을 제창하고 나왔다. 
그는 간단한 논문에서 "Go To 문은 프로그래밍에 유해하다"라고 주장했다. 
이 논문은 이후 Go To 문을 둘러싼 격렬한 논쟁을 불러일으켰다. 
이론적으로는 Go To 없이 모든 프로그램은 IF THEN ELSE, Do 루프, WHILE 루프로 작성될 수 있다는 수학적 결과가 발표되었다. 
심지어는 프로그래밍언어 자체에 Go To 문장을 없앤 BLISS라는 언어를 탄생시키기도 하였다. 
혹자는 다익스트라의 글은 워낙 어려워서 과학시(scientific poem)라고 불러야 한다고도 했다. 
여하튼 소프트웨어의 개발에 커다란 위기가 닥쳐왔다. 
소프트웨어의 완성 예상기일은 아무런 의미를 주지 못할 정도로 모든 작업진도는 한없이 늦어졌다. 
게다가 완성된 뒤에도 수많은 오류가 때와 장소를 가리지 않고 기어나왔다. 
무언가 획기적인 조치가 필요했다. 
소프트웨어 위기에 가장 긴장한 곳은 바로 미 국방성이었다. 
엉뚱하게 완성된 프로그램으로 인해서 원자폭탄을 장착한 미사일이 되돌아와서 터지기라도 한다면 그야말로 만화영화에서나 볼 만한 끔찍한 일이 벌어지게 될 것이기 때문이었다. 
국방성에서는 드디어 NATO의 세 동맹국인 프랑스, 영국, 서독의 대표로 위원회를 구성하여 군사용으로 쓸 만한 언어를 찾아보라는 임무를 맡겼다. 
위원회는 여러 회사에 공개모집을 했는데, 단 기본적인 토대는 PL/I, 알골, 파스칼, 이 세 가지 언어 중에서 한 가지를 근간으로 해야 한다는 단서를 붙였다. 
1단계로 인터메트릭, 스탠포드연구소, 허니웰 그리고 소프테크 등 네 군데의 회사가 선정되었다. 
그런데 공교롭게도 그들은 모두 파스칼 언어를 근간으로 삼았다. 
인터메트릭과 허니웰사가 결승까지 올라왔다. 
그러나 최종적으로 승리의 여신의 옷자락을 붙잡은 것은 허니웰이었다. 
그리고 그 언어는 역사상 최초의 프로그래머라고 여겨지는 시인 바이런의 외동딸인 아가스터 에이다의 이름을 따서 Ama라고 명명되었다. 
Ama는 무엇보다도 유지.보수가 쉽도록 구성되어 있으며 설계.검증.수정 과정을 체계적으로 할 수 있게 만들어졌다. 
그리고 되도록 기능별로 모듈식구조를 유지하게 했다. 
또 엄격한 구문법을 적용하여 컴파일 초기단계부터 혐의가 있는 부분을 모조리 발견해서 기초를 다지자는 것이다. 
시간이 지남에 따라 여러 연구소는 국방성이 채택한 Ama 규약에 맞는 컴파일러 개발에 몰두했다. 
그래서 1980년 중반부터 국방성의 엄격한 테스트를 거친 Ama 컴파일러가 속속 선보이기 시작했다. 
1983년 미 국방성은 드디어 앞으로 국방부로 납품하는 모든 소프트웨어는 Ama로 작성해야 한다는 규약을 공표했다. 
Ama의 등장으로 소프트웨어 위기는 일시적으로 가라앉을 기미를 보였다. 
한편 열렬한 리스프 지지자들의 반발이 거세게 일어났다. 
특히 인공지능에 관련된 리스프 프로그램을 일시에 Ama로 바꾼다는 것은 지구를 떠나 명왕성에서 살라는 명령이나 다름없었다. 
오랜 시간 동안 리스프가 쌓아놓은 업적이 하루아침에 물거품이 될 찰나였다. 
국방성에서도 리스프 프로그램의 매력과 업적을 잃고 싶지는 않았다. 
그러나 그렇다고 시중을 온통 떠도는 리스프류의 떼거리를 국방프로그램으로 들이고 싶지도 않았다. 
그렇다면 표준을 만들어야 했다. 
이렇게 해서 드디어 리스프의 표준이 만들어졌다. 
이름하여 공통리스프(Common LISP)가 탄생한 것이다. 
튜링의 엉터리 시에서부터 시작된 프로그래밍언어는 Ama와 공통리스프로 일단 마무리되었다. 
혹자는 덩치 큰 Ama가 PL/I의 전철을 밟지 않을까 걱정을 하기도 한다. 
두고 지켜볼 일이다. 
하여간 알골의 희생이 결국은 사라지지 않고 Ama로 부활하게 된 것이다. 
앞장의 그림은 프로그래밍언어의 개발 초기, 프로그래밍언어들이 우후죽순처럼 쏟아져나온 것을 비유해서 그린 새멋(Sammet)의 그림이다. 
바벨탑이 언어의 혼란으로 무너졌듯이 프로그래밍언어도 그 혼란으로 위태롭다는 것을 알려주는 재미있는 그림이다. 
그 탑을 이룬 대부분의 언어는 이젠 사라져버렸다. 
지능이란 무엇인가라는 물음은 인간이란 결국 무엇인가라는 물음만큼이나 다양한 대답을 내포하는 것이다. 
어떤 사람은 그 대답 자체가 불가능하다고 말하기도 하고 더러는 자기 입장에서 말하기도 한다. 
사람들은 흔히 지능이 높다 또는 낮다는 것을 IQ지수를 가지고 말하곤 하는데 그것은 잘못된 것이다. 
IQ지수 개념을 개발한 애초 목적은 누가 더 뛰어난가를 측정하기 위한 것이 아니라 학습부진 아동을 가려내기 위한 것이었기 때문이다. 
사전을 찾아보면 지능이란 "논리적으로 생각하고 이해할 수 있는 능력"으로 정의되어 있다. 
그렇다면 논리적으로 생각한다는 것은 또 무엇을 의미하는지 살펴보자. 
1962년 뉴욕에서 서양장기 미국챔피언과 컴퓨터 프로그램의 대결이 벌어졌다. 
이것은 그 자체만으로도 충분히 사람들의 관심을 끌 만한 일이었다. 
결과는 컴퓨터 프로그램의 승리로 끝났다. 
챔피언인 로버트 닐리는 8년 만에 챔피언 자리를 컴퓨터 프로그램에게 양보해야만 했다. 
물론 컴퓨터에서 집게팔이 나와서 장기판 위의 말들을 직접 움직인 것은 아니고 몇 명의 보조 진행자가 상대방 움직임을 입력하고 그 결과대로 컴퓨터 쪽의 말을 움직였다. 
그런데 한가지 놀라운 사실은 그 프로그램을 만든 아서 새무얼(Arthur Samuel) 박사는 결코 서양장기의 국제급 고수가 아니라는 사실이다. 
우리는 이런 사실을 어떻게 생각해야 할 것인가? 
기계에게 상당한 정도의 지능이 있다고 보아야 할 것인가, 아니면 단순히 빠르게 셈하는 능력이 있다고 보아야 할 것인가? 
일반적으로 전산학 중에서도 인공지능을 전문적으로 연구하는 사람들은 인간이 가지는 지적 능력의 대부분을 기계가 언젠가는 모두 흉내내거나 또는 그보다 뛰어난 정도로 일을 해낼 것이라고 예견하고 있다. 
그중에서도 최전선에서 연구하고 있는 마빈 민스키(Marbin Minsky) 교수의 이야기를 들어보자. 
그는 "우리는 지능을 중요하게 생각하고 있긴 하지만 이해하기가 불가능한 그 어떤 신비로운 것으로 생각하지는 않는다. 
… 지능의 핵심을 알지 못하는 우리의 무능으로 인하여 컴퓨터는 사고할 수 없다고 결론을 내려서는 안 될 것이다"라고 말한다. 
인공지능을 옹호하는 입장에 서 있는 사람들은 컴퓨터 내부에서 어떤 방식으로 작동을 하든지간에, 밖으로 드러나는 반응이 인간과 유사하게 나타날 때 그 기계는 어느 정도의 의식이 있는 상태라고 말한다. 
즉 앞의 체스경기의 예에서 컴퓨터가 다음의 가능한 20수 앞을 모두 다 계산한다손 치더라도, 최종의 한 수가 사람이 보기에 썩 훌륭한 수라고 한다면 그 컴퓨터가 인간 정도의 지능을 가진다고 말해야 한다는 것이다. 
이런 예로서 튜링테스트라는 유명한 실험이 있다. 
튜링테스트는 다음과 같이 기계에게 지능이 있는지의 여부를 판정하는 데 사용된다. 
커튼으로 나누어진 방에 각각 한 대씩의 단말기를 준비한다. 
그리고 한쪽 방에 있는 사람이 다른 쪽의 단말기로 어떤 메시지를 보낸다. 
그 메시지를 받은 쪽은 답을 보내는 것이 사람인지 컴퓨터인지 상대편이 모르게 단말기를 통해서 답을 보낸다. 
이때 답을 받은 사람은 그 답이 인간이 보낸 것인지 아니면 컴퓨터가 보낸 것인지를 잘 알 수가 없게 되고, 실제 응답을 보낸 것이 사람이 아니고 컴퓨터일 경우에 그 컴퓨터는 사람과 같은 의식을 가진다는 것이다. 
최근 들어서 튜링의 테스트도 많은 비판을 받고 있다. 
즉 다음과 같은 이유들 때문에 튜링의 테스트만으로는 기계에게 의식이 있다는 사실을 증명하는 데 불충분하다는 것이다. 
먼저 건너편 방에서 인간이 대답하였음에도 불구하고 컴퓨터가 대답하는 듯한 느낌을 A가 가질 경우 그 대답을 한 인간이 튜링테스트의 검정원리에 의해서 기계로 간주되는 것은 아니기 때문이다. 
둘째, 여러 번의 시도에서 반 정도만 컴퓨터를 인간으로 착각하였다고 할 때, 그때 답한 컴퓨터의 상태를 어떻게 보아야 하는가의 문제가 있다. 
셋째로 이와 유사하게 장막 뒤의 방에서 나온 답변에 대한 반응이 사람에 따라 제각각 다를 경우, 즉 어떤 사람은 눈치 빠르게 컴퓨터의 답으로 인식하고 다른 어떤 사람들은 사람이 답하는 것으로 이해할 때 우리는 어떻게 판정해야 하는가의 문제이다. 
이처럼 컴퓨터가 의식을 가지는지의 여부를 결정짓는 실험에서 사람들마다 제각기 다른 답을 했을 때, 그 실험이 과연 과학적이고 객관적인 사실을 보여주는지 의심하지 않을 수 없다. 
이 경우는 오히려 과학이라기보다는 관념적 체계에 가까울 것이다. 
인간에게 주어진 능력 가운데서 가장 독특하고 뛰어난 능력은 지능일 것이다. 
즉 여러 가지 지식을 정리하여 새롭고 창조적인 지식으로 만들어내는 것이다. 
꿀벌이나 개미 등에서 보이는 합리적인 행동은 살아가면서 주위환경으로부터 배워나가는 것이 아니라 선천적으로 신경세포에 프로그램된 것이기 때문에 지능이 아니라고 말하는 사람도 있다. 
그러나 필자의 생각으로는 그런 미미한 생물에게도 아주 적은 정도의 지능이 있으며, 그 지능은 당대에 걸쳐서 한 개체에 한정되는 것이 아니라 수십 세대에 걸쳐서 발달해 나가는 것이 아닌가 한다. 
인간들은 원시시대부터 자신들의 이성적 능력을 넘어서는 것에 대해서는 동경과 두려움을 동시에 가지면서 살아왔다. 
그러한 원시시대의 자연종교와 비슷한 사태가 현대에도 벌어지고 있는 듯하다. 
즉 기계가 인간의 고유능력인 지능과 의식, 창조의 영역에까지 침투해서 인간을 밀어내는 것이 아닌가 하는 두려움이 바로 그것이다. 
1950년대에 '인공지능'이라는 새로운 말이 생겨남에 따라서 수학자, 철학자, 전산학자들 간에 치열한 논쟁이 벌어졌다. 
그러나 필자가 보기에는 지능의 개념을 어떻게 규정할 것인가 하는 문제를 둘러싼 논쟁이 그 주류였다. 
즉 좁은 의미의 정의인가, 아니면 넓은 의미의 정의인가의 문제였던 것이다. 
컴퓨터에 의한 인공지능이 인간의 선천적인 지능을 능가할 수 없다고 강조하는 사람들은 지능을 (1) 경험에서 배우고 지식을 늘려가는 능력 (2) 새로운 상황에 새롭게 그리고 효율적이고 경제적으로 대처하는 능력으로 규정하고 있다. 
이런 정도의 기준에서 본다면 아직까지 컴퓨터는 지능을 갖추지 못하고 있거나 극히 낮은 수준에 머물러 있다. 
그러면 왜 컴퓨터는 인간과 같은 지능적 수준에 쉽게 도달하지 못하는가? 
그것은 프로그래밍 기법에 한계가 있기 때문이다. 
현대에 쓰이는 모든 프로그램은 대부분 프로그램과 데이터의 구분이 명확하다. 
프로그램은 어떤 작업을 하라는 지시어들의 집합이고, 데이터는 그 지시어들의 목적격에 해당한다. 
따라서 컴퓨터는 프로그래머가 지시해준 일만을 작은 스텝에 따라서 수행한다. 
그러나 인간은 주위환경에 따라 자신이 취해야 될 규칙조차 수정한다. 
그리고 그렇게 바깥 규칙에 의해서 주위환경과 상호작용을 하게 된다. 
물론 컴퓨터 내에서도 프로그램과 데이터의 영역구분을 없애서 프로그램이 자신의 프로그램 자체를 수정해서 다시 수행하게끔 할 수는 있지만, 그렇게 할 경우 프로그램 에러(error)가 많이 발생하게 되며 또한 그 계산결과를 전혀 예측할 수 없게 되므로 여태까지 사용해온 많은 프로그램들이 유용성을 잃게 된다. 
사람이 가지는 특별한 능력 중에서 '감'이라고 하는 것이 있다. 
바둑이나 장기를 둘 때 우리는 상대방의 동작(한 수를 놓든지 말을 움직였을 때)에 내가 취할 수 있는 모든 경우를 다 고려하는 것은 아니다. 
장기의 예에서 보자. 
판 위에 살아있는 우군측 말이 10개 정도이고 한 개의 말이 나아갈 수 있는 방향이 세 군데 정도라면, 고려해야 할 모든 경우의 수는 30여 가지가 된다. 
만일 두 수 앞을 내다본다면 30×30, 다섯 수 정도 앞을 본다면 무려 305가지를 살펴야 하니 그 수는 참으로 엄청나다. 
그러나 사람은 어떻게 하는가? 고수일수록 가장 중요한 몇 수만을 살펴본다. 
바둑에서는 제 1 감이라는 것이 있는데, 이것은 상대방이 한 수를 두었을 때 제일 처음으로 좋다고 느껴지는 자리를 말한다. 
전문기사들에 의하면 그러한 제 1 감이 뛰어나야만 고수가 된다고 한다. 
이상과 같이 사람은 모든 가능한 수 중에서 필요한 몇 수만을 집중적으로 살펴본다. 
그렇기 때문에 10여 분 사이에 십여 수를 내다볼 수가 있으며 과거에 많이 두어본 형태나 실전상황으로부터도 많은 정보를 얻는다. 
그러나 컴퓨터는 이런 제 1 감과 같은 것을 흉내낼 수 없다, 적어도 아직까지는. 
어떤 사람들은 그러한 제 1 감과 같은 능력을 직관이나 불교에서 말하는 선의 상태(즉 해답에 도달하는 과정이 논리적 분석이나 추론에 의해서가 아니라 단숨에 달려가는 것)라고 설명하며, 이것은 결코 컴퓨터가 흉내낼 수 없다고 말한다. 
그러나 컴퓨터에서도 그런 방식을 흉내내어 휴리스틱(heuristic) 방식을 사용하여 이전의 자료처리에서 얻은 경험이나 이미 답이 될 수 없다고 생각되는 경우는 처음부터 제거해 버리는 방법, 또 가장 답이 될 듯이 보이는 경우를 먼저 살펴보는 방법 등으로 인간의 능력에 필적하려고 한다. 
이런 기술들이 인공지능에서 주로 연구되는 주제이다. 
인간과 컴퓨터의 능력 사이에 또 하나의 중요한 경계를 이루는 것으로 수학적 사실의 증명이 있다. 
그러나 이 역시 정리(theorem)를 증명하는 기계를 만들어보임으로써 인간의 영역에 또 한 번 컴퓨터를 침범시키고자 하였다. 
수학적 증명과정에서 흔히 보이듯이 절묘하거나 뛰어난 증명방법은 정리가 말해주는 사실만큼이나 가치를 지니게 된다. 
많은 사람들이 이런 증명과정이야말로 인간만이 할 수 있는 것이라고 믿어왔고 그래서 인공지능을 옹호하는 사람들을 당혹하게 하였다. 
그러나 뉴웰(Newell)과 사이먼(Simon) 교수가 고안한 LT프로그램이 그러한 인간의 오만에 보기좋게 찬물을 끼얹었다. 
그들이 선택한 타겟은 러셀과 화이트 헤드가 같이 쓴 {수학원리}의 정리였다. 
그 책의 제 2 장에 있는 52개의 정리를 증명하기 위해서 5개의 공리와 3개의 추론방법을 기억장치에 수록해서 작동시켰다. 
그리고 중간과정에 증명된 정리들도 다음 정리를 증명하는 데에 사용하기 위해서 기억장치에 저장해두었다. 
사이먼박사는 자신이 고안한 방법으로 몇 가지 정리를 컴퓨터로 훌륭하게 증명해내었다. 
이런 방법에 기초를 두고서 중국인 왕(Wang)과 길모어(Gilmore)는 10분 안에 수학원리에서 제시한 논리적인 정리 350개 모두를 증명해내는 데 성공하였다. 
물론 그 증명방법은 증명이 될 수 있는 모든 가능한 경우에 공리를 대입해 점차로 확대해나가는 방식이었지만 여하튼 그 결과는 놀라운 것이었다. 
최근 들어 나온 더 놀라운 성과는 현대 수학에서 아주 중요한 부분을 차지하는 군론(group theory) 분야에서 사람이 아직 찾아내지 못한 참신한 정리 한 개가 컴퓨터에 의해서 만들어졌다는 연구보고이다. 
컴퓨터가 세계챔피언급의 체스선수를 이기는 일은 이제 흔한 일이 되어버렸다. 
그리고 컴퓨터끼리의 체스 대결도 해마다 공개적으로 열린다. 
1990년 11월에 제21회 북미 컴퓨터체스 시합이 미국전산학회(ACM) 주관으로 뉴욕 힐튼호텔에서 열렸다. 
10개 팀이 참가하여 리그전을 벌인 결과 MEPHISTO와 DEEP THOUGHT/88이 공동 1위를 차지했다. 
그리고 공동 3, 4위는 HITECH와 M CHESS에게 돌아갔다. 
참석자들의 요청으로 MEPHISTO와 DEEP THOUGHT 간의 최종 결승이 벌어졌는데, 세 번의 시합 결과 MEPHISTO가 이겨 8000달러의 상금을 받았다. 
전해 챔피언인 CRAY BLITZ는 불행히도 참석하지 못했다. 
그 이유는 시합장인 호텔까지 그 큰 덩치의 CRAY I 슈퍼컴퓨터를 옮겨오지 못했기 때문이었다. 
BELLE는 UNIX의 설계자로 더 유명한 켄 톰슨(Ken Thompson)이 만든 프로그램으로, 1983년부터 1988년까지 5년간 세계챔피언 자리를 지켰는데 그 시합에서는 7위에 머물고 말았다. 
그러나 BELLE는 미국 체스협회로부터 최초로 마스터(Master) 칭호를 받은 프로그램이다. 
1990년, 체스 챔피언인 게리 카스파로프(Gary Kasparov)와 DEEP THOUGHT와의 시합이 있었다. 
시합은 카스파로프의 승리로 끝났다. 
카스파로프는 소감을 묻는 TIME지 기자의 질문에 체스에서 인간은 상당기간 컴퓨터보다 우위에 있을 것이라고 대답했다. 
아직 세계챔피언을 꺾지는 못했지만 컴퓨터체스의 능력은 날로 발전하고 있다. 
우리나라에서도 한 회사가 지원해주는 컴퓨터바둑대회가 1990년대부터 열리기 시작하였다. 
그러나 바둑의 경우 그 변화수와 가짓수 그리고 패싸움 등 거의 무한정한 수 때문에 아직 컴퓨터가 사람에게 맥을 못 추고 있다고 한다. 
컴퓨터의 바둑실력은 아직 5급 정도에 머물러 있다고 하니 초단 정도의 실력에 진입하기에는 상당한 시간이 걸릴 것으로 예상된다. 
그러나 포커게임이라든지 확률적으로 하는 게임에서는 그 시행횟수가 많으면 정확하게 그 가능한 확률을 계산할 수 있는 컴퓨터가 압도적으로 유리하다. 
미국에서는 한 사나이가 컴퓨터를 도박장에 몰래 감추고 들어가서 많은 돈을 딴 경우가 있었다. 
그는 놓인 패의 종류를 발가락으로 몰래 눌러서 입력하고, 그 결과는 안경테 위에 조그맣게 표시된 전구의 점열 상태로 읽었다고 한다. 
아직도 인공지능이 가능한지에 대해서는 논란이 분분하다. 
그 주된 이유 중의 하나는 인공지능의 개발 초기에 부풀린 정보들이 일반인들에게 너무 많은 꿈을 주었기 때문이다. 
최근 들어서는 수많은 전문가시스템의 등장으로 이제까지 인간만의 능력이라고 자부해온 분야들을 한둘씩 빼앗기게 되었다. 
이는 중세시대를 넘어오면서 철학이 물리학, 생리학, 심리학으로부터 공격받아 자신의 자리를 내주고서 이제는 신학이라는 형이상학과 과학에 대한 과학이라는 한 단계 높은 차원의 학문으로 밀려난 것과 같은 사태로 보아야 할 것이다. 
최근에 영국 옥스포드대학 펜로즈(Penrose)교수에 의해서 재미있는 의견이 제기되었다. 
펜로즈교수는 인간보다 뛰어난 정신적 능력을 가진 컴퓨터는 생겨날 수 없다고 그의 책 {황제의 마음}에서 주장한다. 
한 가지 재미있는 사실은 펜로즈 교수는 인간의 직관이나 예감과 같은 문제를 종교적.관념적으로 해석하지 않고 끝까지 유물론적 관점에서 설명하려고 한다는 점이다. 
즉 인간의 직관은 결국 양자역학적 물리 모델에서 설명되어야만 한다는 것이다. 
양자역학에서 한 입자가 공간적인 이동을 거치지 않고서 다음 순간에 다른 장소에서 불쑥 나타나는 것과 같은 현상이 인간 뇌 속의 원자에서 나타나고, 그런 현상들이 집단적으로 발현되는 것이 직관과 같은 인간 고유의 능력이라고 말한다. 
따라서 그의 이론에 의하면 지금과 같이 폰 노이만 스타일이나 이미 정해져 있는 규칙대로 수행되는 프로그램, 또는 그 위에서 불규칙하게 수행되는 것과 같이 모의로 작동하는 시스템에서는 직관과 같은 능력을 기대할 수 없다고 한다. 
물론 이 이야기는 여기저기서 많은 주목을 받았고 필자의 생각으로도 상당히 설득력 있는 설명이라고 여겨지지만, 인공지능의 능력을 지나치게 축소하려는 의도가 아닌가 하는 생각도 든다. 
사실 현재 인공지능을 연구하고 있는 연구자들은 대부분 펜로즈가 비난하고 있는 초기의 꿈 같은 세상을 기대하는 인공지능 연구자들은 아니다. 
모든 세계의 언어를 완벽히 번역한다든지, 증권시세를 조금도 틀리지 않게 예측한다는 것은 현실적으로 불가능하다. 
그리고 컴퓨터가 예술작품을 만들어낼 수 있는가 하는 문제 역시 인간의 미적 가치가 어디에 있는가에 따라서 달라진다. 
예를 들어서 일리노이대학에서 작곡을 할 수 있게 개발한 컴퓨터인 일리악(ILLIAC)의 작품이 아름다운가, 그렇지 못한가는 사람들마다 매우 다를 것이다. 
그러나 기계가 비록 인간이 가지는 것과 같은 예술적 창조 충동을 가지고 있진 않지만, 그 결과는 인간들에게 충분히 감동을 줄 수 있다. 
일리악은 1955년에 힐러와 아이작슨에 의해서 작곡실험을 하기 위해 만들어졌다. 
1956년까지 두 사람은 현악4중주를 위한 일리악조곡을 16세기 작곡가들의 곡상을 분석, 순수히 확률표만을 이용해서 수학적으로 구성하였다. 
일리악조곡은 16세기 작곡가인 팔레스트리나(Palestrina)의 작곡법과 같이 엄격한 화성법을 따랐기 때문에 그다지 우리의 귀에 거슬리지 않는다. 
컴퓨터가 인간의 특징인 창의력과 자기 지식의 증대 같은 것을 할 수 있을 것인가는 대답하기 어려운 질문이다. 
그러나 몇 가지 분명히 지적하고 싶은 사실이 있다. 
첫째, 인간의 특성을 영혼이나 선에 대한 선천적 지각과 같은 개념으로 설명하려는 시도는 인공지능과 인간 그 자체를 잘못 이해하는 데서 비롯된다는 사실이다. 
이에 반해서 펜로즈와 같은 식의 설명은 상당히 과학적 설득력을 지닌다. 
둘째로 인공지능 자체에 대한 서툰 기대 역시 그 발전을 방해하는 요소가 된다는 점이다. 
예를 들어 요사이 과대포장되어 선전되는 퍼지(fuzzy) 상품이나 인공신경망 상품은 인공지능의 개념을 식상하게 만들어 궁극적으로는 그 발전에 해가 된다. 
아직 인간의 대뇌 구조와 수면의 원리 등 밝혀지지 않은 사실이 너무 많으므로 인공지능이 완성되기 위해서는 먼저 인간의 지능메커니즘 자체에 대한 연구가 앞서야 할 것이다. 
현재까지 인공지능이 발달해온 과정을 보면 인간의 이성적 영역이라고 여겨지는 많은 부분들이 앞으로는 컴퓨터로 채워질 것이며, 그 도움으로 인간 자체의 지식이 더욱 발달하게 될 것 같다. 
증기기관으로 인간의 근력이 확장되었듯이 인공지능으로 우리의 지적 능력은 보강될 것이다. 
비행기를 개발하려고 하는 회사가 있다. 
그들은 먼저 유체역학에 의해서 날개모양을 만들고 몸통의 모양도 대충 구상해본다. 
그러나 그 설계상에 약간의 문제점이 있어서 새로이 모델을 바꾸어야 하는 일이 생겨날 수도 있지 않을까? 
그러면 그 전에 만든 시험용비행기는 순식간에 고철덩어리가 될 것이다. 
더구나 그런 비행기가 간단한 글라이더나 농약 치는 비행기 정도가 아니라 대형 수송기라면 실물 제작은 어마어마한 모험이 될 것이다. 
이러한 사실을 항공기 제작자들은 누구보다도 잘 알고 있다. 
그래서 축소된 항공기 모형을 만들어 그에 상응하는 바람을 일으켜보고 각 속도의 바람 속에서 진동이 얼마나 되는지를 알아보려고 했다. 
이런 실험은 초대형선풍기가 준비된 창고 속에서 행해지며 이를 풍동실험이라고 부른다. 
풍동실험을 하는 데에는 약 5000만 달러라는 막대한 자금이 사용되는데, 문제는 비용이 아니라 모형을 통한 실험 자체가 가지는 결함에 있다. 
모형비행기를 풍동실 공간에 덩그러니 띄우기 위해서는 비행기를 천장에 매달거나 몇 개의 지지대를 이용해서 받쳐야만 했다. 
그러나 풍동실의 벽면과 지지대 사이의 간격으로 말미암아 실제 비행시에는 생겨날 수 없는 난류가 발생했다. 
이런 난류의 발생으로 말미암아 어떠한 풍동실험도 실제 상황과 정확하게 일치할 수가 없었으며, 다양한 바람을 일으키는 것도 좁은 풍동실의 터빈으로는 불충분하였다. 
배를 만들 때에도 이와 비슷한 실험을 한다. 
커다란 물탱크 속에다 모형배를 띄워두고서 배의 축소 비율에 따라서 파도를 조정하여 각 흐름에 배의 상태가 어떠한지를 조사하는데, 이같은 실험을 하는 방을 수조실이라고 부른다. 
필자가 공부한 곳의 기숙사 옆에도 항공공학과의 풍동실이 있었다. 
가끔 밤을 틈타서 한 번씩 작동시키는데 그 커다란 바람소리로 인해서 기숙사 전체가 들썩일 정도의 소음을 느낀 적도 있었다. 
그렇다면 이같은 실물 모의실험을 대치할 만한 방법은 없는 것일까? 
슈퍼컴퓨터는 기존의 유체역학의 공식에서나 실물 모의실험에서는 도저히 엄두도 낼 수 없을 정도의 정확한 계산을 해준다. 
예를 들면 아직도 유체역학에서 깨끗하게 해결하지 못하는 난기류의 문제를 공기분자가 어떻게 움직이는가를 약 100만 분의 1초 단위로 추적함으로써 거의 완벽하게 재현해준다. 
또 어떤 프로그램은 비행기 작동 실험에서 비행기 표면을 수십만 개의 조각으로 나누고 각 조각마다 기체의 압력, 밀도 그리고 속도를 산출해낸다. 
이를 위해선 기존의 컴퓨터보다 계산능력이 월등히 뛰어난 슈퍼컴퓨터의 사용이 필수적이라고 하겠다. 
물론 슈퍼컴퓨터를 사용하더라도 그에 사용되는 계산모델이 부정확하다면 의미 없는 결과가 나오게 된다. 
그러나 컴퓨터는 공기가 거의 없는 대기 상층부에서의 비행이라든지, 심한 태풍이나 눈.비의 기상 악조건과 음속의 몇 배나 되는 속도로 비행하는 것 등 현재의 풍동실험 설비로는 도저히 흉내도 낼 수 없는 실험을 실제 상황과 유사하게 할 수 있다. 
특히 개발속도 자체에 회사의 존망이 걸려 있는 자동차 개발에서도 슈퍼컴퓨터의 사용은 필수적이다. 
일일이 시험자동차를 만들어서 벽에 부딪치는 실험을 한 뒤 그 프레임 구조를 바꾸는 일은 작업의 양도 문제가 되거니와 다른 회사와의 속도 경쟁에서 뒤질 수밖에 없게 한다. 
뿐만 아니라 유전자의 순서를 분석하는 일, 석유탐사를 위한 해저측량과 같이 대량의 데이터를 분석해야 하는 일에서 슈퍼컴퓨터는 없어서는 안 될 존재가 되었다. 
최근에는 슈퍼컴퓨터가 지구과학에까지 응용되고 있는데, 예를 들면 토네이도라는 회오리바람을 일으키는 폭풍우의 활동을 분석함으로써 미리 경계경보를 발할 수 있게 되었다. 
또 최근 들어서 크게 문제가 되고 있는 오존층의 파괴가 지구인들에게 어떤 영향을 끼칠 것인지에 대해서도 실험을 할 수 있으며, 나아가 어떤 연구원들은 현재의 기후와 대기모델을 이용해서 지구상에서 완전히 멸종해버린 공룡의 수수께끼를 알 수 있지 않을까 하는 기대까지 하고 있다. 
이러한 생각은 다소 뉴턴적 기계론에 의존하고 있긴 하지만 재미있는 추리라고 할 수 있다. 
그러나 대기의 운동은 워낙 복잡해서 서너 개의 식으로 정확히 표현할 수 없다. 
문명 이전에는 이런 현상들이 자연스럽게 초자연적인 신의 작용으로 여겨졌지만 현재는 슈퍼컴퓨터가 이런 질문에 충실히 답해준다. 
최근 과학자들은 점차로 없어지는 밀림으로 인해서 대기 중에 차츰 이산화탄소가 높아져간다고 한다. 
만일 이산화탄소의 양이 두 배로 증가한다면 무슨 일이 벌어질 것인가, 또 수많은 먼지와 연기는 기후에 어떠한 영향을 줄 것인가? 
이러한 계산을 정확히 하기 위해서는 여러 자료가 종합되어야 하고, 어느 정도 짧은 시간 단위로 계산하는가가 매우 중요한 변수가 된다. 
즉 얼마나 많은 지역을 택해 얼마나 짧은 시간대의 변화를 추적할 수 있는가 하는 것이 정확도와 비례한다. 
NCAR 연구원들이 추적한 이산화탄소의 두 배 증가에 따른 기후변화는 다음과 같은데, 이 계산을 위해서 슈퍼컴퓨터인 크레이 I으로도 무려 132시간이 걸렸으며 계산한 총횟수는 약 4조 번 정도였다. 
만일 이산화탄소가 두 배로 증가한다면 극지방은 온도가 무려 16℃ 가량 상승하고 적도지방은 약 2℃ 정도 상승하며, 이로 인해서 극지방의 얼음이 녹아내린다는 것이었다. 
그리고 녹은 얼음물의 영향으로 해안선 근처의 도시들이 물에 잠기며 해수온도가 올라간다. 
이후 중위도지방에서는 겨울에 강수량이 많아지며, 농사에 결정적인 영향을 끼치는 토양의 습윤도가 유럽과 아시아 일부, 캐나다 일대에서는 올라가고 아프리카와 남아메리카에서는 떨어질 것이라 내다보았다. 
슈퍼컴퓨터의 개발동기를 부여했고 현재까지도 슈퍼컴퓨터의 가장 열렬한 구매자는 역시 핵물리학자이다. 
슈퍼컴퓨터가 입자물리학에 응용되는 것은 두 가지 면인데, 하나는 현재의 입자가속기로써는 할 수 없는 실험을 해주는 것이고, 또 하나는 입자가속기 자체를 제어하며 입자가속기에서 나온 사진(두 개의 입자가 부딪쳐서 생긴 새로운 입자들의 궤적)을 분석해서 어떤 입자가 생겼으며 그 입자들이 어떤 경로를 따라가서 소멸했는지를 추적하는 것이다. 
이 과정을 인간의 수학계산능력만 가지고 해결한다면 너무 복잡해서 계산 자체가 거의 불가능할 뿐만 아니라, 가장 효율적인 계산방법을 생각해내는 데에만도 1년이 족히 걸릴 것이다. 
그러나 슈퍼컴퓨터인 크레이Ⅰ은 그 계산을 불과 90분 만에 끝냈다. 
인간이 하면 수많은 오류를 포함해서 1년이 걸리는 일을 단지 90분 만에 이루어낸 것이다. 
실세계에서 이 과정은 불과 10-21초 만에 일어나기 때문에 인간의 상상을 초월한다. 
2차대전중 디지털컴퓨터는 암호해독과 무기개발에 응용되었다. 
특히 2차대전이 끝날 무렵부터 핵무기를 둘러싼 각 나라들의 열띤 경쟁이 시작되면서 한층 빠른 컴퓨터의 개발에 대한 요구가 커졌다. 
한편 원폭개발에 성공한 미국은 핵무기개발에 더욱 박차를 가하게 되었다. 
그중에서도 버클리대학 부설인 로렌스방사능연구소는 그 시대의 가장 빠른 컴퓨터로도 약 100시간이 걸리는 계산문제로 골머리를 앓고 있었다. 
로렌스연구소는 현재 사용하고 있는 컴퓨터보다 100배 이상 빠른 컴퓨터를 찾는다고 여러 회사에 공고를 내었다. 
여기에 뛰어든 회사는 IBM과 스페리랜드, 두 회사였다. 
먼저 스페리랜드가 그 신청을 받아들여 1956년 3월에 주문명세서를 완성하여 본격적인 개발에 돌입하였다. 
IBM은 다소 실망스러웠지만 차분히 그 개발과정을 지켜보았다. 
다행히 그 무렵 진공관이 트랜지스터라는 새로운 매체로 대체되면서 스페리랜드의 개발은 별 무리없이 진행되었다. 
그 전체적인 지휘는 루코프라는 공학자가 맡아서 했고 새로운 기계의 이름은 LARC라고 명명되었다. 
모든 진공관은 트랜지스터로 대체되었고, 이전의 유니백류와는 달리 전체구조를 순수하게 계산을 담당하는 장치와 외부로부터의 입출력을 담당하는 파트로 나누었다. 
그 배선구조가 얼마나 복잡했는지는 기판 뒤로 얽혀 있는 배선의 두께만 5cm가 넘었다고 하니 짐작하고도 남을 것이다. 
우여곡절 속에서 LARC는 드디어 1960년에 완성되었다. 
그러나 제작가격이 비싸 애당초 기꺼이 사줄 것이라고 생각했던 고객이 하나 둘씩 고개를 내젓는 것이었다. 
그 정도의 가격이라면 아직까지는 구식기계로 엉금엉금 계산하는 편이 더 경제적이라고 생각했기 때문이다. 
게다가 잦은 부품고장으로 성능면도 애당초 계약의 90% 정도에 그쳤고 인도 예약시간도 약 2배 정도 더 걸렸기 때문에 스페리랜드로서도 할 말이 없었다. 
한 대는 로렌스연구소에 억지로 팔았으나 그 후로는 아무도 주문하지 않았다. 
다행히 1961년에 미 해군에 한 대를 더 팔 수 있었다. 
선구자에게 돌아온 평가는 가혹했다. 
상처뿐 영광은 없었다. 
결국 스페리랜드는 1700만 달러를 고스란히 날렸고 그 일에 관여했던 연구원들도 뿔뿔이 흩어져버렸다. 
과학의 세계와 경영의 세계가 항상 일치하지는 않는다는 귀중한 교훈을 남긴 사건이었다. 
1955년에 로렌스연구소에 입찰하는 과정에서 쓴맛을 본 IBM은 와신상담격으로 독자적인 개발계획을 세우고 1956년에 원폭개발에 선구적인 역할을 한 로스알라모스연구소와 IBM 704보다 100배 빠른 최신형컴퓨터를 만들어보자는 합의서를 교환했다. 
그리고 그 새로운 컴퓨터에는 스트레치(Stretch)라는 별명을 붙여두었다. 
부품의 개선만 가지고는 10배 이상의 속도를 내기 힘들었기 때문에 IBM은 전체적으로 어떤 개혁이 필요하다는 사실을 깨닫고 있었다. 
스트레치 개발팀은 LARC가 어떤 점에서 실패했는지를 차근차근 따져보았다. 
IBM에서는 수동식 배선의 부정확성과 느린 속도를 감안하여 새로운 배선프로그램을 개발하였는데, 그 배선프로그램은 IBM 704로 처리되는 혁신적인 프로그램이었다. 
이후 그 기계는 인도 기한을 1년 가까이 넘기고서야 로스알라모스에 인도되었는데 애당초 약속한 속도의 약 1/4에도 미치지 못하였다. 
게다가 신뢰도마저 낮아 1300만 달러로 예정됐던 인도가격은 약 반 정도가 깎인 800만 달러로 되었다. 
그 뒤로 약 8대 정도의 주문을 받았지만 IBM의 총손해액은 2000만 달러에 달했다. 
스페리랜드와 IBM이 연이어 고배를 마시게 됨으로써 대형 과학기술전용 컴퓨터에 대한 연구열기는 당분간 가라앉게 되었다. 
더 실익을 챙길 수 있는 사무용컴퓨터 제작으로 개발 방향이 재조정되었다. 
스페리랜드와 IBM의 뒤를 이어 다른 기업이 대형컴퓨터 연구에 뛰어들었다. 
그 회사는 CDC라는 약자로 알려진 컨트롤데이터였는데 이 회사는 몇 년 전 국내에서 떠들썩한 노사분규를 일으켰던 회사이다. 
이 회사를 실질적으로 주도한 기술자는 전직 암호해독자였던 윌리엄 노리스와 하워드 엥스트롬이었는데, 이들의 목표는 사무용계산기가 아니라 오로지 대형컴퓨터를 만드는 것이었다. 
CDC의 사장 노리스는 군과 학계에 자신과 친분이 있는 사람들을 대상으로 CDC 제품을 선전하기 시작했다. 
재정상의 문제로 노리스의 CDC는 도산위기에까지 몰렸으나 해군에 있는 친구들의 도움으로 CDC 1604 몇 대를 주문받는 데 성공했다. 
그 컴퓨터의 개발과정중 재무상태가 너무 악화되어 전사원의 월급을 반으로 줄여야 할 정도에 이르기도 했지만, 어려운 과정 끝에 1960년에 드디어 모델 1604가 탄생하였다. 
가격도 파격적으로 책정하여 100만 달러 이하에 팔았는데, 당대의 어떤 컴퓨터보다도 뛰어난 능력을 보였다. 
모델 1604의 설계를 담당한 사람 중에는 나중에 슈퍼컴퓨터 세계의 왕자로 군림하게 되는 크레이라는 무서운 공학자가 숨어 있었다. 
세이머 크레이(Seymour Cray). 
괴팍스러운 크레이는 1925년에 위스콘신 주의 조그만 도시에서 태어났다. 
그는 어려서부터 유달리 뛰어난 재능을 보였다. 
그는 미네소타 주립대학을 졸업한 후 유니백 1103의 개발을 책임지게 되는데 그때 나이가 25세였다. 
CDC의 회장인 노리스의 선택이 적중하여 크레이는 CDC의 엔지니어로 들어와서 과학용컴퓨터를 연구하게 된다. 
크레이의 성격을 잘 말해주는 에피소드가 하나 있다. 
그는 자신이 연구하는 것 이외의 다른 일에는 도무지 관심이 없었는데, 한번은 진행중인 프로젝트에 관해서 책 한 권 분량의 보고서를 만들라는 요구가 있었다. 
그러자 그는 다음과 같은 한 페이지의 메모로 답했다고 한다. 
"보고! 
자신 있게 나아감." 
그의 별명은 그가 태어난 치피와지방의 이름을 따서 "치피와 폭포의 마술사"였다. 
크레이는 누구보다도 자신의 사생활과 개인적인 연구를 중요시했는데, 한번은 노리스에게 자기 고향 근처로 연구소를 옮겨야겠다고 우겼다. 
다른 사람의 요구였다면 일언지하에 거절할 노리스였지만, 일찍부터 그의 천재성을 알고 있었기에 노리스는 CDC 본부가 있는 미니애포리스에서 100마일이나 떨어진 크레이의 고향 근처에 그를 위해서 연구소를 차려주었다. 
마음의 평안을 찾은 크레이는 곧 모델 6600의 개발에 몰두했다. 
연구소 직원은 경비원을 포함해서 모두 34명이었는데, 크레이는 도시락까지 싸와서 자신이 직접 납땜일까지 할 정도로 열의를 보였다. 
1964년 3월에 드디어 CDC의 모델 6600이 공개되었다. 
무려 80만 마일의 전선으로 뭉쳐진 이 기계는 높이가 서양인의 키 정도 되는 180cm이고 길이는 4m였으며 35만 개의 트랜지스터가 사용되었다. 
전체적인 냉각은 기존의 공냉식이 아니라 냉각수가 컴퓨터 외부의 이곳저곳을 돌며 식혀주는 수냉식을 채택하였다. 
또 속도는 초당 300만 번 정도의 계산이 가능하였다. 
이는 CDC 1604보다 20배나 빠른 속도였으며 IBM의 스트레치보다는 약 3배가 빠른 속도였다. 
완전한 히트작품이었다. 
CDC의 주가가 폭등하기 시작하였다. 
CDC의 성공소식에 가장 배아파한 것은 다름아닌 IBM의 경영진이었다. 
IBM의 회장인 왓슨은 전체 간부회의에서 분통을 터트리면서 거대기업 IBM의 구겨진 자존심을 세우기 위한 대책을 마련하라고 긴급히 지시했다. 
IBM에서도 CDC의 6600을 겨냥해서 새로운 컴퓨터개발에 착수했다. 
프로젝트의 이름은 다소 의아하게 X-프로젝트로 정해졌다. 
IBM은 나름대로 전술을 쓰기 시작했다. 
아직 완전히 만들어지지도 않은 컴퓨터를 모델 90이라는 이름으로 발표한 것이다. 
선전책자에 나타난 모델 90의 성능은 단연코 CDC의 모델 6600을 능가하는 것이었고, 이는 물론 은밀히 CDC의 고객들에게 퍼트려졌다. 
CDC의 6600을 샀거나 살 예정인 사람들 사이에서 대혼란이 벌어졌다. 
즉 CDC 6600에 더 투자를 할 것인가 아니면 좀더 기다렸다가 IBM의 모델 90을 구입할 것인가라는 문제로 과학기술용컴퓨터의 사용자사회가 들끓었던 것이다. 
게다가 CDC 6600의 몇 가지 결함이 발견되면서 형세는 IBM에 점점 유리하게 전개되었다. 
어려움에 직면한 CDC는 6600의 가격을 600만 달러에서 무려 200만 달러로 내리고 주변기기 회사들을 합병하였으나 도리어 커다란 적자만 맛보았다. 
CDC의 자금상황은 점점 더 나빠져만 갔다. 
그러나 6600의 상태가 완전히 안정됨으로써 자금사정도 곧 만회되어 1960년말에는 무려 100여 대의 주문을 받기에 이르렀다. 
반면 IBM은 1967년에 겨우 한 모델을 발표해 12대를 팔았을 뿐이다. 
IBM은 스트레치 개발에 연이어 다시 무려 1억 3만 달러 정도의 손실을 보았다. 
게다가 IBM의 비열한 행동에 격분한 CDC의 제소로 말미암아 재판정에까지 서게 되었다. 
IBM의 거대함에 비록 겁을 먹기는 하였지만 결과는 CDC의 완전한 승리로 끝났고, IBM은 다시 한 번 윤리적인 상처를 입게 되었다. 
CDC는 6600의 성공에 힘입어 다시 새로운 모델 7600을 개발하기에 이르렀고, 7600은 곧바로 로렌스국립연구소로 팔려 이후 10년 동안 독무대를 누리게 되었다. 
그러나 CDC 7600에도 어느덧 경쟁자가 생겼는데, 그것은 CDC를 뛰쳐나온 크레이 자신이 직접 제작한 크레이Ⅰ이라는 슈퍼컴퓨터였다. 
드디어 본격적인 슈퍼컴퓨터의 시대가 개막되었다. 
크레이의 마술이 과학계산용컴퓨터 시장에서 펼쳐지기 시작한 것이다. 
렘브란트가 살아나서 전자붓으로 그린 자신의 그림을 본다면 기분이 어떨까? 
컴퓨터는 미술에서도 테레빈기름의 냄새를 조금씩 밀어내고 있다. 
백번 듣는 것보다 한번 보는 것이 더 낫다는 속담이 있듯이 인간에게 시각이란 어떤 감각기관보다도 훌륭한 감각기관이다. 
예를 들어서 매우 이해하기 어려운 공식이나 설명도 간단한 도표나 도식적인 그림으로 그려 놓으면 쉽게 이해되는 수가 있다. 
인간이 최초로 갖게 되는 종합적인 감각기관은 바로 시각인 것이다. 
어린아이에게서도 가장 뛰어난 감각기관은 바로 눈이다. 
최근 들어서 만화나 간단한 도표가 설명에 많이 쓰이는 것은 바쁜 현대인들이 복잡한 수식이나 설명을 이해할 만한 시간이 없어서이기도 하지만, 그림이나 도표가 더 직접적인 설명 수단이 되기 때문이다. 
또한 회사경영에 관한 정보 같은 것도 여러가지의 도형을 이용한 도표로 나타냄으로써 쉽게 이해될 뿐 아니라 숫자의 구렁텅이에서 다소 벗어날 수 있다. 
간단한 예로서 우리들에게 실험을 한번 해보자. 
724,687,289,983,445,289가 각각 전체의 몇 퍼센트를 차지하는지 알려고 한다면 우리는 세 숫자를 합한 뒤 각각이 몇분의 몇이 되는지 나눗셈을 해보아야 한다. 
그러나 이 결과를 파이차트(원형도표)에 나타낸다면 우리는 한눈에 각 숫자의 비율을 알 수 있을 것이다. 
요즘에는 이런 기능이 컴퓨터에 평범하게 첨부되어 있지만 그 발달의 과정은 복잡하다. 
이같이 컴퓨터를 이용해서 그림이나 도형을 그리는 기술을 보통 컴퓨터그래픽스라고 부른다. 
컴퓨터를 이용해서 그림을 그리는 기술, 즉 컴퓨터그래픽스는 최근 들어서 급격히 발전을 거듭해온 컴퓨터과학의 한 분야이다. 
현대에 와서 이는 전산학의 주요한 연구분야일 뿐만 아니라 의학, 공학, 우주비행사의 모의실험, 생물학, 게다가 헐리우드의 영화산업에까지 진출해 있다. 
컴퓨터 초창기에는 프로그래밍만이 컴퓨터와 인간의 유일한 통화수단이었으며, 그것도 기계어와 유사한 수준의 복잡하고도 조악한 것이었다. 
이후 고급언어인 포트란 등의 개발로 말미암아 프로그래밍언어는 그 나름대로의 발전을 거듭하였다. 
초기의 몇 컴퓨터는 오실로스코프 정도의 장치를 가지고 있었는데, 그것은 기껏해야 내부고장을 진단하는 데 사용되었을 뿐이다. 
그런데 어떤 오퍼레이터는 거의 장난삼아서 그 오실로스코프에 춤추는 무용수의 모습을 그려내기도 했다. 
최초의 컴퓨터그래픽스는 휠원디라는 전자식컴퓨터에서부터 시작되었는데, 1950년에 "한번 보자구"라는 텔레비전 프로에서 바로 이 기계가 소개되었다. 
프로의 시작 직후 나타난 것은 "안녕 머로우선생!"이라는 
인사말이었는데, 그것은 단순한 그림이 아니라 CRT상에 나타난 빛나는 작은 점들의 집합이었다. 
천공카드나 종이테이프로 프로그래밍하던 그 당시에 글자가 스크린에 나타난 것은 상당히 경이적인 것이었다. 
이렇게 해서 최초의 컴퓨터그래픽스가 대중 앞에 선을 보이기 시작하였다. 
우리는 비디오게임이나 정밀한 컴퓨터 영상에 익숙해져 있기 때문에 휠원디식 그래픽스가 다소 유치하게 보일지 모르지만, 그 프로를 지켜본 당시 사람들에게는 이것이 새로운 미디어의 출현을 알리는 나팔소리로 들렸을 것이다. 
이런 기술은 곧 국방산업에 응용되기 시작하였다. 
그 당시는 핵폭탄과 제트비행기의 출현으로 구시대의 낡아빠진 방공체계가 압박받고 있었다. 
즉 비행기의 속도가 빨라졌기 때문에 그 데이터를 레이더로 관측해서 무선이나 전화로 중앙통제소에 불러주는 방식은 한심한 방법이 되어버린 것이었다. 
여기저기서 오는 정보를 받아서 그것을 상황판이라는 플라스틱판에 조그마한 모형비행기나 배를 여기저기로 끌고다니며 움직이는 방법이 당시의 수준이었다. 
더하여 러시아에서의 원자무기 실험이 성공적으로 끝났다는 소식과, 연이어 장거리폭격기의 개발성공 소식이 새로운 방공체제의 개발을 더욱더 요구하게 되었다. 
이때 포리스터라는 과학자는 휠원디기계를 이용해서 포격제어 항공교통통제 등의 분야의 연구를 하고 있던 중 공군에서 자신이 고민하는 것과 유사한 문제로 고민하고 있다는 이야기를 들었다. 
포리스터가 고안한 방법은 바로 데이터를 도형으로 나타내어 비행체의 위치를 지도상에 자동적으로 표시함으로써, 오퍼레이터가 그 지도상에 나타난 비행체에 관한 정보를 쉽게 알 수 있도록 하는 것이었다. 
다시 말해서 위치에 대한 정보(2차원 좌표)가 지도그림이 부착된 모니터에 나타나도록 하였다. 
이렇게 해서 비행체의 위치는 나타낼 수 있었으나 계속해서 들어오는 정보를 어떻게 처리할 것인가가 큰 문제로 남게 되었다. 
이것은 포리스터의 조수인 에버렛이 고안한 광선총(light gun)으로 해결하였다. 
총 속에는 광전지 수신장치가 있어서 그 총을 모니터상의 한 빛나는 점에 갖다대면 총이 광점의 위치에 관한 정보를 컴퓨터에게로 보내게 되어 있었다. 
그러면 컴퓨터는 그 선택된 비행체에 관한 정보를, 예를 들어서 비행기의 속도, 방향을 표시해주었다. 
이 시스템의 의미는 기존의 종이테이프나 천공카드를 컴퓨터와 오퍼레이터 사이에서 없애버림으로써 더 즉각적인 대화를 할 수 있도록 만든 것이었다. 
휠원디의 시범이 1951년 4월 20일에 있었다. 
두 대의 비행기가 모의전투에 참가했다. 
중앙제어실에 앉아 있는 오퍼레이터가 가상적기를 나타내는 도형 위로 광선총을 가져가자 곧 그 가상적기에 관한 정보가 나타났다. 
그 정보 중에는 아군기가 그 가상적기를 요격하기에 가장 최적인 코스까지 나타났다. 
그 정보는 곧 무전으로 아군기에 전달되었고 이날의 시범은 대성공으로 끝났다. 
이 결과 휠원디를 이용한 시스템은 곧 SAGE라는 초대형 방공망체계에 응용되었다. 
1958년 여름, 최초로 SAGE가 가동된 이후로 휠원디는 1983년 SAGE가 현대식컴퓨터로 해체될 때까지 무려 25년간이나 어려움 없이 사용되었다. 
휠원디가 이룩한 기술의 성과는 컴퓨터를 즉각적인 출력장치인 CRT와 광선총이라는 새로운 입력장치로 연결시켜, 기계와 인간과의 대화를 전적으로 새롭게 만든 것이었다. 
스케치 패드 현대적 의미의 컴퓨터그래픽스 기술은 이반 서덜랜드(Ivan Sutherland)라는 MIT 공과대학의 한 대학원생에 의해서 태동했다. 
그는 자신의 학위논문을 완성하면서 새로운 기술을 소개하였다. 
그의 학위논문 [스케치 패드]는 말뜻 그대로 보통의 과학자가 자신의 아이디어를 대충 스케치하고 지우거나 덧붙이기를 할 수 있는 노트 ― 스케치 패드의 기능을 컴퓨터도 지니게 하는 것이었다. 
이전에는 모니터에 기껏해야 제한된 몇 개의 문자만을 겨우 나타낼 수 있었다. 
그 위로 직선이나 곡선을 그려넣고 그것을 몇 개씩 연이어 그린다거나 하는 작업은 완성하지 못했다. 
서덜랜드의 말에 의하면 이전의 프로그래밍이란 일방적으로 컴퓨터에게 편지를 보내는 것이었다고 한다. 
이것을 대화식(interactive system)으로 바꾸려면 모니터상의 작업을 간단한 도형으로 처리하여, 프로그래머가 그것을 가지고 선을 긋거나 제도를 할 수 있게 하는 장치가 필요했다. 
다시 말해서 프로그래밍언어를 전혀 모르는 사람이라도 어린아이가 진흙판 위에 그림을 그리듯이 프로그래밍이나 제도를 할 수 있도록 해야 한다는 것이 서덜랜드의 기본 취지였다. 
서덜랜드의 스케치 패드는 오퍼레이터가 원하는 내용의 동작을 즉각 모니터 위에 나타낸 뒤 수정을 받도록 하였다. 
서덜랜드가 스케치 패드를 발표하기 이전의 그래픽스기술은 대부분 군사기술에 부분적으로 활용되었고 수준도 유치하였다. 
그러나 서덜랜드의 스케치 패드 이후부터 컴퓨터그래픽스는 공학, 특히 자동차와 항공 산업에 본격적으로 이용되기 시작했다. 
스케치 패드가 완성된 후 서덜랜드는 그것에 관한 영화를 제작해서 MIT 캠퍼스의 여러 교수들에게 보여주었다. 
그 필름을 감동적으로 본 UCLA의 데이빗 에반스 교수는 이후 서덜랜드와 함께 "에반스와 서덜랜드"라는 첨단의 컴퓨터그래픽스회사를 설립하였다. 
그 필름을 본 몇 과학자들의 의견에 따라서 서덜랜드는 스케치 패드를 활용한 몇 가지 상품을 개발해야겠다고 생각했다. 
그러나 막상 회사나 기타 정부 공공연구소의 반응은 상당히 냉담하였다. 
대부분의 기업들은 서덜랜드의 필름을 보고서 2010년이 넘어서야 이루어질 기술이라고 생각했으나, 제너널모터스사의 경영진은 그 아이디어를 깊이 생각했다. 
왜냐하면 서덜랜드의 발표가 있기 2년 전부터 자동차 설계를 도와주는 컴퓨터시스템을 개발해왔기 때문이다. 
GM에서 개발한 시스템은 DAC-1이라고 명명되었다. 
자동차 제도에서 나타나는 선, 도형은 보통의 제도사들이 그려낸 선보다 훨씬 정확하고 정밀해야 했다. 
DAC-1이 서덜랜드의 방식과 다른 점은 입력을 스크린 위에 직접 그려서 하는 것이 아니라 설계사가 원하는 모형을 디지털화하는 카메라로 직접 입력하거나 또는 약간의 프로그래밍언어로 입력하는 것이었다. 
컴퓨터그래픽스에 대한 GM사의 관심은 새로운 전기를 마련하였고, 이후 1965년에는 IBM이 DAC-1의 경험을 살려 상업용 그래픽스 단말기를 IBM 2250으로 내놓았다. 
이 IBM 2250은 그 당시 IBM 최신기종인 IBM 360에 연결해서 사용하도록 되어 있었다. 
IBM의 새로운 그래픽스용 터미널 개발은 IBM의 본체에 붙여쓸 수 있는 그래픽스 단말기 생산에 경쟁을 유발하였고 1968년에 에반스 서덜랜드사가 설립된다. 
에반스 서덜랜드사는 IBM 2250의 단점인 속도의 문제를 해결하였다. 
즉 그들은 자사제품인 LDS-1 단말기에 특수목적인 회로를 설치하여 엄청난 양의 계산을 요구하는 물체의 회전이라든가 앞선 그림을 지우고 새로운 그림을 모니터에 그리는 일 등 몇 가지를 본체를 거치지 않고 터미널에서 직접 하게 하였다. 
그러나 그때까지 기억장치 가격이 무척 비쌌고 모든 그래픽스기술은 주기억장치 용량에 전적으로 의존했기 때문에, 그래픽스 터미널의 가격이 비쌀 수밖에 없었다. 
여기서 우리는 초기의 그래픽스기술이 어떤 것인가에 대해서 살펴보기로 하자. 
초기에는 형광물질이 입혀진 스크린 위로 전자총이 직접 전자빔을 쏘았다. 
그 전자빔이 형광물질에 부딪히는 순간 빛이 나오고 그 빛에서 나오는 점들이 연결되어서 도형을 만들었다. 
그렇기 때문에 한 개의 선분을 그리기 위해서 컴퓨터시스템에게 전해주어야 할 데이터는 선분의 양 끝점에 해당하는 두 개의 점좌표였다. 
이런 작업을 할 수 있는 모니터를 벡터모니터라고 부른다. 
벡터모니터는 또 한 좌표에서 다른 좌표로 직접 이동하면서 그리므로 일명 "점에서 점(point point)"방식이라고도 한다. 
그러면 벡터모니터의 단점은 어떤 것일까? 
먼저 벡터모니터는 선을 그리기는 쉬우나 면이나 색채를 표현하는 데 어려움이 있다. 
또한 그려진 선분의 한 부분만을 지우는 작업을 할 수 없어서 부분적으로 지우는 작업을 할 때에도 전체의 그림을 새로 그려야 한다. 
이에 비해서 현대 대부분의 그래픽스 터미널이 선택하고 있는 기술은 래스터스캔기술(rasterscan technology)이라고 불리는 텔레비전 주사방식과 흡사한 방식이다. 
래스터스캔방식은 먼저 화면을 작은 점으로 나눈다. 
그 점들은 보통 픽셀(pixel)이라고 불리는데, 프로그래머는 각 픽셀마다 그 픽셀을 어느 정도로 밝게 할 것인지, 어떤 색깔로 칠할 것인지의 명령을 내릴 수 있다. 
그러나 실제 프로그래머가 할 수 있는 일은 화면 위의 잘게 나누어진 픽셀 위에 직접 색칠을 하는 것이 아니라 각 픽셀과 대응된 그래픽버퍼라고 불리는 기억장치의 내용을 바꾸는 일이다. 
예를 들어서 단순한 그래픽시스템에서 해당 픽셀마다 1비트씩 배당되어 있다고 하자. 
그리고 그 비트가 '0'로 되어 있으면 검은 색(아무 변화가 없는 상태)이고 '1'이면 빛이 난다고 가정하자. 
화면이 가로, 세로 100픽셀로 구성되어 있다면 그 화면에 대응되는 그래픽버퍼는 모두 100×100비트가 필요하게 된다. 
프로그래머는 100×100비트의 상태를 각 0과 1로 바꾸어줌으로써 선분이나 원 또는 그림까지도 그릴 수 있게 된다. 
즉 중앙처리장치가 100×100비트로 구성된 그래픽버퍼를 모두 지나가면서 '1'로 세트된 위치의 각 점마다 전자총을 발사한다. 
따라서 기억장치(그래픽버퍼) 내의 각 비트만을 다르게 조작함으로써 그림을 부분적으로 지울 수도 있다. 
그러나 직선이나 원호를 그리는 데서 속도나 정밀도가 떨어지므로 지금도 빠른 처리속도가 요구되는 그림에는 래스터스캔보다는 벡터스캔방식이 사용되기도 한다. 
그래픽스가 일반적으로 사용되기 위해서는 색깔이나 면 등을 자유자재로 표현해 한층 입체적인 그림을 그릴 수 있어야 하므로 전체적으로는 벡터스캔보다 래스터스캔방식이 주류를 이루게 되었다. 
일찍부터 래스터스캔 그래픽스를 사용한 곳은 미 항공우주국이었다. 
그 시대는 자기코어가 기억장치의 대부분을 구성하고 있을 때였으므로 기억장치의 가격이 엄청나게 비쌌다. 
따라서 더 정밀한 화면을 위해서 충분한 양의 그래픽버퍼를 사용하는 일이 쉽지 않았다. 
미 항공우주국에서 행성탐사위성이 사진을 보내는 방식은 민간 텔레비전이 사용하는 방식과 같은 방식이었다. 
그러나 컴퓨터기술이 발달함에 따라 전송되어온 사진을 컴퓨터로 분석하기 시작하자, 사진을 처음부터 디지털정보로 보내게 되었다. 
그래서 1969년 매리너 6호가 화성에 다다르자 라이트센서가 곧 화성의 모습을 디지털 모습으로 인식하여 지상의 안테나를 통해서 IBM 컴퓨터에 수록하였다. 
그래픽시스템이 대중적인 비디오게임 등에까지 널리 보급되게 된 것은 1970년대초부터 개발되기 시작한 무작위추출 기억장치라고 불리는 RAM이 보급되면서부터이다. 
그 이전의 래스터그래픽스는 쉬프트레지스터라고 불리는 다소 느린 기억장치를 이용했다. 
RAM의 등장으로 말미암아 그래픽스는 절정기에 도달하게 되었다. 
만일 자동차 롤스로이스의 가격이 컴퓨터 기억장치 값 정도로 떨어졌다면 지금쯤은 1달러 정도면 살 수 있다고 하니 그 하락비율을 짐작할 수 있겠다. 
따라서 이제는 문제가 그림이나 도형을 얼마나 빨리 지우고 그리는가에서 얼마나 사실적으로 그리는가로 바뀌었다. 
그래서 컴퓨터그래픽스는 컴퓨터가 그린 영상과 사진을 필자도 때때로 착각할 정도로 발달하였다. 
어떤 그래픽시스템은 약 1억 가지가 넘는 다채로운 색들을 다르게 조작할 수 있다고 한다. 
이런 사실에 자극받은 사람들 중에는 공학자뿐만 아니라 영화사업자들도 있었다. 
이전의 만화영화에서의 애니메이션기법은 각 컷마다의 그림을 사람이 일일이 색칠한 다음, 그것을 필름에 찍어서 영사하는 것이었다. 
그런데 이런 작업에 컴퓨터를 사용할 수 없을까 하고 생각한 것이었다. 
1971년에 발표된 "별들의 전쟁"이라는 영화에서 조지 루카스 감독은 그중 약 90초에 해당되는 부분을 컴퓨터영상을 쓰기로 하였다. 
이후 1979년 디즈니영화제작소의 "브랙홀"에서는 약 75초간의 영상을 컴퓨터그래픽스로 제작하였다. 
주인공을 태운 우주선을 빨아들이려고 애쓰는 금속판들의 소용돌이가 바로 그것이다. 
이런 기술에 고무받아서 최초로 컴퓨터로 제작된 "트론"이라는 영화가 나왔다. 
그 내용은 비디오게임에 열중한 주인공이 비디오게임 속으로 들어가서 비디오게임 속에서 나오는 괴물들과 직접 싸운다는 것이었다. 
어떻게 보면 황당하기도 한 이 "트론"을 만든 사람들은 스티브 리즈버그와 전직 변호사인 도널드 쿠슈너였다. 
이들은 애당초 1978년 모스끄바올림픽에 쓰일 '동물올림픽'을 만들 예정이었으나 미국의 불참으로 기대가 좌절되자 "트론"의 제작비를 대줄 영화제작소를 물색하던 중 디즈니스튜디오 월히트를 만나게 된 것이었다. 
이후 뉴욕의 MAGI Ⅲ사와 뉴욕 공대의 한 그룹이 참여하여 영화제작이 시작되었다. 
1982년 7월 드디어 컴퓨터로 만든 105분짜리 영화인 "트론"이 모습을 드러냈다. 
105분 중에서 순수하게 컴퓨터로만 만든 영상은 약 15분 정도였고, 사람의 행동과 컴퓨터를 결합한 영상도 15분 정도였다. 
이것을 위해서 배우는 흰색 또는 검은색으로만 구성된 옷을 입고서 흰색과 검은색 스크린 앞에서 연기를 하였다. 
이후 그 필름 위에 컴퓨터가 배경이나 주인공의 옷을 덧씌웠다. 
그리고 경비를 절감하기 위해서 수작업은 대만(Taiwan)에 맡겨졌는데, 그래도 제작비는 예상을 초과하여 무려 2000만 달러나 들었다. 
"트론"의 흥행은 어떻게 되었을까? 
"트론"은 몇 가지 매혹적인 영상을 부분적으로 보여주긴 했지만 비싼 제작비와 다소 엉성한 시나리오 구성, 등장인물의 취약성으로 말미암아 흥행에서 참패를 당하였다. 
영화란 아무리 뛰어난 기술, 음향효과가 있다 할지라도 일단 이야기거리가 그럴듯하고 주연배우들의 연기가 뛰어나야 흥행에 성공할 수 있는데, 그런 면에서 볼 때 "트론"은 낙제점을 면치 못했던 것이다. 
이러한 "트론"의 실패는 그 동안 컴퓨터영화에 약간의 기대를 가지고 헐리우드를 기웃거리던 많은 사업가들의 발걸음을 돌리게 했으며, "트론"을 제작한 그래픽스팀에게 좌절을 안겨주었다. 
영화가 아닌, 기껏해야 2분 정도 반짝하고 사라지는 텔레비전 광고나 뉴스 타이틀과 같은 분야의 종사자들에게 "트론"은 새로운 길을 열어주었다. 
"트론"의 개발자 중 한 사람인 테일러는 "그것은 영화산업의 기술부분에서 르네상스의 시작을 알리는 종소리였습니다"라고 말했다. 
이후 "마지막 우주전사"라는 영화가 다시 컴퓨터를 이용하여 제작.개봉되었는데, 이는 나름대로의 성공을 거두었지만 제작비용은 여전히 줄어들지 않아 헐리우드의 회의적인 태도 역시 여전했다. 
그러나 "별들의 전쟁"을 만든 루카스감독은 루카스필름 내에 컴퓨터부서를 설치하고 뉴욕 공대의 저명한 그래픽스 전공학자를 4명이나 끌어들였다. 
그 첫번째 작품은 1984년 캐나다에서 열린 만화영화 축제에서 선보인 "앙드레와 위리의 모험"이었는데, 그 영화제작을 위해서 슈퍼컴퓨터인 크레이에 사용된 중앙처리장치가 무려 16대나 동원되었다. 
이후 루카스필름에서는 1985년에 컴퓨터영화제작용 전문컴퓨터를 Pixar란 이름으로 발표하였다. 
그리고 뛰어난 능력과 속도로, 대당 1000만 달러의 크레이 X-MP보다도 뛰어난 이 컴퓨터를 10만 달러의 가격에 판매하였다. 
Pixar는 현재 천연자원 탐사회사나 병원 등에서 사용되고 있다. 
연이어 1986년에는 레이스(Reyes)라는 컴퓨터를 발표하였는데, 이 그래픽스전용 컴퓨터는 슈퍼컴퓨터 크레이 X-MP보다 무려 1000배나 빠른 화면속도를 보였다. 
이것을 이용해서 만든 영화가 최근 국내에도 개봉된 바 있는 루카스필름의 "누가 로저 래빗을 모함했는가?"라는 
영화였다. 
필자의 느낌으로는 그 영화가 영상기술은 뛰어났지만 아직도 줄거리 전개 면에서 많이 부족하다는 생각이 들었다. 
아직도 컴퓨터영화는 기존의 수공업식 애니메이션영화를 컴퓨터로 처리한 것에 불과한 듯했다. 
컴퓨터영화가 본격적으로 환영을 받기 위해서는 컴퓨터영화에 알맞은 시나리오가 있어야 할 것이다. 
최근 자연현상을 묘사하기 위한 프랙탈(fractal)기법이 새롭게 소개되고 있다. 
이전까지의 전통적인 그래픽스기술은 직육면체나 구, 원뿔 등과 같이 수학적이거나 기하학적으로 매끈한 물체를 그리기에는 좋았으나 구름, 나뭇잎, 자연적인 산등성이나 해안선의 굴곡 등을 그리기에는 부적합했다. 
왜냐하면 자연계에 있는 대부분의 물체는 매우 불규칙하기 때문에 기존의 수식에 의한 모델링기법으로 그려내려면 지나치게 많은 함수식이 필요했기 때문이다. 
프랑스인 베누아 만델브로트(Benoit Mandelbrot)는 이것을 극복하기 위해서 기존의 차원개념을 더 확장하였다. 
그는 1차원(선), 2차원(면)이 아닌 1.5차원이나 2.3차원 등 유리수의 차원을 가지는 물체를 새롭게 정의하여 프랙탈기하학(fractal geometry)을 완성하였다. 
프랙탈기법으로 구성된 물체의 차원 D는 다음과 같이 정의된다. 
N은 프랙탈로 그려질 물체의 기본단위가 세분화될 때 다음 단계에서 축소될 기본단위의 개수이다. 
그리고 r은 한 단계씩 세분화되면서 축소되는 기본단위의 축소비율이다. 
154면의 그림은 1.5차원과 1.6차원의 물체가 생성되는 단계를 몇 차례 보여주고 있다. 
그 세분화 작업은 무한히 계속될 수 있다. 
프랙탈기법을 응용하면 여러 가지 재미있는 모형을 만들 수 있다. 
예를 들어 그가 만든 만델브로트집합에서는 그림의 어떤 부분을 확대해도 그것은 전체 모양을 가지고 있고, 이 과정을 무한히 반복해도 마찬가지의 모습이 나온다. 
자기상사성(self-similarity)이라고 불리는 이 성질은 자연계의 커다란 특성이다. 
프랙탈은 궁극적으로 자연계의 자기상사성을 수학적으로 구성한 것이다. 
사물계에서도 자기상사성은 쉽게 관찰된다. 
즉 뾰족한 나무잎이 달려 있는 나무의 전체 모습은 그 하나하나의 나무잎과 닮아 길고 뾰족하다. 
반면 플라타너스나무가 그렇듯이 널따란 잎을 가진 나무의 모양은 대개 둥그스름한 형태이다. 
태양계에서 행성이 태양을 중심으로 도는 것과 미시의 세계인 원자의 세계에서 전자가 핵주위를 도는 것이 유사한 것도 자연계의 자기상사성을 보여주는 좋은 예이다. 
프랙탈로 그려진 산과 행성의 자연스런 모습은 우리를 놀라게 한다. 
그래픽스는 자연계를 더 완벽하게 묘사하기 위해 계속 발전하고 있다. 
광선추적기법(ray tracing)과 프랙탈 등 새로운 기술로 머지않아 우리는 거의 실물과 구별할 수 없을 정도로 자연스럽고 정교한 화면을 보게 될 것이다. 
앞장의 유화그림은 사실 사진을 입력하여 자연스런 붓자국이 나도록 만든 그림이다. 
이뿐만 아니라 그래픽스는 의학에서 위험한 수술과 그 결과를 예측하는 데에도 사용되고 있으며, 분자구조의 해명과 화학실험의 묘사에 이르기까지 널리 쓰이고 있다. 
향후 20여 년 간은 컴퓨터그래픽스의 시대가 될 것이다. 
매캐한 봉화연기 속에서 시린 눈으로 시작된 통신의 역사는 인류의 군집생활이 시작된 만큼이나 오래되었다. 
원시시대에 사용된 통신수단은 북이나 나팔 등이었으니, 악기가 통신수단도 겸했다고 할 수 있겠다. 
지금도 알프스지방에서 볼 수 있는 목이 기다란 나팔은 악기라기보다는 건너편 산으로 특정한 메시지를 전달하는 기구였다고 한다. 
더 체계적인 통신수단이 등장하게 된 것은 국가성립 이후이다. 
한 나라를 다스리는 데 필요한 중요수단은 문화적인 것, 즉 문자의 통일과 명령의 효율적인 전달체계이기 때문에 고대국가에서는 통신수단을 국가단위로 관리하기 시작했다. 
그래서 파발마라든지 봉수대 등은 나라에서 관리하였다. 
그리고 개인적으로 사람을 통하기도 했고 통신비둘기 등도 이용되었다. 
전기를 이용한 최초의 통신은 1840년대에 미국사람인 모르스와 베일에 의해서 시작되었다. 
이후 전기는 현대에 와서 레이저광선에 의해서 부분적으로 대체될 때까지 모든 통신의 매개체로 확고한 위치를 차지하게 되었다. 
1844년에 역사적인 전신(telegram)이 드디어 워싱턴에서 볼티모어까지 전달되었다. 
그리고 1851년에는 미국대륙을 동서로 횡단하게 되었다. 
이후 전신은 몇 가지 단점을 개선할 목적으로 텔레타이프로 대치되기 시작했다. 
전신은 보내는 메시지를 몇 개의 약정된 부호(주로 모르스부호)로 바꾼 뒤, 숙달된 전신기사의 손동작으로 상대방 지역에 전달한다. 
이렇게 전달된 모르스부호는 다시 송신과정의 역과정을 거쳐서 원래의 메시지로 바뀌게 된다. 
그러면 이러한 과정에 어떤 단점이 있는가 생각해보자. 
먼저 문자를 부호화하는 데에는 어느 정도의 숙달이 필요하다. 
따라서 모르스부호를 알지 못하는 사람에게는 송신기가 무의미하다. 
또한 그 속도도 상당히 불만스러웠다. 
이에 대한 해결책으로 한쪽에서 타이프를 치듯이 자판을 두들기면 상대편의 타이프라이터의 글쇠가 원하는 대로 움직여주는 방식이 나오게 되었다. 
이것이 텔레타이프의 기본원리이다. 
텔레타이프를 처음 만든 사람은 뉴질랜드 출신의 도널드 머레이(Donald Murray)라는 기사였다. 
최초의 작품은 원통형의 글판을 손으로 돌리는 정도로 조악했다. 
주위에선 재봉틀과 손풍금의 합작이라는 둥, 소세지 제조기라는 둥의 혹평을 했지만 머레이는 이에 굴하지 않고 개량을 거듭하여 상당한 수준으로 발전시켰다. 
그 시대에는 초당 약 7∼8자 정도를 보낼 수 있었는데 현재 디지털컴퓨터에 의한 통신은 초당 200만 자 정도를 보낼 수 있으니 그 발전속도에 우리는 놀라움을 금치 못한다. 
초당 200만 자라면 웬만한 소설책 두세 권 정도는 눈 깜짝할 사이에 전달된다. 
텔레타이프는 다시 종이테이프라는 매체를 이용해서 속도의 증가를 꾀하였다. 
텔레타이프는 이후 벨에 의해서 전화가 발명됨에 따라 크게 진보하였다. 
벨은 이미 깔려 있는 전신용 선로를 이용해서 음성정보를 보내 서로 상대방의 음성을 직접 들을 수 있도록 하였다. 
벨의 방식에서 한 가지 획기적인 것은 한 도선에서 서로 다른 전파를 서로 다른 주파수 대역으로 보낸다는 것이다. 
이것은 다음과 같은 원리에서 가능하다. 
사람의 목소리는 대개 초당 200에서 3000 정도의 주기적인 진동을 하는데, 이 단위를 보통 헤르쯔라고 부른다. 
다른 소리의 경우, 피아노 건반의 높은 쪽은 사람의 목소리보다 높은 주파수를 가진다. 
따라서 한 전선에 전신정보나 텔레타이프정보는 더 높은 주파수 대역으로, 인간의 육성은 그보다 높은 또는 훨씬 낮은 주파수 대역으로 실어보낼 수 있는 것이다. 
비슷한 예를 들어보자. 
커다란 수도관이 있는데, 이 수도관으로 기름과 물을 보낸다고 하자. 
기름은 물 위에 뜨는 성질이 있으므로 두 개의 액체는 섞이지 않아 따로따로 받을 수 있을 것이다. 
두 개의 액체가 서로 섞이는 성질이 적을수록 일은 더욱 쉬워진다. 
만일 섞일 가능성이 다소 있는 여러 종류의 액체를 넣는다면, 여러 종류의 액체를 한 관으로 동시에 전달할 수 있다는 장점이 있긴 하지만 잘못하면 뒤엉켜 상대편은 아무런 의미가 없는 물질을 받을 수도 있을 것이다. 
이와같은 원리로 한 전선에 매우 인접한 대역폭을 선택해서 여러 종류의 메시지를 한꺼번에 보내면 각 전자파의 간섭현상으로 말미암아 부호들이 뒤엉키기도 한다. 
이렇게 한 전선으로 여러 가지 메시지를 동시에 보내는 방식을 우리는 주파수분할 다중화방식에 의한 통신이라고 말한다. 
지금도 컴퓨터통신에 기존에 가설되어 있는 전화선을 사용하는 경우가 많은데, 아직 불완전한 선로 사정으로 인해 오접이나 중간에 불필요한 잡음이 많이 섞여든다고 한다. 
벨의 공로로 전기에 의한 본격적인 통신의 시대가 시작되었다. 
그뒤 진공관의 도입으로 주파수분할 다중화방식에 의한 통신은 더욱 빨라지게 되었다. 
여기에서 우리가 반드시 알고 넘어가야 할 기계가 모뎀(modem)이라는 기계이다. 
모뎀은 modulator-demodulator에서 만들어진 단어로, 기계의 주된 역할은 디지털신호를 아날로그신호로 바꾸어 전송해주고 다시 아날로그신호를 디지털로 바꾸어주는 것이다. 
여기에서 아날로그신호란 1.5 Volt, 1.409 Volt 등 연속량을 가진 수치신호를 말한다. 
이런 아날로그신호를 바로 보내게 되면 중간의 잡음으로 인해서 많은 자료가 유실된다. 
컴퓨터신호의 장거리전송이 등장하기 시작한 것은 1940년대부터이다. 
1940년대부터 급격히 발달하여 보급되기 시작한 컴퓨터의 가격은 그때만 하더라도 엄청나게 비쌌다. 
그래서 정부 출연의 연구소라든지 정부기관 자체에서 어쩔 수 없는 필요에 의해서만 겨우 컴퓨터를 설치할 정도였다. 
따라서 컴퓨터에서 멀리 떨어진 곳의 경우, 새로 한 대의 컴퓨터를 설치하는 것보다 전화선을 통해서 컴퓨터를 이용하는 것이 비용이 절감되었다. 
이런 일에 뛰어든 사람은 죠지 스티비츠라는 벨연구소의 젊은 수학자였다. 
그는 복소수계산을 할 수 있는 디지털컴퓨터를 만들었는데, 그 성능이 뛰어나서 같은 건물 내의 여러 층에서 텔레타이프를 연결, 많은 수학자가 공용할 수 있었다. 
스티비츠의 복소수계산기는 여러 수학자를 매료시키기에 충분하여 한 학술대회에서 그 성능을 선보이기로 하였다. 
이런 기회에 스티비츠는 아예 멀리 떨어져 있는 자신의 복소수계산기에 전신을 통해 직접 계산을 해보이기로 하였다. 
비록 250마일간을 연결하는 전용케이블 설치가 약간 문제가 되긴 하였으나, 보통의 전신회로를 사용하기로 하였다. 
1940년 9월 11일에 스티비츠는 장거리계산의 시범을 많은 관중들 앞에서 성공적으로 마쳤다. 
스티비츠의 동료 윌리엄스가 테이블 위에 준비된 텔레타이프를 두드린 지 1분도 채 되지 않아서 멀리 뉴욕에 설치된 복소수계산기의 계산결과가 전달되었다. 
이것은 컴퓨터가 통신에 이용되는 하나의 획기적인 전기를 이루었다. 
그런데 몇 가지 문제가 있었다. 
당시 상황으로 볼 때 전송속도가 큰 문제가 아니긴 했지만, 스티비츠시스템의 전송속도는 텔레타이프의 전송속도보다 느렸다. 
이러한 문제점은 제 2 차 세계대전이 끝날 무렵에 해결될 기미를 보였다. 
그래서 대형의 계산기를 따로 설치하는 것보다는 강력한 모뎀을 설치하여 서로 번갈아가면서 컴퓨터를 사용하는 것이 더 경제적인 방법으로 자리잡았다. 
그러나 2차대전이 끝나고 더 고속의 디지털컴퓨터가 개발됨에 따라서 모뎀의 성능도 더욱 빨라지도록 압력을 받았다. 
모뎀의 획기적인 발달은 1950년대 최초의 대규모 컴퓨터네트워크인 SAGE 시스템이 방공경보장치로서 개발되면서부터 시작되었다. 
그 전체 통제를 담당할 중심컴퓨터로는 MIT 휠원디의 리얼타임컴퓨터가 선택되었다. 
과학사에서, 특히나 현대로 오면 올수록 거대한 과학적 발전은 군수산업에서 시작되는 경우가 많은데 통신의 발달도 그런 예에 속한다고 해야 할 것이다. 
SAGE는 약 1500만 마일이나 되는 거대한 통신선로를 가지고 있었다. 
그런데 대공방어망에서 자료처리속도는 바로 전쟁 전체의 승패를 좌우할 만큼 중요한 문제였기 때문에, 각 레이더기지에서 받아들여진 정보를 중앙의 컴퓨터로 보내고 또 빨리 받아볼 수 있게 하는 고속의 모뎀개발은 극히 중요한 일이 되었다. 
그러나 지나치게 전송속도를 빨리 하려다 보면 앞뒤의 0과 1의 디지털신호가 서로 붙어서 수신측에서 무슨 신호였는지를 알 수 없게 된다. 
따라서 선로의 용량과 거리에 따라서 전송속도에는 어느 정도의 제한이 있기 마련이었다. 
이러한 문제점을 1964년 벨연구소에 있는 럭키(Lucky)라는 운좋은 이름을 가진 연구원이, 전송하기 전 선로상태를 점검해주는 약 1∼2초간의 트레이닝 시간을 줌으로써 해결하였다. 
럭키의 업적으로 전화선을 통한 모뎀은 초당 9600비트를 보낼 수 있게 되는 획기적인 발전을 이룩하였다. 
이는 최초의 전송속도에 비해서 무려 200배나 빨라진 결과이다. 
정보처리용 제반 장치, 예를 들면 컴퓨터, 출력장치 등의 발전 방향은 크게 세 가지이다. 
하나는 속도의 획기적인 발전이고, 그 다음은 기계장치 자체의 소형화 그리고 가격의 급락을 들 수 있다. 
모뎀도 마찬가지로 초기의 책상만한 크기에서 최근에는 도시락만한 크기로 엄청난 소형화작업이 계속 진전되어왔다. 
이런 추세라면 모뎀이 중앙처리장치 내의 단 한 개의 칩으로만 구현된 형태의 컴퓨터가 나올 법도 하다. 
아마 향후 10년 이내에는 달성될 수 있으리라 본다. 
모뎀이 이렇게 소형화되고 값싸진 것은 비싸고 덩치 큰 모뎀의 사용에 불편을 느낀 반긴(Van Gin)이라는 연구원에 의해서이다. 
이전에는 모뎀을 한번 사용하려면 그것이 설치된 장소의 터미널까지 가야 했고, 모뎀의 위치를 조금이라도 움직이려면 그때마다 전화국 배선공을 새로 불러야만 했다. 
모뎀의 출현으로 말미암아 생활에도 적지않은 변화가 생겼다. 
이제는 출근하지 않고 집안에 앉아서 컴퓨터 터미널에 연결된 모뎀을 통하여 회사의 업무를 처리할 수도 있고, 집안에 앉은 채로 주식시세, 각종 문화행사, 백과사전류의 지식들을 접할 수도 있으며, 타국의 여행정보와 비행기표 예약까지 가능하게 되었다. 
미국에서는 컴퓨서브(Compuserve)와 더 소스(The Source)라는 대기업이 위와 같은 정보시장의 관리인 역할을 톡톡히 하고 있다. 
이런 면에서 본다면 프랑스는 미국보다 한수 위라고 할 수 있겠다. 
프랑스에서는 1980년대 중엽에 이미 뗄레뗄이라는 컴퓨터통신시스템이 전국적으로 가동되기 시작했다. 
또한 직장에는 미니뗄(Le Minitel)이라는 통신용 전문단말기가 설치되어 상당부분의 관용업무가 이미 컴퓨터통신망으로 해결되었다. 
집안에 앉아서 은행의 잔고도 조사할 수 있고 새옷과 음식물을 주문할 수도 있으며 일기예보를 물어볼 수도 있었다. 
더 나아가서 친구끼리 통신도 가능했는데, 이러한 통신을 전자우편이라고 한다. 
만일 내가 갑돌이에게 전자우편으로 편지를 보내고 싶다면 쓰고 싶은 내용을 파일로 만들어 갑돌이가 가입해 있는 컴퓨터통신망을 통해 보낸다. 
그러면 그 파일은 갑돌이가 가지고 있는 컴퓨터의 보조기억장치 중 특정한 부분에 기록된다. 
따라서 갑돌이는 그 특정한 보조기억장치 부분만을 뒤짐으로써 내가 보낸 편지를 찾아낼 수 있다. 
그리고 관심 있는 사람들끼리 몇 개의 소모임을 결성해서 자신들의 관심사에 대해서 집중적으로 토론해볼 수도 있다. 
여기서는 마치 전화번호부를 제공해주듯이 컴퓨터(뗄레뗄)에 가입된 회원의 전자주소부(전자통신시에 수신자로 보낼 컴퓨터시스템의 주소가 수록된 책)를 나누어주어 통신에 서로 도움이 되게 한다. 
조사에 의하면 텔레텔이 제공하는 서비스의 종류는 모두 1000여 가지가 넘으며 단 1년 만에 총사용량이 무려 10배나 신장할 만큼 획기적인 발전을 보였다. 
뗄레뗄의 사용료는 대체로 전화회선을 1분간 사용하는 데 약 13센트 정도이다. 
국내에도 한국데이터통신에서 제공해주는 천리안통신 등 몇 가지 정보제공이 일반가정에까지 이루어지고 있지만 활발히 사용되지는 않고 있다. 
젊은 층을 중심으로 파송신청 등에 사용되고 있을 뿐이다. 
그리고 여러 그룹들이 개별적으로 운영하는 사설 전자게시판시스템이 있는데, 전자게시판이란 공지사항을 서로 알리기 위해서 한 컴퓨터나 몇 대의 컴퓨터를 게시판으로 사용하는 일종의 네트워크프로그램이다. 
예를 들면 컴퓨터 부품을 싸게 판다든지 또는 필요한 것이 어떤 것인지를 알릴 때 전자게시판을 이용하면 그 어떤 포스터를 이용한 광고 못지 않은 효과를 낸다고 한다. 
특별히 공통된 관심을 가진 사람들이 만든 소규모 모임인 전자뉴스그룹에 대한 정보를 살펴보니 이들 중에는 농담만 전문적으로 주고받는 그룹도 있고 정치, 미술, 음악, 음악도 고전음악과 팝음악별로 관심에 따라 많은 그룹들이 있었다. 
필자가 가입한 그룹은 net. 
theory라는 그룹인데, 전산학이론에 관해서 서로 관심을 나누고자 하는 사람들로 구성되어 있다. 
한 뉴스를 컴퓨터를 이용해서 띄우면 며칠 지나지 않아서 여기저기로부터 답장이 컴퓨터 내로 도달한다. 
보통 특급항공우편으로 보내도 이틀은 족히 걸리는 거리인데도 하루 반나절쯤이면 전자편지나 뉴스에 관한 답장이 도달하는 것이다. 
또 외국의 컴퓨터와 인공위성을 통해서 연결해두면 다른 나라의 컴퓨터를 원격으로 직접 사용할 수도 있으니 놀라운 일이 아닐 수 없다. 
최근 들어서는 광섬유를 통해서 더 많은 양의 정보를 더 안전하게 전달할 수 있는 방법에 관한 연구가 진행되고 있다. 
광학적인 자료를 전자적 신호로 바꾸어 현존의 전자계산기로 계산하는 것이 아니라, 광학적 소자로 바로 계산만 할 수 있다면 통신에는 또 한 번의 혁명이 생겨날 것이다. 
나아가 광섬유에 관한 연구가 더 진전되어 대서양을 가로지르는 해저케이블이 가설된다면 현재의 인공위성을 통한 통신보다 더 싸게 처리할 수 있으리라 예상된다. 
컴퓨터를 이용한 통신의 시대가 활짝 꽃피었다. 
그래서 컴퓨터를 이용하지 않은 통신은 갈수록 힘들어지게 되었다. 
또 이런 통신의 발달로 생활방식도 많이 달라졌다. 
그러나 컴퓨터를 이용한 통신도 몇 가지 단점을 가지고 있다. 
모든 시민이 컴퓨터를 가지고 있지는 않은 상태 또는 가지고 있더라도 통신시스템에 연결하지 않았거나 서로 다른 통신서비스회사를 이용하고 있다면 컴퓨터통신으로 전해줄 방법이 전무하다. 
그리고 아직도 컴퓨터가 비교적 고가품이므로 모든 정보의 흐름이 첨단장치로만 편중되어 부의 불균형이 더욱더 심화돼 결국에는 사회 갈등구조가 첨예해질 수도 있을 것이다. 
또 서로 얼굴을 마주보고 이야기하는 것이 아니므로 감정교환이 쉽지 않다는 점도 있다. 
그러나 이에 대해서는 감정교환이 더 쉽다고 이야기하는 사람도 있다. 
미국의 한 대학생은 캠퍼스 내의 전자우편서비스를 통해서 연애결혼에 성공했다고 한다. 
물론 얼굴을 한 번도 보지 못했을 것이므로 약간 극단적인 예라고 생각한다. 
필자의 생각으로는 전자통신시대가 인간대화에 부분적으로는 도움이 될 것 같다. 
예를 들면 신분노출을 꺼리고, 또 노출되지 않는 것이 사태해결에 도움이 될 수도 있는 성병이나 정신병 상담 같은 것을 들 수 있겠다. 
그러나 전반적으로는 다소 개인적이고 더 고립된 사회적 분위기가 나타나리라 전망된다. 
또 전자우편의 정보파급 효과를 감안해 사회공익적 성격이 충분히 강조되어야 할 것이다. 
왜냐하면 반사회적 광고나 무분별한 광고행위는 컴퓨터가 가지는 전달속도와 사용의 용이성 면에서 볼 때 기존의 통신매체에서보다 더 심각한 악영향을 줄 수 있기 때문이다. 
전산전공자들이 주위 사람들로부터 가장 많이 듣는 부탁 중의 하나가 "좋은 컴퓨터를 골라달라"는 것이다. 
좋은 컴퓨터라 …… 좋은 컴퓨터란 어떤 컴퓨터일까? 
컴퓨터는 냉장고나 세탁기와는 다르다. 
가전제품과는 값에서도 차이가 나지만 사가지고 와서 전기만 넣어주면 당장 작동이 되고 요긴하게 쓰일 수 있는 것이 아니라는 차이도 있다. 
막연한 기대에 들떠 컴퓨터를 사는 사람들은 나중에 그 사용방법의 복잡함과 다양함에 질려서 낭패를 보기 쉽다. 
그러면 먼저 어떤 종류의 컴퓨터를 사야 할 것인지에 대해서 알아보자. 
그 이전에 우리는 컴퓨터를 어떤 목적으로 사용할 것인가를 반드시 고려해야 한다. 
그냥 남들이 사니까, 또는 일단 사두는 것이 좋을 것 같아서 컴퓨터를 사면 틀림없이 손해를 보게 된다. 
왜냐하면 컴퓨터 가격은 갈수록 떨어지기 때문에 그냥 사두고 사용하지 않으면 그만큼 손해이기 때문이다. 
일반인들의 컴퓨터 용도는 크게 워드프로세스기능과 경영정보처리로 나눌 수 있다. 
그리고 필자가 보기에는 가정에서 쓸 수 있는 용도는 아직 거의 없다. 
가계부를 컴퓨터로 쓴다든지 하는 작업은 손으로 종이에 적는 것보다 오히려 더 번거롭기 때문이다. 
가정이나 개인이 경영하는 소규모업체라면 개인용컴퓨터 AT급 정도면 충분하다. 
그리고 직원이 40∼50명 정도, 예를 들면 중고등학교나 중소기업체 중에서도 약간 규모가 큰 정도라면 개인용컴퓨터를 3∼4대 정도 사서 근거리통신망으로 묶어 사용하든지, 아니면 개인용 워크스테이션을 구입하는 것이 좋다. 
최근 워크스테이션가격이 많이 하락하고 있는 반면 처리속도나 기억용량은 증가되는 추세이므로, 워크스테이션은 머지않아 개인용컴퓨터 AT급 정도로 흔해질 것이다. 
그보다 큰 기업체라면 소형컴퓨터를 한 대 사든지 아니면 여러 대의 워크스테이션을 사서 서로 연결해 사용하든지 해야 할 것이다. 
앞으로는 워크스테이션을 여러 대 사고, 좋은 네트워크 소프트웨어를 사용해서 분산적으로 업무를 처리하는 것이 바람직할 것 같다. 
그외의 연구소나 대학교 정도라면 충분히 용량이 큰 컴퓨터를 선택해야 할 것이다. 
이런 과정은 보통 컴퓨터 도입 심의위원회 같은 소모임을 따로 만들어서 처리하는 것이 관례이다. 
대형일수록 한꺼번에 많은 돈을 주고 사는 것보다는, 일정기간 빌려 쓰는 것이 좋은 방법이 될 수 있다. 
큰돈을 주고 구입한 기계라도 더 값싸고 성능이 뛰어난 컴퓨터가 나온다면 곧 구형이 되어버리므로 약 10여 년 정도는 잘 예측해서 결정해야 한다. 
그리고 특히 수치계산을 많이 해야 한다면 국내에 설치된 슈퍼컴퓨터의 계정을 얻어서 사용하는 것이 유리하다. 
중요한 것은 컴퓨터회사에서 제공하는 성능평가표에 지나치게 의존하지 말라는 것이다. 
직접 한번 사용해보거나 그 제품을 써본 사람에게 물어보는 것이 좋다. 
필자의 느낌으로는 많은 사람들이 자신의 필요 이상으로 강력한 컴퓨터를 구입하는 듯하다. 
하루에 작업하는 시간이 고작 평균 한 시간도 채 되지 않는 사람이 386머쉰이니 매킨토시와 같은 고가품을 구입하는 것을 보면 허영으로 사는 것이 아닌가 생각된다. 
돈이 적다면 몇 명이 모여서 AT급 정도를 한 대 사서 잘 돌려 쓰면 될 것이다. 
이제부터는 개인용컴퓨터에 대해서만 이야기하기로 하자. 
개인용컴퓨터는 대기업제품과 복제품 등 크게 두 종류로 나눌 수 있다. 
애프터서비스가 확실하게 보장된다면 복제품도 추천할 만하다. 
그러나 지나치게 싼 것은 일단 의심해볼 필요가 있다. 
중앙처리장치는 크게 문제가 되지 않으나 값싼 칩을 사용한 것은 오래 사용하면 회로가 파손되는 경우가 있다. 
그리고 가장 쉽게 고장이 나는 하드디스크 드라이브는 약간 비싸더라도 믿을 수 있는 회사의 제품을 사는 것이 좋다. 
값싼 드라이브나 다른 사람이 쓰던 것을 사용하다 하드디스크가 긁히기라도 한다면 큰 손실을 입을 수 있기 때문이다. 
또 한 가지 지적하고 싶은 것은, 특히 학생층에서 문서작업만을 하기 위해서 워드프로세서(word processor)를 구입하는 경우가 많다. 
그런 전용 워드프로세서는 약간의 컴퓨터기능에다 전자식 타자기의 기능을 덧붙인 것인데, 물론 컴퓨터를 사는 것에 비해서 값이 싸긴 하지만 차라리 조금 더 투자해 값싼 컴퓨터를 구입하는 것이 좋다. 
그리고 상대적으로 질이 떨어지는 프린터가 붙어 있는 워드프로세서를 구입하기보다는, 일단 프린터를 제외한 컴퓨터를 구입해 워드프로세싱 소프트웨어로 작업을 한 뒤 좀더 좋은 질의 프린터를 빌려서 찍어내는 것이 낫다. 
프린터란 항상 사용하는 것이 아니기 때문에 그렇게 어렵지 않게 빌려쓸 수 있기 때문이다. 
최근 기존의 도트프린터의 질과는 비교할 수 없을 정도로 뛰어난 레이저프린터가 시판되고 있다. 
앞으로 더 나은 성능을 지닌 레이저프린터가 더욱 싼 값으로 공급될 것이다. 
이런 추세 속에서 다른 기종과 호환도 되지 않고 거의 독립적으로밖에 쓸 수 없는 워드프로세서를 산다는 것은 아무래도 손해인 듯하다. 
현재 레이저프린터의 가격은 대당 약 200만 원씩이나 된다. 
그러나 인쇄의 질로 볼 때, 특히 고급스런 문서나 도표를 작성해야 하는 곳에서는 레이저프린터가 거의 필수적으로 갖추어야 될 기구이다. 
우리는 앞에서 컴퓨터의 운영체제가 매우 중요하다는 사실을 알았다. 
개인용컴퓨터의 운영체제로는 대부분 MS-DOS시스템이 사용되고 있다. 
MS-DOS시스템은 운영체제의 크기가 작다는 점과 사용자가 배우기 쉽다는 장점이 있는 반면에, 각 파일마다 보호장치가 허술하고 컴퓨터바이러스에 쉽게 감염될 수 있다는 단점이 있다. 
이외에는 개인용컴퓨터 운영체제로서 개발된 UNIX계열의 XENIX나 System V, SCO UNIX 등이 있는데, 이 시스템들은 현재 세계적으로 가장 널리 쓰이는 UNIX시스템과 같은 계열이라는 큰 장점이 있다. 
개인용컴퓨터의 운영체제로 쓰기엔 다소 덩치가 크고 관리하기가 까다로운 단점이 있으나 한번쯤 익혀두는 것도 좋다. 
이 둘 외에는 별다른 운영체제가 없다. 
운영체제를 구입하면 소프트웨어가 딸려오는 것이 아니므로 소프트웨어는 따로 구입하여야 한다. 
구입해야 할 프로그램은 대개 워드프로세싱기능과 데이터베이스 프로그램, 자체고장진단 프로그램, 컴파일러 그리고 각종 유틸리티를 들 수 있다. 
대학생 신분이라면 대부분의 학교에서 개설하고 있는 전산개론이나 유사한 교양과목을 수료하면 대강 감을 잡을 수 있다. 
그러나 우리나라 대부분의 실습기자재 실태가 아직 꼼꼼하게 배우기에는 크게 못 미친다. 
컴퓨터를 가장 확실하게 잘 배울 수 있는 길은 자기 혼자서 익히는 길이다. 
그렇지만 얌전히 앉아서 책부터 차근차근 이해하고 나서 뿌듯한 기분으로 컴퓨터 앞에 앉는다면 아무것도 해볼 수 없을 것이다. 
제일 좋은 학습법은 책에서 지시한 내용을 바로 컴퓨터로 실습해보는 것이다. 
그렇게 하면 재미도 있고 기억에도 오래 남는다. 
혼자서 공부하기에 적당한 교재를 찾는 것도 쉬운 일은 아니다. 
최근 들어 쏟아져나온다고 해야 할 정도로 많은 교재가 나오고 있다. 
되도록이면 예제가 풍부하고 저자가 확실한 책을 사는 것이 손해를 보지 않는 길이다. 
그리고 여러 권의 책을 사서 어지럽게 배우는 것보다는 한 권의 책을 꼼꼼히 살펴보는 것이 좋다. 
또 일일이 예제프로그램을 짜보는 것도 도움이 되지만 예제프로그램을 디스켓에 담아서 파는 책도 좋다고 생각한다. 
좋은 책은 이것저것 잡다한 설명들이 많은 책보다 시스템매뉴얼(system manual) 등과 같이 전통적인 책이다. 
처음 보기에는 조금 힘들지 모르지만 시스템매뉴얼을 읽는 데에 익숙해지는 것이 좋다. 
또 어떤 프로그램은 자체교육용프로그램이 따로 있다. 
필자의 경험으로는 이 교육용프로그램으로 배우는 것이 더디고 답답할 때가 많은데, 그것은 사람들이 일반적으로 사람에게 배우는 데 익숙해져 있기 때문이다. 
그래서 마음대로 질문을 할 수 없는 단점을 가진 교육용프로그램에 익숙하지 않은 것이다. 
그러나 사람들에게 물어보는 것이 손쉬운 방법이긴 하나 혼자서 이것저것 건드려서 터득하는 것이 더 필요하다. 
컴퓨터광들은 대부분 하루종일 혼자 컴퓨터를 붙들고 앉아서 별로 매뉴얼을 뒤적이지 않고서도 많은 것을 배운다. 
이렇게 호기심을 가지고 여러 가지 시도를 과감히 해보는 것이 컴퓨터를 배우는 데 매우 필요한 것이다. 
일반적으로 학습자의 연령이 어릴수록 이것저것을 함부로 건드려본다. 
국민학교 학생들을 한 번 가르칠 기회가 있었는데 가장 어려운 점은 영어를 쓸 수 없다는 점이었다. 
예를 들면 '프린트'라든지 '리턴키' 같은 단어를 함부로 쓸 수 없어서 그것을 한국어로 바꾸어주는 일이 꽤나 힘들었다. 
이것저것 물어보고 시끄럽게 구는 바람에 전체수업이 잘 진행되지 않아 진도는 느렸지만 대부분 자기들끼리 묻고 떠들기 때문에 배우는 속도는 매우 빨랐다. 
반대로 40대 이상의 중년층을 위한 강의를 가보면 항상 조용하고 진지하게 듣는 것처럼 보이지만, 좀처럼 자판을 두드려보려고 하지 않으며 두드리더라도 매우 신중해보인다. 
칠판에 간단한 예제를 주고서 한번 해보라고 권하면 한 자도 틀리지 않게 해놓지만 더 이상의 다른 시도 그러니까 약간씩 고쳐서 해본다든지, 적당히 틀리게 해서 오류메시지를 받아보는 등의 시도는 전혀 하지 않고 그냥 쉬고 있다. 
필자가 직접 터미널을 살펴보면 어떤 사람들은 아무런 작업도 하지 않고 시종 칠판에 있는 것을 받아적고 있다. 
또 틀린 결과가 나오면 터미널스크린을 꺼버린다. 
이런 행동을 하는 사람들의 공통적인 생각은 혹시나 내가 컴퓨터를 고장이라도 내지 않을까, 또는 칠판에서 지시한 사항 외에 다른 키를 건드리면 괴상한 결과가 나타나서 창피를 당하는 것이 아닐까 하는 것이다. 
컴퓨터는 다른 기계와 달라서 프로그래밍 과정에서는 웬만큼 잘못해도 그것으로 인해서 전체시스템이 못쓰게 되는 예는 거의 발생하지 않는다. 
설사 이상한 상황이 벌어져서 모니터스크린에 괴상한 문자가 빽빽이 나타나더라도 껐다가 켜면 원상태로 돌아온다. 
그러므로 고장에 대해서 필요 이상으로 걱정할 필요는 없다. 
프로그래밍과목은 대부분 전산학과 학부 2학년 정도에서 개설된다. 
전공자들과 섞여서 한 학기 정도만 따라가면 상당히 많은 것을 배울 수 있고, 그것을 성공적으로 마친다면 어느 정도 자신감을 가지게 될 것이다. 
그리고 학점과 시간에 여유가 있다면 전산학과의 전공 중에서 한 과목 정도 더 들어보는 것도 좋다. 
전산학의 핵심과목은 사람들마다 약간씩 다르게 느낄 수 있지만 필자의 생각으로는 '전자계산기구조'와 '자료구조'가 아닐까 한다. 
'전자계산기구조'는 하드웨어시스템 전체에 대해서 설명하며, 컴퓨터가 어떻게 작동되는지에 대해서 설명해준다. 
또 만일 컴퓨터를 다른 기계장치와 접속해 작업(예를 들면 자동온도측정기라든지 자동제어장치)을 할 경우 상당한 정도의 하드웨어 지식이 필요하기 때문에 '전자계산기구조'는 필수적이다. 
그리고 '자료구조'는 좀더 효율적이고 제대로 된 프로그램을 짜기 위해서 꼭 배워야 할 과목이다. 
자료구조를 제대로 이해하지 못하면 프로그램이 비효율적이고 다른 사람들이 잘 이해하지 못하게 되기 쉬워 프로그램의 구조가 일관성을 잃게 되므로, 대형프로그래밍 작업을 엄두도 낼 수 없게 된다. 
전산학과 학생들조차도 프로그래밍과목을 '자료구조'보다 중요하게 여기는데 그것은 큰 잘못이다. 
그냥 수행된다고 해서 모두 성공적인 프로그램이 되는 것은 아니다. 
하나의 프로그램을 짜더라도 제대로 짤 수 있어야만 갈수록 실력이 늘게 된다. 
일반인이라면 비싸더라도 시설과 강사진이 좋은 학원에서 수강하는 것이 바람직하다. 
그러나 일반적인 개론과정보다는 특정한 과목을 집중적으로 강의하는 교실을 권한다. 
전자계산학일반 정도는 간단한 책 한 권 정도면 충분히 알 수 있기 때문이다. 
그런 시간조차도 없는 사람이라면 책을 사서 집에서 직접 두들겨보면서 배우거나, 근처의 대학생 중에서 사용경험이 있는 사람에게 가끔 물어보는 것이 좋다. 
국민학교 학생들에게 컴퓨터 조기교육이 바람직한가 하는 문제는 영어 조기교육만큼이나 찬반에 대해 논쟁의 소지가 있다. 
아직 직접 논쟁이 발생하지는 않았지만 현재 우리나라에서 시판되고 있는 교육용 소프트웨어는 그런 제목을 붙이기엔 조금 문제가 있다. 
모두 그렇지는 않겠지만 대부분이 그냥 사지선다형 문제를 컴퓨터에 옮겨놓은 것에 불과한 프로그램이기 때문이다. 
막연히 컴퓨터를 사용한다는 호기심만 불러일으킬 뿐 컴퓨터의 특성을 제대로 살리지 못하고 있는 실정이다. 
학부모들은 우리 아이가 컴퓨터를 알지 못하면 혹시 나중에 메울 수 없는 격차로 뒤떨어지는 게 아닐까 걱정하겠지만 그것은 너무 앞선 걱정이다. 
도리어 너무 일찍 가르치는 것은 과학 일반에 눈뜰 시기에 좁은 시야를 갖게 하고 컴퓨터에 싫증을 느끼게 하는 좋지 않은 결과를 낳을 수도 있다. 
따라서 그보다는 과학동화나 전기류를 읽히는 게 더 좋을 듯싶다. 
외국에는 어린이들의 창의성을 북돋워주는 프로그램들이 많이 개발되어 있다고 한다. 
우리나라에서도 이제 단순히 사지선다형 문제를 직업적인 프로그래머가 컴퓨터로 옮겨둔 것을 교육용 프로그램이라고 우기는 풍토는 사라져야 한다. 
필자의 생각으로는 타자기로 글을 쓰는 연습 정도면 충분하리라 생각된다. 
대학 전산교육에도 몇 가지 문제점이 있다. 
대부분의 전산개론 시간은 특정한 프로그래밍언어 하나를 배우는 과정으로 되어 있다. 
배우는 것은 주로 포트란, 파스칼이다. 
어떤 대학에서는 다양하게 프로그래밍언어별로 강좌를 개설해서 각자 기호에 따라 듣게 하기도 한다. 
그러나 인문사회계열에서는 그보다는 스프레드 쉬트(Spread Sheet)나 데이터베이스 패키지 또는 통계 패키지를 배우는 것이 더 쓸모가 있다. 
사실 일반사용자들은 프로그래밍언어인 포트란이나 파스칼을 몰라도 그리 불편할 일이 없기 때문이다. 
따라서 그보다는 오히려 더 형식적인 도표나 편지, 보고서 작성과 같은 일을 컴퓨터로 하는 방법을 많이 배워야 할 것이다. 
아직도 숙제를 내주면 프로그램은 컴퓨터로 찍어내고 그에 관한 설명은 손으로 쓴 채로 내는 학생이 많다. 
이것은 컴퓨터를 계산하는 기계로만 생각하거나 한글자판을 외우지 못하기 때문인데, 비싼 컴퓨터를 사서 겨우 프로그램숙제나 게임을 하는 데에만 사용한다면 너무 큰 낭비가 아닐 수 없다. 
여러분이 만일 개인용컴퓨터를 가지고 있다면 로터스(Lotus), 디베이스(dbase)라는 패키지를 구해서 사용해보기 바란다. 
갈수록 사용자에게 편리한 패키지프로그램이 많이 개발되어 그것을 제대로 활용하기에도 바쁜데, 포트란으로 그런 기능에 대항할 만한 프로그램을 짠다는 것은 시간 낭비일 뿐이다. 
대형프로그램의 개발이 목적인 사람들은 충분히 일반적인 고수준(high level) 프로그래밍언어를 배워야 하고, 게다가 각 기계에 해당되는 어셈블리언어, 프로그래밍기법도 배워야 한다. 
공과대학에는 아직도 포트란 프로그래밍교육이 주된 강좌가 되어 있는데, 그보다는 훨씬 현대적 감각에 맞는 C언어를 배우는 게 좋을 것이다. 
프로그래밍언어도 인간들이 쓰는 자연언어같이 무척 강한 보수성을 가지고 있다. 
따라서 처음 익혀둔 언어가 포트란이면 계속해서 포트란이 제일 편하고 좋은 언어라는 착각 속에서 고집을 피우게 된다. 
그러나 프로그래밍언어는 빠른 속도로 발달하므로 포트란은 이미 다소 진부한 언어가 되어버렸다. 
고생스럽더라도 좀더 과감하게 새로운 언어를 선택해서 익혀두는 것이 훗날을 위해서 좋을 것이다. 
많은 사람들이 어린이들에게 BASIC을 가르치곤 하는데, 여기에 대해서는 많은 논란이 있다. 
왜냐하면 이들이 어른이 되어서도 BASIC에서 벗어나지 못하기 때문이다. 
BASIC이 배우기 쉬운 언어임에는 틀림없지만, 프로그래밍습관이라는 관점에서 볼 때 뒤에 배울 새로운 기법에 적지않은 부정적 영향을 끼칠 수도 있다. 
따라서 익숙해지면 좀더 높은 수준의 언어를 배우도록 해야 할 것이다. 
컴퓨터를 배운다는 것은 탁상용계산기나 냉장고 사용방법을 배우는 것과는 완전히 다르다. 
컴퓨터가 가진 모든 능력을 충분히 활용하기 위해서는 좋은 방법으로 배워야 한다. 
특히 컴퓨터교육의 핵심인 프로그래밍은 피아노와 마찬가지로 기술적인 면이 많으므로, 좋은 피아니스트가 되기 위해서 비싼 레슨비를 지불하면서 좋은 선생님에게 배우듯이 프로그래밍 역시 좋은 선생님에게 하나하나 꼼꼼히 배워야 한다. 
전화기의 숫자판이 다이얼식에서 버튼(button)식으로 바뀐 지 벌써 몇 년이 되었다. 
이제 다이얼식 전화기는 제법 골동품의 향기까지 풍긴다. 
손가락을 넣어 전화를 걸던 시대는 조금씩 우리에게서 멀어져 가고 있는 것이다. 
바뀐 것은 그것뿐만이 아니다. 
공중전화를 걸기 위한 동전은 카드로 바뀌어가고, 화폐 역시 전자화폐인 크레디트 카드(credit card)로 대치되고 있다. 
50여 년 동안 사용되어 왔던 LP레코드는 컴팩트디스크(compact disc)에 의해서 밀려나고 있고, 수많은 납활자로 어지럽던 인쇄소의 모습도 이제는 고해상도의 컴퓨터와 레이저프린터가 있는 깔끔한 사무실의 모습으로 변해가고 있다. 
수년 전까지만 해도 가끔 보이던 기계식오락기는 이제 완전히 사라져버렸다. 
문학에서도 종래의 시나 소설의 형식을 크게 해체하고 나타난 포스트모더니즘시대의 시와 소설이 독자들의 호기심을 자극하여, 대중들로부터 조악한 상품이라는 비난과 호기심을 동시에 받고 있다. 
국소 전자기술의 등장으로 시작된 이 시대는 구체적인 생산기구의 형태뿐만이 아니라, 시와 소설의 형식 같은 문화적인 구조물조차도 해체하고 새롭게 조립한다. 
이상에서 나열한 바와 같이 우리를 둘러싸고 있는 현실은 사소한 가정용기구에서부터 사회구조에 이르기까지 전체적으로 변모하고 있다. 
우리는 미래학자들이 이야기하는 소위 '제 3의 물결'을 마주하고 있는 것이다. 
정보화사회가 다가오고 있다. 
그것이 우리의 눈과 피부를 통해 직접 느껴진다. 
정부당국에서는 행정의 효율화를 위해서 정보화사회를 열심히 소개하고 있다. 
몇 년 전 서울대학교 사회과학연구소에서 조사한 자료에 의하면, 국민의 50% 이상 그리고 정보서비스 종사자들 가운데 90% 이상이 정보화사회에 관한 홍보물을 접해보았다고 한다. 
일간신문의 광고란을 살펴보더라도 적어도 이틀에 한 번 정도는 컴퓨터나 정보기기에 관한 대형광고가 실린다. 
요즘은 컴퓨터를 잘 사용할 수 있는 사람은 한 가지의 제 2 외국어를 잘 구사하는 것만큼이나 대우를 받는다. 
이와같이 정보화사회에서는 사람의 능력에 대한 평가기준도 달라진다. 
미래에는 국민의 문명화 정도가 문맹률이 아닌 '컴퓨터와 정보기기에 대한 인식 정도'로 새롭게 측정될 수도 있을 것이다. 
약간의 편차는 있지만, 많은 사회학자들이 현대사회가 다원화되어가고 있다고 진단한다. 
반면 어떤 학자들은 다원화는 일시적인 현상이고 궁극에는 정보의 편차에 의해서 양극단화가 더 진행될 것이라고 말하기도 한다. 
단기간 내의 실험이 불가능한 사회현상에 대해 그 미래를 예측한다는 것은 적지않은 어려움이 있다. 
그러나 표면적인 현상만을 볼 때, 현대는 그 어느 시대보다도 다양한 직업과 다양한 의식성향의 집단을 가진 복잡한 사회임을 부인할 수 없다. 
우리는 이렇게 복잡해진 정보화사회에 대응하여 어떤 준비를 할 것이며, 어떤 방향으로 발전하는 것이 바람직할지에 대해 숙고해보아야 할 것이다. 
먼저 정보란 무엇인지에 대해서 살펴보자. 
'정보'라는 단어가 우리에게 주는 느낌은 그렇게 밝지 못하다. 
우리는 그 단어에서 어떤 가치나 경제적 의미를 떠올리기보다는 은밀하고 억압적인 냄새를 맡는다. 
'정보'라는 단어에서 이렇게 정보기관, 첩보기관 같은 다소 부정적인 이미지를 떠올리는 것은 우리들의 어두웠던 정치사에서 비롯된다. 
정보는 일반적으로 사물에 관한 새로운 지식으로 정의된다. 
따라서 새롭지 못한 것은 정보가 될 수 없다. 
예를 들어서 "내일 아침에 태양은 동쪽에서 떠오른다"나 "소나무는 식물이다"와 같은 동어반복적인 사실은 아무런 정보를 주지 못한다. 
샤논(Shannon)은 어떤 사실이 가지는 정보의 양을 그 사실이 일어날 수 있는 확률의 음의 대수(log)값으로 정의했다(여기에서 그 대수의 밑은 2이다). 
즉 어떤 진술이 말하는 사건이 일어날 확률이 P라면, 그 진술이 가지는 정보량은 -log(P)로 정의된다. 
따라서 항상 일어나는 일(태양은 동쪽에서 떠오른다)의 확률값은 1이므로, -log(1)＝0인 샤논의 식에 의해서 그 진술은 우리에게 아무런 정보를 주지 않는다. 
만일 일어날 확률이 1/4인 어떤 사건 Q에 관한 정보가 있다면, 그 정보의 양은 -log(1/4)＝2이다. 
만일 확률이 1/16이라면 정보의 양은 -log(1/16)＝4가 되어, 앞서 소개한 것들에 비하여 더 많은 정보를 가지게 된다. 
다시 말해서 일어날 가능성이 희박한 사건에 관한 진술이 더 많은 정보를 가진다는 것이 샤논의 측정법이다. 
이외에도 몇 가지의 정보량 측정법이 있는데 이는 학자들마다 조금씩 다르다. 
정보란 인간의 감각기관을 통해서 감지되어 지식과 결합된 비물질적 단위이다. 
어떤 학자들은 정보를 물질도 관념도 아닌 또 하나의 독립된 실체라고 주장하지만, 아직은 소수의 의견에 머물고 있다. 
정보란 물질적인 특성이 인간의 의식에 반영되어 재조립된 관념이라고 보아야 할 것이다. 
그러므로 물질적 기반이 제거된 정보란 존재할 수가 없다. 
정보의 특성은 다음과 같다. 
먼저 정보는 시간에 따라 가치가 크게 달라지는 시효성(시간성)의 특징을 가진다. 
그리고 비물질적 성향으로 인해서 무제한의 복사와 완전한 소멸이 가능하다. 
따라서 질량불변의 법칙과 같은 정보량 일정의 법칙은 존재하지 않는다. 
또 이러한 특성으로 인해 정보를 주성분으로 하는 프로그램은 경제적인 단위로 거래될 때 다른 공산품과 차이를 가진다. 
정보를 복사해가는 것과 훔쳐가는 것이 어떤 차이점을 가지는지 그리고 두 개의 정보가 같은 것인지 다른 것인지를 구별하는 일은 매우 어려운 문제로 남는다. 
정보화사회와 유사한 패러다임은 여러 가지가 있다. 
예를 들면 후기자본주의, 후기현대(postmodernism), 후기대량소비사회, 후기산업사회 등이 정보화사회와 비슷한 맥락으로 쓰이는 모델들이다. 
학자들은 정보화사회의 도래를 필연적인 것으로 인정하면서도 그 미래에 대해서는 의견을 달리한다. 
정보화사회를 보는 시각은 대개 낙관적인 다니엘 벨(Daniel Bell)류의 시각과 그와 정반대인 비관적인 시각이 있다. 
{이데올로기의 종언}의 저자로 잘 알려진 다니엘 벨에 의해서 주도되는 정보화사회론은 다소 낙관적인 미래를 가지고 있다. 
그에 의하면 다가올 후기산업사회가 기존의 현대사회와 구별되는 점은 아래의 세 가지이다. 
첫째, 경제구조가 상품생산중심 경제에서 서비스경제로 전환된다. 
둘째, 지식을 매개로 한 계층이 기존의 자본가계급보다 우위에 선다. 
셋째, 과학이 발전하고 그 발전된 과학이 어떤 시대보다 직접적으로 생산과 결합하여, 첨단산업의 이윤율이 극대화된다. 
그리고 혁신과 사회적 정책결정의 원천으로서 이론적인 지식이 우세해짐에 따라, 기존의 전통적인 노동자와 자본가의 갈등은 전문지식층과 일반대중들 간의 갈등으로 대치된다. 
후기산업사회에서 권력에 접근하기 위한 수단은 전통적인 고정자산이 아니라 교육이나 지식이다. 
이러한 실력우선주의의 확대에 의해서 자본가와 노동자로 양극화된 전통적인 맑스식 모델은 크게 수정될 수밖에 없다는 것이 벨의 생각이다. 
벨은 지식제일주의사회야말로 사회정의에 가장 잘 부합되고 인간의 가치가 제대로 구현되는 사회라고 설명한다. 
다시 말해서 후기산업사회는 노동가치설보다는 지식가치설이 이데올로기로 채택되는 시대인 것이다. 
따라서 그의 예상에 의하면 다가올 정보화사회에서는 컴퓨터라는 새로운 지적 엔진이 사회의 원동력이 되고 전자통신망은 그 신경세포가 된다. 
공장자동화를 기반으로 한 무인생산공장의 확대로 생산에 의한 재화와 용역보다는 정보와 지식이 더 우월한 경제적 단위가 되고, 자동화로 인한 실업은 서비스산업인 레저산업으로 빠르게 흡수된다. 
또 이제는 종업원의 수에 의해서 생산량이 결정되는 시대는 지나가고 있다고 주장한다. 
나아가 자동화기계(hardware)의 가격은 갈수록 하락하고, 동시에 그러한 기계를 운용하는 기술(software)의 가격은 급격히 올라간다. 
그리고 정보는 고부가가치의 재화가 되어 정보산업에 종사하는 사람들의 지위를 상승시키는 것이다. 
정치적으로는 통신기술의 획기적인 보급으로 인하여 지방분권화가 진행되고 이로부터 다양한 문화가 생성된다. 
또 통신의 발달로 지리적 한계가 극복되어 직접적인 참여민주주의가 신장되고, 권력자의 비밀스런 통제가 어렵게 되어 독재가 불가능하게 될 것이라고 전망한다. 
그들은 누구에게나 한 대씩의 전화가 설치되는 시대가 된다면 독재나 전체주의는 불가능하다고 단언한다. 
이뿐만 아니라 사람들이 단순하고 사무적인 노동에서 해방됨으로써 여가시간이 늘어나 인간의 지적능력이 최고도로 발휘되며, 이로부터 더 인간적인 문명의 시대가 도래한다는 것이다. 
이러한 시각에서 본다면 맑스에 의한 고전적인 양극화 계급모델이나 다원화에 의한 갈등의 심화로부터 발생하는 사회의 단속적인 발달은 일차적으로 부정된다. 
벨은 그보다는 순차적이고 개량적인 사회진화가 미래의 더 합리적인 모델이라고 전망한다. 
즉 낙관론자들은 과학기술로 조정되는 미래사회에 대해서 전적으로 신뢰하는 것이다. 
이와같이 장미빛 미래를 예언하는 벨류의 시각과는 달리 이를 비판하는 정반대의 의견들도 만만치 않다. 
그 시각의 기본적 구조 중 세계정치적인 면은 다음과 같다. 
비판적인 학자들에 의하면 후기산업사회의 발전 전망은 정보통신기술과 정보서비스를 팔아먹기 위해 자본가들이 조작한 미래의 환상에 불과하다는 것이다. 
그 증거로서 그들은 아래의 사실들을 제시한다. 
현재 과학분야와 첨단산업은 개개인의 소규모 노력의 총합이 아니라 주로 정부와 군산복합체의 압도적인 지원을 받아 발전하고 있다. 
또 갈수록 연구단위가 커지고 있다. 
개인에서 기업, 국가단위로 커지며, 대형입자가속기의 설치에서 나타나듯이 체제나 경제블록 단위로까지 더욱 거대화돼가고 있다. 
그리고 첨단기술과 정보산업의 핵심은 대부분 SDI와 같이 거대군부와의 계약하에서 진행되고, 고등교육의 확장은 정부와 산업체의 지원에 크게 기대고 있으며, 그 정도는 시간이 갈수록 더해가고 있다. 
이를 볼 때 현재의 정보화사회로의 준비는 바로 선진제국주의적 국가들이 주도적으로 전개해온 군부주도하의 국지전과 무한정한 우주경쟁에 주변국가들을 끌어들이고, 이로부터 자신의 위치를 공고히하기 위한 것이라 할 수 있다. 
그것을 위하여 그들은 첨단기술 이전이라는 미명하에 새로운 전자통신기술을 후진국에 이전하고, 그 기술로써 주변국가를 감시하면서 그 통신선로를 이용하여 자국의 이윤을 철저히 뽑아내고 있다. 
그리고 약소국들은 그들끼리 서로 경쟁하면서 선진국가들로부터 낙후된 기술을 비싼 값에 사들이게 된다. 
특히 슬랙(Slack)과 같은 급진적인 학자들은 정보화시대란 제 2 차 세계대전 이후 움터나온 민족해방운동 등 반자본주의적 움직임을 희석하고 세계단위의 산업체계를 구성하기 위한 전략이라고 비난한다. 
그는 정보수집을 위한 고도의 통신시스템은 세계적인 환경감시제 그리고 다국적기업의 효율적인 확산, 소규모 재래식 군사전의 신속한 전개 또 이념공세에 압도적으로 이용되어왔다고 주장한다. 
한편 급진적인 자연주의자들이나 생태학자들은 제 3 세계 대중들이 선진국가들에 정보기술적으로 종속된 데서 벗어나기 위해서는, 컴퓨터와 같은 첨단기기의 사용을 중지하고 선진국으로부터 주어지는 모든 기술 지원을 거부해야 한다고 주장한다. 
이같은 생각은 어느 시대에나 나타나는 반과학주의의 한 형태인데 그것이 시행착오임은 이미 역사 속에서 검증된 바 있다. 
한 국가 내에서는 자동화로 실업이 증가하고, 그 대량의 실업자군이 정치세력화하여 기술엘리뜨에게 대항하는 일이 벌어진다고 한다. 
또 첨단장비의 불균형적인 배분으로 가진 자와 못 가진 자의 차이가 어느 시대에서보다도 빠르게 벌어질 것으로 전망한다. 
벨류의 시각에서 설명하는 실업의 문제에 대해서도 반박을 한다. 
즉 부분적으로는 새로운 직종이 실업자를 흡수하지만, 새로운 직종이 독립된 직종으로서가 아니라 거대한 재벌집단으로 존재하고 그 직종 역시 자동화를 추진하므로, 실업사태는 직종을 옮겨가면서 연속적으로 벌어진다고 주장한다. 
새롭게 창출되는 직업의 수는 자동화로 인해서 없어지는 직업의 수를 따라잡지 못한다. 
즉 자본주의사회에서 기업이 이윤을 추구하는 이상, 어떤 형태로든 실업과 산업예비군은 존재할 수밖에 없다는 것이다. 
그래서 어떤 급진적인 시각을 가진 사람은 미래의 계급구조는 컴퓨터를 '가진' 계급과 컴퓨터를 '못 가진' 계급으로 바뀔 것이라고 성급히 진단하기도 한다. 
지나치게 빠르고 다양한 정보와 그 전달체제는 인간의 신체적인 처리한계를 초과하는 정보의 홍수사태를 일으켜 도리어 아무런 정보도 전달되지 않는 파국으로 갈 수 있다고 경고하는 시각도 있다. 
일전에 있었던 미국 증권가에서 벌어진 일시 투매에 의한 폭락사태는 정보의 과다한 유통으로 발생한 체증현상이 얼마나 위험한 것이며, 그 누구에게도 책임을 물을 수가 없는 '전자동시스템'의 약점이 어디에 있는가를 보여주는 교훈이었다. 
우리나라에서도 가끔 은행 온라인시스템이 작동을 멈추어 큰 소동을 빚곤 한다. 
앞으로 이런 사태는 더욱 빈번히 일어날 것이며, 그 피해자가 누가 될지는 아무도 모른다. 
통신과 권력의 결합은 독재를 가속화하면서 개인의 사생활을 침범한다. 
예를 들어서 공익의 수호라는 이름하에 에이즈환자의 이름이 담긴 파일을 전자통신망에서 공개해버릴 수도 있다. 
이런 개인의 사생활보호는 정보화사회가 추구하는 효율성이라는 측면과 계속 마찰을 일으킬 것이다. 
이상에서 우리는 정보화사회에 대한 두 가지 대비되는 시각을 살펴보았다. 
여기서 우리가 깨달을 수 있는 점은 어떤 기술적인 진보도 마치 컵 속에 있는 물에서 잉크가 퍼져나가듯 골고루 그리고 저절로 퍼져나가지는 않는다는 것이다. 
과학적 지식과 문명의 이기가 인간을 이롭게 하는 것은 사실이지만 어떤 나라, 어떤 집단으로 배분될 때는 반드시 자본의 속성을 띠고서 차별화 현상을 보인다. 
한 예로 라디오가 발명된 지 100여 년이 넘었지만 아직도 아프리카에는 10여 집마다 한 대씩밖에 라디오가 없는 나라가 적지 않다고 한다. 
정보화사회는 우리의 의지와 상관없이 완성되기로 운명지어진 미래가 아니라, 단지 가능성의 세계(possible world)이다. 
따라서 모든 문명의 발전과 마찬가지로 그로부터 발생하는 긍정적, 부정적 영향 모두를 알려주어서 대중들로 하여금 제대로 준비토록 해야 할 것이다. 
예를 들면 국내외의 비민주적 정보유통, 프라이버시 침해, 컴퓨터범죄, 실업문제 등 다양한 역작용에도 관심을 가져야 한다. 
비민주적, 비효율적 사회구조에서의 기술의 발달은 결국에는 사회구성원 모두에게 해가 될 것이다. 
정보화사회라는 새로운 시대에 인류가 접어들 것인가, 그리고 그로부터 인간의 가치관, 계급구조, 세계적인 역학관계가 바뀔 것인가, 또 궁극에는 노동으로부터 인간이 해방될 것인가, 아니면 도리어 실업의 발생으로 극히 혼란스러운 시대가 될 것인가에 대해서는 아직도 논란의 여지가 많다. 
결국 인간들간의 정보교환, 정치질서, 노동과정을 포함한 경제과정이 사회의 동력원이고, 이것을 통제하는 것은 정치적인 면이므로 우리는 이에 많은 관심과 주의를 기울여야 할 것이다. 
컴퓨터나 새로운 정보기기에 대한 막연한 두려움에서 생겨나는 기계경시풍조나 더 나아가 기계파괴운동 등은 물론 현재 가능하지도 않을 뿐더러 사회발전이나 미래에 대한 가능성을 스스로 부인하는 자기모순에 빠지게 할 뿐이다. 
컴퓨터에 대한 미신 정보화사회는 자본주의국가에서 자본가적 입장을 부분적으로 강화시켜 사회통제를 가능하게 하는 측면도 있지만, 동시에 민주적 사회발전을 염원하는 세력들에게도 많은 기회를 부여할 것이다. 
컴퓨터를 의미 있게 사용하기 위해서 우리는 먼저 컴퓨터에 관한 미신에서 벗어나야 한다. 
가장 널리 퍼져 있는 컴퓨터에 대한 미신은 '컴퓨터는 만능'이라는 것이다. 
그러나 결론부터 이야기하자면 컴퓨터는 결코 만능이 아니다. 
만능이란 단어의 뜻 자체가 모호한 면이 있지만, 만능이라는 말을 자신이 어렵다고 생각하는 모든 문제를 해결해 주는 것으로 받아들인다면 컴퓨터는 결코 만능이 될 수 없는 것이다. 
예를 들어 자신과 가장 적합한 결혼상대자를 찾아주는 컴퓨터를 원하는 사람도 있다. 
그러나 사람의 성격과 감정은 변화가 많아서 '적합함'의 기준 자체가 수시로 바뀌기 때문에 컴퓨터가 이러한 능력을 갖는다는 것은 불가능하다. 
컴퓨터 역시 사람에 의해서 만들어진 것인 이상 그것은 인간의 이성적 한계를 분명히 반영한다. 
따라서 항상 공평한 판정을 해주는 컴퓨터가 있다는 주장은 항상 공평한 사람이 존재한다는 주장만큼 위험하다. 
컴퓨터는 그 자체로 의지가 있는 것이 아니라, 그것을 운용하는 사람의 의지를 엄청나게 빠른 속도로 반영해 주는 도구일 뿐이다. 
그리고 사람은 그 도구를 사용하여 '자신의 의지'를 더 빠르고 정확하게 구현해 나간다. 
컴퓨터는 만능이라는 미신에 사로잡혀 있다가 크게 실망한 사람들은 이제 컴퓨터는 아무것도 아니라는 또 다른 미신에 사로잡히곤 한다. 
"컴퓨터로 할 수 있는 일은 결국 주판으로도 할 수 있다"거나 "컴퓨터로는 0과 1밖에 계산할 수 없다"라든지 "인간은 컴퓨터에게 어떠한 정신적인 기능도 맡길 수 없다"라는 주장이 이 두번째 미신에 해당한다. 
두번째 미신에 빠져 있는 사람들 중에는 상당한 정도의 학식을 지닌 사람들도 있다. 
철학의 전문용어를 빌려 말한다면 그들은 환원론자이다. 
이들 식으로 따지면 인간도 수소와 산소의 결합물이며 다소 복잡한 전기장치에 불과하다. 
그러나 컴퓨터는 이렇게 그것의 능력을 과소평가하는 사람들에게는 대단한 능력을 발휘한다. 
예를 들면 컴퓨터가 없이는 꿈도 꿀 수 없는 유전자배열 분석이라든지, 수십 년 경험이 있는 전문가도 속는 가짜미술품을 구별해낸다든지, 원자폭탄이 터지는 과정을 수백 번이고 가상적으로 재현해보일 수 있는 것이다. 
또한 위험한 수술의 훌륭한 보조자로서도 쓰이고, 그 어떤 오락보다도 다양한 소일거리를 제공하며, 창의성을 길러주는 교육프로그램 또한 만들어준다. 
어떤 사람들은 컴퓨터를 하나의 전지전능한 능력을 가진 실체로 생각하고, 또 다른 무리들은 컴퓨터의 능력을 과소평가해서 인류에게 더욱 많은 발전을 가져다줄 컴퓨터의 발전을 가로막는다. 
미신을 가진 한쪽은 비(非)과학적인 시각을 가지고 있고 다른 한쪽은 반(反)과학적인 시각을 가지고 있다고 할 수 있는데, 우리는 이 양 극단적인 관점에서 모두 벗어나야 할 것이다. 
그럴 때만이 다가올 정보화사회는 더 안락하고, 인간적인 삶이 보장되는 사회가 될 수 있을 것이다. 
컴퓨터는 그것이 인간의 고유기능을 모두 대신해줄 수 있으며 오히려 인간보다도 훨씬 더 잘 할 수 있다고 생각하는 사람에게는 많은 실망감을 안겨줄 것이며, 반면에 아무것도 아닌 전선줄덩어리라고 생각하는 사람에게는 놀라운 정도의 능력을 보여줄 것이다. 
또 이를 도구로 해서 인간의 창의력 또한 비약적인 발전을 꾀할 수 있을 것이다. 
컴퓨터는 석기시대에 철기가 등장한 것만큼이나 획기적인 발명이다. 
따라서 우리는 미사일이 난무하는 전쟁터에서 돌도끼(?)를 들고 뛰어다니는 일이 없도록 새로운 도구에 충분히 익숙해져야 할 것이다. 
기계식 타이프라이터에 대한 지나친 향수는 더 편리하고 생산성이 뛰어난 워드프로세서와 놀랄 만한 선명성을 지닌 레이저프린터의 사용을 방해한다. 
생산력의 발전 없는 안락한 미래사회는 생각할 수가 없다. 
바람직한 정보화사회가 되기 위해서는 몇 가지가 선행되어야 한다. 
먼저 정보화사회에 대한 교육이 국민교육 차원에서 이루어져야 할 것이다. 
지금은 컴퓨터교육이 경제적 능력에 많이 좌우되고 있다. 
즉 부유한 사람들은 이전에 자신들이 누려온 경제적 지위를 이용해서 정보화사회에서도 앞서나간다. 
정보화사회에서의 교육의 불균형은 안정된 사회를 위해서도 바람직하지 못할 뿐만 아니라, 지나치면 사회 자체를 파국으로 몰고갈 수도 있다. 
따라서 전국민차원에서 질 높은 정보화교육을 계속 해나가야 할 것이다. 
둘째로는 정보독점과 남용을 방지하기 위해 범국민적인 감시기구나 합의체제를 만들어내야 한다. 
역사적으로 볼 때 독재는 항상 효율성이라는 사탕발림으로 우리에게 다가왔다. 
민주적이지 못한 정보화사회에서의 정보독점에 의한 피해는 상상외로 크다. 
반체제인사들에 대한 블랙리스트의 작성이라든지 공적인 정보자원을 특수층에게만 공개하여 이익을 도모하는 일 등이 그것인데, 이는 반드시 시정되어야 한다. 
다시 말해서 통제장치가 없는 정보의 밀집화는 저지되어야 한다는 것이다. 
정보의 평등한 사용은 모두의 이익을 보장해주며 전체적인 파국을 방지해준다. 
머리말에서 말했듯이 정보화사회란 편리한 사회이다. 
그러나 편리한 사회라고 해서 반드시 행복이 보장되는 것은 아니다. 
편리함을 만드는 것이 컴퓨터의 몫이라면 사람이 사람답게 살아가는 사회를 만드는 것은 우리들의 몫이다. 
