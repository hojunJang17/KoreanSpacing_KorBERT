는 리스틱 데이타 컨써씨움인데,
컨써쉬움으로써 구속된 것입니다.
근까 대학,
기업,
정부 연구 기관,
그렇게 된 것이죠.
이게 어떤 문제가 있냐 하면요?
소위,
공동의 노력으로써 최대 효과를 얻을려고 하는 목적에서 이루어진 거죠,
자 인 지금서부터,
이광수 작품을 연구한다고 합시다.
근데 여기서,
각각 사람이,
따로따로 입력을 했어요,
그러믄 엄청난,
시간과,
노력이 들지요,
근데 이 사람은 이광수의 사랑을.
이 광 사람 이광수의 무정을.
유정을.
이차돈의 사흘.
전부 다 나눠서,
입력을 했습니다.
그 다음에 이것을,
내가,
무정을 입력했으니 너,
유정 입력한 것 줄래?
해 가지구 교환한 거죠.
소위 컨써씨움 구성에서,
여러 사람이 한꺼번에 입력을 해서 한꺼번에 모아 보면,
엄청난 자료를 조금쪼끔만 입력 자기는,
그~ 부담을 줄이고 엄청난 자료를 공유할 수 있는 것이죠,
그래서 요즘은,
이런 형태로 많이,
코퍼스를 구축합니다.
실질적으로,
어~ 그러한 작업을 지금,
어~ 여러 곳에서.
하고 있구요,
그~ 이~,
코퍼스 구축만이 아니구 모든 일이 또 그렇잖아요,
많이 그렇게 하고 있습니다.
이 앨리시도 마찬가지로,
그렇게 이루어진,
음성 코퍼습니다.
펜실베니아 대학교에 돼 있습니다.
그 다음에 이엘알에이는,
소위,
그~,
룩셈부르크에 그~ 삼 그~ 공부하던 곳인데,
여기다 그~,
그~ 이름을 나오듯이 유러피안 랭귀지 쏘서 쏘쉬이션이에요.
바로 이유에서,
지원하는 곳이죠,
그러면은,
육십육페이지로 넘어갑니다,

여러분이 참고로 보실라면 여러분이 저~ 이렇게이케 전공 분야가 아니기 때문에,
지금 현재 이렇게,
국어 정보 언어 정보화 사업이,
외국에서 벌어지고 있다.
하는 것들을 저희 연구원들이 코퍼스 구축 얘기가 나오면,
보여 드릴려고 합니다.
그럼 국내는 어떠냐,
아까 얘기한 에뜨리,
라고 하는 것인데,
그~ 천구백팔십년대 중반부터,
지속적으로 구축해 왔습니다.
근까 어떤 것이 구축돼 왔는가 하면은,
반음절,
단독,
숫자음.
이 숫자음을 왜 입력할까요?
그러니까 음성으로 왜 구축할까요.
전화 언어요.
맞습니다 전화 언어 같은 거,
그~ 자동 응답기죠 자동 응답기 만들려는 거죠,
그~,
여러분들 숫자 발음할 때,
어떻게 발음하는지 모르겠어요 전화 번호 얘기할 때 뭐라 그래요 다르죠,
또 충청도 사람 경상도 사람,
다르죠 서울 사람.
예순 네 살이에요?
아니믄
예순,
가만 있어 봐 육십 네 살.
육십 네 살 그러면 이건 틀림없이 경상도 사람이에요.
지금은 그것이 경상도 방언의 영향이,
어~ 강릉까지 올라와 있어요.
서울까지도 지금 막 올라와 있는 거예요.
예순 네 살인데,
어~ 육십 네 살 하고 발음하는 경우 많이 들으실 거예요.
또 한 가지는,
이 숫자가 가지고 있는 것들이 뒤에 오는,
소위 단위,
수량사.
에 따라서,
어떻게 읽는가가,
결정이 되지요,
자,
숫자가 원래는,
한자음으로 읽는 것이 있구요,
우리,
고유음으로 읽는 것이 있어요.
한 개 두 개 세 개 이렇게 읽을 때가 있고,
일 이 삼 사 읽는 것이 있습니다.
그죠?
근데 최근에는,
영어까지도 나와요.
터미네이트 이예요 투예요.

세칸드예요.
여러분들은 대개,
저희들은 터미네이트 이,
이렇게 하는데 여러분은,
터미네이트 투 이렇게 읽잖아요.
그 다음에 전화 번호 얘기할 때,
뭐~,
뭐~ 몇 번에 몇멫 번 그럽니까,
이걸 갖다 숫자로 할 때,
다르게 읽지요?
식당에 가믄,
사번 책상 앉을 거 네 번 읽었어 이렇게 얘기하죠?
전혀 다르죠,
네 번과 사번은 전혀 뜻이 다릅니다,
네 번은,
한 번씩 네 번,
네 번 겹친 거죠.
네 번.
근데 사 번은,
순 순서대로 돼 있어 사자죠.
일페이지하고 한 페이지가 다르거든요?
이런 것들에 대한 관심 때문에,
숫자에 대한 음들이,
이제 중요합니다.
그 다음에 연결 숫자 음도 마찬가지죠,
어~,
일이삼 국에 오륙칠팔 번이면 어때요 여러분들 어떻게 발음하겠어요.

일이삼에,
오륙칠팔,
이렇게 얘기합니까?

거기 몇멫 번이죠?
일이삼 국에,
오륙칠팔입니다,
이렇게 말하기도 하지만,
정확하게 얘기해 줄 때,
일이,
이라 그래요 하나 둘 셋 뭐~ 이렇게도 가죠,
그렇죠?
특히,
통장 번호 가르켜 줄 때에는,
사 하나 뭐~ 이렇게 말 말하잖아요.
사일,
오구 그럼,
사 하나,
뭐~,
오오,
뭐~ 이런 식으로 막 읽어서,
이게 체계가 막 지금 정신 없어요 솔직히 얘기해서.
이런 것들이 상당히 중요한 역할을 하기 때문에 그렇죠,
그 다음에 각종 기능 지원 명령어,
음성 밸런스 단어,
사백사십,
다섯 개 단어.
그~ 호텔 예약 데스크의 문장 음성,
스케줄링 테스트의 모의 대화 음성,
발화의 자의도에 따른 다단계 음성 디비.
뭐~ 이런 것들이 있습니다.
그니까 지금,
굉장히 그 많은,
그~,
데이타를 구축하고 있어요.
최근에는 그 과학기술처의 연구 저~ 직원으로서 쎄이와,
카이스트와 함께,
원광 원광대학교 이용주 교수가,
주관이 돼서,
어~ 사 연속 숫자,
단독 숫자 단문 뭐 여러 가지,
음성 디비를,
구축한 바 있고,
지금 현재,
홈페이지에 올라가면,
그~ 호 원광대학교의 으=,
음성
거기 연구소가 없는 거 같은데.
거기에서,
이것을 팔구 있어요.
씨디로 해서,
배포를 하구 팔구 있습니다.
한국통신에,
한국통신 그러믄 여러분들 못 알아들어요?


어떤 게 더 알아들어요,
둘,
둘 다요.
둘 다 다예요?
네,
저는,
누가 하=,
한국통신 묻더라구요,
근데 구,
어~,
거기에 써 붙인 것이 영어로 돼 있어서,
동교동인가요 저기~ 저~
지점,
거~ 거~ 지점에 있는 한국통신,
골목으로 들어갔는데 고 앞에서,
한국통신 저기 있네 그러니까,
한국통신이라고 안 써 있다고,
어~ 모르더라구요 그니까,
자꾸 외국어로 쓰면 이제 몰라요.
어~ 우리가 지금,
알게 모르게 외국어를 많이 쓰잖아요,
엘지 에스케이 뭐~ 뭔지 하나도 모르겠든데,
그~ 한국 통신 …
멀티미디어 연구소에서도,
여러 가지,
그~ 그~ 코퍼스가 구축돼 있는데 특히 인제,
그~ 한국통신은,
특히 인제,
그~ 전화 코퍼스죠 주로,
주로 연구하구 있구요,
카이스트에서는,
공동 이용을 목적으로 해서,
약 삼천 단어 규모에,
무역 관련 문장 구성.
가변 길이,
연구에 숫자론.
그 다음에,
어~,
음성 조어 균형 잡힌 칠십억,
일흔다섯 개의 고유 땅,
지역명,
뭐~ 이런 것들을,
작성하고 있습니다.
나중에 잘,
엘지전자에서도 지금 이렇게,
돼 가지고 엘지 전자에서는 지금,
어~,
음성 정보망이 구축돼서,
뭐까지 돼 있냐믄,
음성 합성 시스템이,
나와 있어요.
시판되고 있습니다.
근까 예를 들어서,
컴퓨타로,
타자를 쳐 놓으면노면,
그~,


발음이 나와요 그대로 말 고대로예요.
근데 기가 막히게,
오 살,
하고 써 놓잖아요 그럼 다섯 살로 읽고,
어,
아주 재미난 게 있습니다.
그 다음에 삼성종합기술원에서는 주로 인제 전화와 이 다이어트.
다이알 돼 있는 그 이름이 뭐에요,
핸드폰,
그것과 연관시켜서,
그~ 연구를 하구 있구요,
주로 인제,
이것들이 최근에는,
업계를 중심으로 해서.
많이 연구가 되구 있어서,
어~ 좀쫌,
그~,
균형이 안 맞습니다.
연구소는,
이걸 활용해서 돈을 벌 수 있는 처지가 아니에요.
그러나,
업체 업계에서는 이것을 활용해서 돈을 벌 욕심으로.
굉장히 많은,
연구를 하고 있어서,
그 연구의 균형이,
어~ 제대로 맞춰져 있지 않습니다.
좀 안타까운 것이죠 그래서,
어~ 산학 협동이 좀 어느 정도 이루어지면은,
될 텐데 하고는,
어~,
그렇지 못합니다.
대학 같은 데선,
대개 기초적인 연구에.
어~.
몰두하고 있습니다.
왜냐믄,
지원이 안 되기 때문이죠.
지금까지,
주로 코퍼스를 얘기했는데,
코퍼스는 소위,
정보를 생산하는 과정에서의,
결과물이죠.
이제는,
정보를 전달하는 과정에서,
이루어지는 문제가 무엇인가 하는 거에 대해서,
말씀을,
드리도록 하겠습니다.
즉 정보 전달 과정과,
우리 국어학에서 해야 될 일이 무엇인가.
이제,
지금서부터 무슨 문제를 얘기할 거냐면,
코드 문제를 얘기할 겁니다.
코드 문제가,
어~,
아마 여러분들께는,
생소한 개념일지 모르겠습니다만,
그렇게 어려운 문제가 아니니까,
어~ 좀 그~ 어렵지 않다고 생각하시고 쉽게 이해하면서,
어~,
얘기를 들어 주시기 바랍니다 그리고,
더 깊이 안 들어갈려고 합니다 코드 문제는,
간략하게,
얘기를 하고,
예를 들어서,
그~ 나중에,
시간이 있으면은,
어~ 내가 쓰=,
쓴,
그~,
알파벳이나 이런 거 코드 값을 아는 방법이 있거든요?
어떤 파일을 하나 텍스트 파일을 만들어 놓고,
디버그 명령을 내려 가지고 보면은,
거 숫자가 쭉 나옵니다.
공공공일일 막 하고 나오는 것들이 있는데,
코드 값을 불러낸다거나 하는 것을,
그 뭐~ 어려운 게 아니니까 고런 것은 제가 가르쳐 드릴지 모르겠는데,
코드에 대해서는,
깊이 얘기하지 않겠습니다 왜냐믄,
이 코드 얘기하다가 보면은 나중에 여러분이 지쳐 버려서,
어~ 모든 걸 다 이 재미없게 생각할 가능성도 있기 때문에 그렇습니다.
정보 생산자와 정보 수신자가 서로 정보를 주고받는 과정에는,
여러 가지 국어학적인 문제가 제기됩니다.
소위,
그~ 정보 생산자가 부과시킨 언어 정보를,
수신자가 같은 부호 체계로 받아들일 수 있도록 해야지 하지 않으면은,
의사 전달이 안 되죠?
우리 언어에서 정보,
언어를 전달하는 과정도 똑같지 않습니까?
그래서,
지난번에,

지난번에 말씀드린 바와 같이,
저희 그~ 언어를 전달하는 과정에서,
요러한 과정이 있었잖아요?

그니까 개념이 있고,
청각 영상이 있는데,
어떤 사람이,
의사를 전달하기 위해서,
머리 속에 의미를 생각하면은,
그 의미를,
소리로,
바꿔 주고 이 소리를 실제 발음을 하고.
발음을 하면은,
듣는 사람이 그것을,
청각 작용을 일으켜서,
머리 속에서 그 소리를,
의미로 변환시키는.
이런 작업을 하는 것이,
인간의 의사 선달 전달의,
방법이라고 했습니다.
이때에,
의미와,
그 소리 간의 관계를,
맺어 주는,
계약이,
화자와 청자가 서로 다르면은 의사 소통이,
안 되는 거죠?
제가 지난번에,
그~ 얘기했던가요?
저~,
그~,
우리는,
오 필승 코리아 그러는데,
그~,
제가,
아는 독일 사람은,
아 한국 사람들 아주 기가 막힌,
구호를 외쳤다고 그래서 무슨 기가 막힌 구혼가 했더니,
오 피스 코리아로 인식하더라구요,
필승 코리아를.

우리가 평화를 사랑하는 민족이라 오 피스 코리아 해서,

아 남북의 평화를 하구 뭐~,
이런 식으로 인식을 하더라구요,
근데 우리는,
그렇다고 제가,
아 그건 그런 뜻이 아니고,
오 필승 코리아라고,
말하기 싫어서 그냥 아무 소리 안 했습니다 하여튼,

오 피스 코리아라고,
인식하는 거죠 그렇죠?
자,
요기에 필승과,
요기가 피스로 돼 있잖아요.
근대 요기서 소리는 필승이고,
피쓴데,
그 뜻이 요기서는 다른데 피스로 인식하니까,
음성을 피쓰로 인식하니까 이건 피쓰를 뜻으로,

평화로 인식하잖아요.
서로,
요것이 맞지 않으면 요런 문제가 발생하는 거죠.
그러니까,
의사 소통에서도 마찬가지로,
컴퓨타에서도 마찬가지로 어떤 사람이 컴퓨타로 문자를 쳤는데,
그것을 전달했을 때에 이 사람이,
못 알아듣는 것은,
요,
서로 소=,
약속한 체계가 다르면 안 되는 거죠,
그렇죠?
근까 뭐~,
공공공공
이런 식으로 인식을 하고,
또는 공공공공
공일,
뭐~ 이런 식으로 했는데,
공공공공 공공일공,
하면은?
다른 체계 아니에요,
서로,
요것은 에이 요것은 비라고 서로 인식을 하면은,
되는데,
나는 이걸 에이로 했는데 이 사람은 이것을,
뭐~ 디로 인식했다든가,
하면 안 되죠.
그래서 요기에,
소위 부호 축이,
인코딩이 있으면은,

요기서는 그 부호 푸는 데,
디코딩이란 것이 있어야 되죠,

서로 부호를 주고 부호를 풀 때에,
부호가 다르면 전혀 인식을 못 하잖아요?
예를 들어서,
내가 암호를 발사했다.
근데 암호를 인식하는 방법이 다르면,
그 뜻이 전혀 다를 거 아닙니까.
그렇죠?

뭐~ 그럴 수도 있지 않겠습니까?
예를 들어서,
저 고대인들의,
점토,
어~,
점토 글자가 발견됐다,
음~ 근데,
그것을 해석하는 사람 따라 각각 다르다,
한다면은?
그 고대사,
설명이 다를 거 아니겠어요?
어~ 제가 에집트에 갔을 때,
소위 그~ 여행,
가이드한테 안내한테 물었어요.
왜냐하면,
이 벽면에 새겨진 그 그림과 문자들은,
음각으로 돼 있습니다.
음각으로 돼 있어요.
그런데 기둥,
큰 기둥은 전부 다 양각으로 많이 돼 있드라구요,
거의 양각으로 돼 있었어요.
그래서 제가 물었어요,
왜 저기는,
음각으로 돼 있는데 여기는 양각으로 돼 있는가,
그 에집트,
그,
카이로 대학 출신입니다.
카이로 대학 독문과 출신인데,
답변이 걸작이었어요.
새기는 사람이,
저것은 재미로 새겨서 저건 음각으로 새기고 이건 여기 여긴 양각으로 새겨졌다 하고,
생각해서 자기,
저~ 그냥 임의대로 했다는 거죠 근데,
전 그 모든 벽화를 거의 다 그랬죠 그,
그~,
뭐에요 글자 새긴 건 다 그렇습니다.
저는 무슨 생각을 했었냐믄,
무슨 답변이 나오기를 바랬냐 하면은?
기둥은,
양각으로 해야 그 기둥이,
굵어지지요,
음각으로 하면 그,
구두 구멍이 뚫어지니까,
좋질 않잖아요?
아니믄 무슨 전달하는 내용이 다르던가,
뭐~ 그렇게 답변할 줄 알았더니,
조각하는 사람이,
재미로 했다는 거죠 이랬다 저랬다 하고.
저하고 의사 전달이 전연 안 된 거죠.
모르는 사람하고,
그까 몰랐든가,
근데,
수많은 사람이 그렇게,
다녔을 텐데,
그 질문을 하나도 안 했을까.
어떤 책을 봐도 그 설명이 없어요.
그래서,
어~,
만약에 그 자료를 보고서,
해독하는 사람에 따라서 각각 다르게 해독했다 하면은,
의사소통이 전혀 안 되잖아요,
마찬가지로,
우리,
정보를 전달하는 과정에서도 그 뭐~ 너무 많습니다.
예를 들어서,
지금은 그런 일이 거의 없죠?
코드가 다르면 안 되잖아요,
여러분들이,
그 첨부 파일을 읽을 때에,
첨부 파일을 읽을 때에,
그것을 읽는 방법에 따라서 아래아 한글,
구십칠로 읽을 수두 있고 이천이로도 읽을 수 있고 워드로도 읽을 수 있고 엑셀로도 읽고 뭐~,
그~,
억쎄스로도 읽을 거 뭐~ 여러 가지로 읽을 거 아니에요 파일로 받았을 때에,
저처럼 여러분들 대개,
아래아 한글루,
불러들이겠죠 그렇죠?
텍스트 자료가 많을 거예요,
에이치더블유피 파일이.
근데 저 같은 경우는,
액쎄쓰 자료도 상당히 많습니다 뭐~ 사전 같은 자료 같은 거는,
액쎄쓰로 받아들이고 뭐~ 이러는데,
만약에?
근데 저한테 이메일이 가끔 두 번 오는 경우가 있어요.
그 똑같은 걸 왜 두 번 보냈나 하면은,
첫 번째 보낸 것은,
아래아 한글 이천이로 보낸 거예요.
근데 다시 보내기를,
아래아 한글 이천이로 불 저~ 해서,
아래아 이천이를,
아직,
쓰지 않는 사람은 못 읽으니,
다시 보낸다고.
구십칠로 바꿔서 다시 보낸다는 파일이,
심심찮게 많이 옵니다.
그 뭐냐 하믄?
아래아 한글 구십칠과,
아래아 한글 이천이는,
코드 체계가 다르기 땜에 그래요.
요기,
요기서는,
요것이 서로 통하지 않는 거예요.
인코딩을 했는 것이,
디코딩할 때,
인코딩을 이천이로 했는데,
디코딩 부호 풀기를,
구십칠로 하니까해니까 못 푼 거죠,
통하질 않는 거죠.
이런 문제가 있는 거죠.
그래서 우리가,
부호 체계를 일원화하거나,
또는 표준화시키지 않으믄 안 된다는 것이죠.
한국의 문=,
한국의 문자 한글에,
표준적으로 코드를 부여하는 일이,
한글 코드,
표준화라고 할 수 있습니다.
제가 여러 번 말씀을 드렸습니다마는,
컴퓨타는 내부적으로 정보를 처리하기 위해서,
이진수 형태를 사용하고 있습니다.
그렇대면 인간이 사용하는 언어로는,
사용할 수가 없습니다.
인간의 언어를,
컴퓨타가 사용할 수 있도록,
이진수의 대응 방도를 정의하는 하고 있는데 이것을 우리가 보통,
문자 코드 이렇게 얘기합니다.

그니까 고 밑에
문자 에이 그러면 이진수로서는,
공일공공 공공공일이에요.
근데 실제로 문자는 에이죠,
그니까 컴퓨타가 인식할 때의 언어는,
에이라는 건 문자로 인식하지 않고,
공일공공,
공공공일로 인식하는 겁니다.
가 그러면은,
일공일일/NR,
일공공공공,
일공일공
공공공일로 인식하는데,
우리는 인간은 가로 인식하지 않습니까?
이렇게이케 다른 거죠.
이때 문자 코드라고 하는 것은,
컴퓨타 내부 처리뿐만 아니라,
컴퓨타와 컴퓨타 사이.
또는,
컴퓨타와 주변 기기 사이에.
정보 교환에도,
그대로 마찬가지로 적용됩니다.
여러분 이런 경우가 있어요,
컴퓨타를,
조립하는 사람들 잘 아시죠.
많이 여러분들들,
여러분들 중에 컴퓨타 조립하시는 분 계십니까?
할 수 있어요?
네,
그럴 때,
주변 기기들끼리 서로 안 맞는 것이 있어요.
그게 전부 다 코드 문제예요.
주로,
코드와,
메모리 문제들이,
많습니다.
주로 이제 코드가 안 맞아서,
예를 들어서 뭐~ 콘트롤러를 뭘 쓰느냐,
따라서,
콘트롤러를 잘못 쓰면 컴퓨터 아예 작동도 안 됩니다.
그리고,
어떤 프로그램은,
콘트롤러를 특히,
무엇을 요구한다 하는 것이 있어요 그러니까,
주변 기기에서 프로그램이,
들어가는데도,
도대체 안 되는 것들은,
그러한 것들들이에요.
그까 주변 기기 유,
컴퓨타와 컴퓨타 사이,
서로 안 되는 것들이 많은 것은,
대부분이,
이 코드 문젭니다.

따라서 한글 코드라고 하는 것은,
한글을 컴퓨터 내부에서,
이진수로 처리하도록 정의한 문자 집합을 말합니다.
이때 한글 코드라 함은 대개 한글뿐만 아니라,
영문자와 숫자,
한자어.
각종,
문장 부호 등,
한글과 함께 사용될 수 있는 모든 문자를 포함하는 것이 일반적이에요,
지금 음~,
아래아 한글 이천이가,
유니코드를 쓰고 있습니다.
그리고,
그~,
워드 이천이도,
유니코드를 쓰고 있습니다.
그런데,
아래아 한글 이천이를,
워드 이천이로 불러 내면은,
다 못 불러들여요.
왜 그런가 하면은,
한글은 그대로 받아들여요 한글은.
근데 각종 부호들.
예를 들어서,
뭐~ 책 같은 거 할 때 뭐~ 요런 부호 있죠?

이런 거 있잖아요?

이런 것들은 실지로 코 문자 자판에서 입력하는 게 아니죠?
컨트롤 에프 십인가 눌러 가지고 거기서,
그~.
문자 사용 그것을 찾아 가지고,
입력하지 않습니까?
이런 코드들이,
아래아 한글은,
이천이를 만들어서,
유니코드를 만들었는데도 이걸 바꾸지 않았어요.
왜 그러냐 하면,
이 아래아 한글에는,
유니코드보다도 부호가 훨씬 더 많습니다.
우리가 생각 안 하는 부호가 많다는 얘기죠.
위의 것은 요런 부호 잘 안 쓰죠?
이런 부호 쓴 적 있어요?
어떤 친구들은 이런 부호 여러분은 보신 적 없을 거예요.
우리 나라만 독특하게 사용하는 부호에요.
또 뭐가 있냐믄?

서예 경짜 할 때 이 반 반점 있죠.
이거 있잖아요.


이것두 문제가 되지 않겠어요,
이거는,
저희들이,
키보드에다가 이걸 하나 집어 넣을려고늫을려고 애를 썼어요.
아이에스 국제 표준 기구에다가.
이거 쓰는 나라가 없어요,
반점 쓰는 나라가,
어디가 있죠?
일본이 있어요.
근데,
도대체 너무 적어서,
이걸 키보드에다 넣을늘 수가 없었습니다.
만약에 이게 영어에서 사용됐으면은,
알파벳에서 사용됐으면 저걸,
아마,
유니코드에 넣었을넜을 겁니다.
근데 저걸 안 넜어요.
그러니까 여러분 저거 어떻게 해요,
저거 입력할 때 어떻게 입력합니까.
예?
컴퓨터를 에프 십을 눌러서,
저게 여럿 여러 개 있거든요?


여러 개 있어요.
그 중에서 어떤 반점을 집어 넣을까요늘까요.
그래서 그걸 제가 바꿔칠려고,
여러 방법으로,
바꿔칠려도 어디 것을 썼는지 알 수 없잖아요.
이거 쉽게 찍는 방법 가리켜 드릴까요?
네,
아래아를 쓰면 되지 않을까 했어요.
아를 두 번 치면 되지 않을까.
아를 두 번 누르면 아래아가 되죠.
그러믄 자연히,
X에 치고 아래아를 치면은,
그대로 반점 됩니다.
보기에 아주 간단해요.
그리구 나중 코드 변환 프로그램 하면은,
그거 쉽게 나타나요.
X에 하고,
아를 두 번 쳐 보세요.
그럼 요거 되죠?
옛 한글로 했으믄,
쉬프트 키 눌르고 아를 쳐도 되고,
그냥 아를,
두 번 치면은,
아래아 자가 되죠 그렇죠?

그러면 반점이 됩니다.
간단하죠.
저는 주로 그렇게 씁니다.
근데 요게 인제,
완전히 똥그란 점이 아니고 약간 요렇게 나옵니다.
출력하면,
근데 여기서 저 프린트시킨 거 보십시오.
아마,
반점이 있는 거 보면,
거의 다 똥그란 거에 가까울 겁니다.
그렇죠,

이런 것들이,
전부 다,
어떻게 되냐믄,
부호가 많으니까,

유니코들 수가 없으니까.
그거 바꿔치질 못하는 거죠.
또 한 가지는,
아래아 한글 자체 내 문제 땜에 그렇습니다.
아래아 한글 구십칠에서 이천이로 넘어오면서 유니코드를 썼는데,
아래아 한글에 있는,
각종 기호를 그대로 살리기 위해서.
각종 부호들만은,
유니코드를 쓰지 않고 아래아 한글 코드로 그대로 쓴 거예요.
완벽하게 유니코드로 바꿔치지 않은 거예요.
그래 가지구 지금,
아래아 한글 이천이가 유니코드라고 하지만,
완벽한 유니코드가 아닌 것이,
그러한 이윱니다.
따라서 우리가,
코드가 다르다,
할 때는,
이러한 부호니,
문자 XX 숫자니 뭐~ 이런 것까지 다 포함한다는 얘기가,
바로 그것을 의미하죠.
그러니까 한글 코드라 하는 것은,
광범위하게 생각하믄,
우리 나라에서 쓰이는 문자들 컴퓨터에서 편하게 하는 대응 규칙이라고 할 수 있습니다.
우선 로마자 에이 비 씨와 한글 가 각의 코드 개념을 보이면 다음과 같습니다.
에이 비 씨는 이진수는 공일공공 공공공일이에요.
십육진은 사십일이고,
십진수는 육십오에요.
그리고.
삐,
씨가 각각 팔.
십육진 사십일 사십이 사십삼,
십진수는 육십오 육십육 육십칠 잘 보시면 에이 비 씨가 어떻게 되냐 이진수에서는,
저 끝에 숫자를.
공일,
일공,
일일 이런 식으로 그 다음에 뭐가 될까요,
디는 뭘까요?
…
예?
일,
공공이겠죠,
그렇죠?
이런 식으로 나가죠.
이렇게 되겠죠.
가도 마찬가집니다,
일공일일,
공공공공
일공일공
공공공일.
이게 무슨 뜻이냐 하면요?

이게 이바이트라고 해서,

어~,
요게 비트입니다 요게.

비트는,
공과 일 중에서 하나를 선택하도록 해서 해야 돼요.
그래서 우리가 보통 비트를 얘기할 때에는,
온 오프라고 해서,
공과,
일로 얘기하죠.
그러니까 이것이 공 공 공 공이죠.
그렇죠?
또 따르게 보면은,
어~ 역 여=,
한글로 하면요,
이걸 갖다가 이렇게 합시다.
이거는,
일공일일로 돼 있어요,
일공,
일일 이렇게 돼 있죠.
그 다음에 공공공공

이렇게 돼 있고,
그 다음에,
일공일공

공공공일.

이게 갑니다.

지금 여기서 보이는 이 가 자는,
어~,
완성형을 말합니다.
조합형은 이렇게 되지 않습니다.
완성형입니다,
지금 주로 이제 쓰는 게 완성형이기 때문에,
어~ 이런 문제를,
얘기하게 되죠.
조합형일 때는,
좀쫌 달라서,
어~,
요게 비트고 요게 바이틉니다.

비트나 바이트나 전부 다 그 뒤에 수를 형성하였습니다마는,
소위,
메모리에.
기억 때 문제에요,

그러니까,
가를,
일과 영의 숫자 배합의 조합으로서 인식하는 거죠.
거기에 비해서,
각이라고 하는 것은,
어~,
요게 갈리죠,
공공 공일이,
일,
일공이죠,

그렇죠?
요기다가 다른 건 다 같고.
근까 가와 각의 대립은,
요기에서 이루어지죠 요기서.
공일과 일공 사이로써만 있는 거죠.
다른 건 다 같습니다.
그럼 가는 어떻게 될까요?
일일이겠죠.
자연히.
일일 예를 들어서.
간 간 간 니은,
간은 우리가 추측할 수 있잖아요 금방?
간은 순서대로 돼 있으니까,
어~ 요것은 일일이 되겠죠.
고 다음에 일공공이 될 것이고,
일일공이 될 것이고,
일일일이 될 것이고,
순서대로 이렇게 나갔을 겁니다.
그렇죠?
결국 이런 식으로,
차이를 둔 거죠,
근까 숫자의 조합,
숫자의 배열,
이런 것들 전부 다 해서,
만들었죠.
그러면은,
자,
잘 보시면은,
일공일일 공공공공 하면은 여기에서 쓸 수 있는 게,
공공공공공공공공이 있을 수 있겠죠.
근데 안타깝게도,
우리 한글은 이 속에,
공공공공이란 건 없습니다.
왜냐믄,
요 숫자는,
왜 여기다 일이 되는가,
공이면은 영 알파벳이고 일이면 한글입니다.
무엇을 생각하시면 되냐 하면요?
에~ 지금 영수증이 있나 없나 …
바코드 있잖아요,
바코드 보면 … 는데 그게 다 숫자에요 숫자이거든요?
대개 여덟 자 반으로 돼 있습니다.
여덟 개 반으로 필드가 여덟 개란 뜻이에요.
근까 공공공공 여 전부 똑같은 거예요,
요것은,
굵고 작은 선으로 이렇게 표시돼 있잖아요 단지.
그렇죠?
그런데 요기에,
요기에 단위를,
몇멫 개로 하느냐 이거죠.
일번부터 몇멫 가지 있을 거예요 숫자가.
거기는 바코드는,
구번까지 있어요,
일번부터 구번까지 나열됩니다.
두번째 있는 것두,
일번부터 구번까지 나열돼요.
그런데,
여러분 도서관에 가면 도서 분류표두 마찬가지에요.
일번부터 구번까지 총류가 돼 있죠?
공구 그러면 총류죠?
일번 대 뭐에요,
어~ 십 십진 일 일공 그거 들어가면 그건 역사 쪽이고 문학 어학 칠인가 팔이 그렇게 되죠?
일번부터 구번까지 분류한 거죠,
열 개 이렇게.
그리고 고 다음 단계 가서 뭐~ 문학이냐 어학이냐 그것도,
또 분류가 또 달라진다 하잖아요?
근데 지금은 대개,
네 단계 다섯 단계로,
분류가 돼 있죠?
숫자에 따라서,
거기 여러분 세 단계로 돼 있을 겁니다 지금.
칠공공,
하면 문학일 거예요 아마.
문학인가 어학인가.
어학이죠?
네,
제가 하도 고런 분류만 다 해서 칠공공 분류 …
요렇게 돼 있죠 그렇죠 칠공공,
일 이렇게 하면 또 달라질 수 있는,
그~ 코드가 있잖아요.
요게 이제 그 바코드 체계에요,
근데 요즘 컴퓨타는 영과 일로만 돼 있어요.
그래서 요것을 알파벳과 한글을 구별해서 일자를 대동한 것은 한글이구요 영을 대동한 것은,
알파벳이고.
요렇게 구 구분하고 있는 것과,
마찬가지죠,
그래 가지구 요것이,
그~,
팔비트가,
팔비트가 일바이트죠,
그렇죠?
그런데,
공공공공공공공공.
공공공공공공공일.
이렇게 해서 나올 수 있는 게 몇멫 갤까요.
…
이의,
팔승밖에 안 되잖아요.
두 개씩.
일과 공으로 해서,
여덟 개짜리로 가니까 발생,
이백오십육개.
여러분들,
팔비트 컴퓨타라는 게 바로 이거예요.
팔비트 컴퓨타라는 옛날에 나왔던,
애플 컴퓨타 이런 거 있었죠,
이게 팔비트 컴퓨타라고 하는데,
팔비트 컴퓨타의 가장 큰 특징은,
문자를,
이백,
쉰쉬흔
여섯 개밖에 쓰지 못한다는 겁니다.
십육비트는 이의 십육승이에요.

숫자 기억 못 해요 제가 하두 많아서.
지금은 육십사비트지요,
이의 육십사비트를 하면은,
우리가 컴퓨타상에서 쓸 수 있는 문자의 수가,
얼마가 나오는가를 알 수 있습니다.
이거 다 기억 못 해요 이거 엄청난 숫자니까.
팔비트 십육비트,
삼십이비트,

이렇게 육십사비트까지 지금까지 나왔잖아요.
그렇죠?
이것은 뭐냐 하면,
거기에서 처리할 수 있는 문자의 수와 차이가 있 문자의 수에 차이가 있어서,
삼십이비트 십육비트 팔비트 하는 것 때문에 난 거예요.
어렵지 않죠?
근데 여러분들은 그냥 무슨 뜻인지 모르고 팔비트 십육비트 삼십이비트만 썼잖아요.
문자의 수 숩니다.
근데,
실제로 이 팔비트 컴퓨타가 가능했던 것은,
영어권을 중심으로 해서 이루어진 컴퓨타였기 땜에 그렇습니다.
영어권에서 사용하는 로마자는,
알파벳의 대소문자.
대소문자가,
얼마 안 되잖아요.
그렇죠?
대소문자가 쉰쉬흔 두 자예요.
그 담에 숫자가 일에서 영일이삼사 해서 구번까지 열 개.
특수 문자가 서른 넉늑 자.
제어 문자 서른 두 자 해 가지고,
전부 다 합해서 백이십팔자밖에 안 됐어요.
백이십팔자,
로마자에서 쓸 수 있는 것이 백이십팔자였어요.
요것이 인제,
어~ 요것을 XXX로 한 게,
아스키 코드란 거예요 아스키라고 하는 것인데,
아스키 코드.
아메리칸,
스탠다드 코드 포,
인포메이션,
인터체인지라는 뜻입니다.
아메리칸 스탠다드 코드,
포,
인터네이션,
인포메이션 어~ 인포메이션 인터체인지.
정보 교환용,
미국 표준 코드라는 것이죠.
그쵸?
요것이 백이십팔자.
고 뒤 페이지에 있어요 제가 써 놨어요.
백이십팔자면 다 됩니다.
그런데,
우리 한글은 어떠냐,
백이십팔자 가지구 안 돼요,
가 각 간 갈 이렇게 해 가지구 다 하면은 만 천백칠십이자에요.

한글은 만 천백칠십이자에요.
음절 글자가.
그러믄,
소위,
팔비트 컴퓨타에서 우리 컴퓨 글자를 쓸 수 있겠습니까?
못 씁니다.
그래서 젤 첨에 팔비트 컴퓨타에서,
한글을 쓸 수가 없었어요,
애플 컴퓨타에서 한글을 쓸 수 있었어요 없었어요,
못 썼습니다 거기서.
그러다 이제 십육비트 컴퓨타가 나왔는데 그걸 뭐라고 그랬어요 에이트라고 그랬죠,
십육비트 컴퓨타가 나왔을 때 한글이 쓸 수 있었습니다.
그래도 그것이 만 천백칠십이자를 다 카바할 수가 없었어요.
그래서,
그때 나온 우리 한글 코드가 한글 이천삼백오십자밖에 못 씁니다.
완성형 글잡니다.
그니까,
어~,
그때에 썼던 것이 이천삼백오십자에요.
다시 말해서,
만 천백칠십이자에,
이천삼백오십자니까,
몇멫 분의 일이에요?
이십분의 일.
이천삼백삼에 일이 몇멫 분의 일이죠?
…
십육분의 일.
그~,
제가 그~,
그~,
하여튼 뭐~ 부분 저~ 아주 부분적으로밖에 쓸 수가 없었던 것이죠.
그래서 우리 나라에 인제,
이천삼백오십자의 한글 코드가 생긴 이유가 거기에 있습니다.
아주 문제가 발생한 것이죠?

그 당시에 제일 기본적으로 컴퓨타는,
어~ 일바이트 체계였어요.
근까 요 팔비트 체계였죠,
그렇기 때문에,
이백오십육자밖에 쓸 수 없었기 때문에,
전연 우리가 한글을 구별할 수가 없었습니다.
육십구페이지 가 보십쇼,

아~ 비트와 바이트라고 하는 용어를 컴퓨타의 기억 단위를 나타내는 말입니다.
비트는 메모리의 최소 단위로서,
일 또는 영 중의 어느 하나를 나타냅니다.
비트의 개념은 흔히,
온 오프로 표현돼 있죠 영과 일이니까,
컴퓨타 내부의 모든 전자 회로는,
이 비트 비트 개념을 바탕으로 하고 있습니다.
팔비트 십육비트 등 여러 개의 구성돼 있어서,
하나의 단위로 취급되는 비트 연쇄를,
우리가 바이트라구 하지만,
일반적으로 팔비트를,
일바이트라구 하죠.
일바이트를 사용하는 문자 코드에서는 논리적으로 이백 쉰쉬흔 여섯 개의 문자를 정의할 수 있습니다.
미국에서 가장 많이 사용되었던 영문자 코드 체계는,
표준 아스키.
아메리카 스탠다드 카움 코드 포 인포메이션 인터체인지에서는,
보통 아이에스오.
아메리칸,
아~ 저~ 인터내셔날 스탠다드 오거나이제이션.
국제 표준 기구의,
XX 어~ 코드를,
쭉 했는데 육사육으루 돼 있어요 지금 현재 유니코드는,
아이에스오 일공육사육 다시 일입니다.
일공육사육 다시 일.
그래서 모두 백이십팔자밖에 되지 않았기 때문에,
팔비트 컴퓨타에서 얼마든지 가능했죠?
그러나 현대 한글은 만 천백칠십이자이기 때문에,
일바이트 체계로는 현대어를 전혀 표현할 수 없었어요.
그래서,
능력 있는 개인이나 기업들이,
하나 둘씩,
각각의 한글을 치는 방법을 개발했고,
대강 한글 코드가 생겨났습니다.
이때까지만 해도 컴퓨타에서 한글을 사용한다는 것 자체가,
대단한 일이었기 때문에,
처리 방법이나 구별 원리 등은,
그다지 중요한 문제가 아니었어요.
그냥 한글만 쓸 수 있으면은,
막 됐다는 거죠 그냥.
너무 좋아했죠.
저두 마찬가지였어요.
어~ 저도,
컴퓨타를 일찍 사 가지고,
제가 옛 한글을 처음 사용했거든요?
처음,
옛 한글을 사용할 때,
그 옛 한글을,
제가 그~ 프론트까지 했어요.
그래서 저의 집에 그냥,
그~,
초기에 국어 전산 처리를 할 수 있었다고 생각하는 사람들이 전부 다 와서,
깜짝 놀래 가지고,
어~ 저의 집에 와 가지고,
그 프론트 파일 다 받아 가고,
전부 다 했었거든요.
근데 그때,
옛 한글의 폰트는 팔백여든여섯 자밖에 못 했어요.
그 다음에 안 돼서,
천이백이십사자까지 폰트를 했고,
그 담에 이천백육십이자까지 폰드를 했다가,
도저히 그 것도 가능하지 않았어요.
그래서 이것을 코드에다가,
국제,
표준 기구 코드에다가,
우리,
옛 글자까지도 집어넣어서,
오늘날 이렇게 자유롭게 쓰는 것이지,
그렇지 않고는 도저히,
그 당시로서는 사용할 수 없었던 것이었죠.
아주 제약된 것이었습니다.

그러니까,
그냥 그거 쓰는 자체가 너무너무 흥분된 거죠,
한글을 컴퓨타에서 쓸 수 있 쓸 수 있었다.
더군다나 더 나아가서는 옛 한글까지 쓸 수 있었다.
하는 것들은,
그 당시에 그것을,
사용할 수 있게끔 만들어 준 것만도,
아주 고마웠던.
그런 시대였거든요.
그렇지만,
정보를 공유할래니까,
이런 한글 코드가 통일되지는 안,
통일되지 않으면 않게 됐습니다.

예를 들어서 제가 이제 이~ 서강대학교에 교수에게,
그 코드 체계를 주어서,
옛 한글을 갖다,
아주 가장 많이 사용되는,
그~ 빈도수가 가장 높은 팔백여든여섯자를 프론트 파일을 주었어요.
그리고 그것이 화면에도 나타나기 때문에,
프론트를 얼마든지 할 수 있어요.
아~ 저~ 쓰 얼마든지 그~ 한글을 쓸 수 있어서,
이것을 가지고 뭘 입력했냐 하면은,
어~ 쁘띨로의 XXXX을 입력했어요.
이 교수가요.
그리고 그냥,
데이터 베이스를 입력을 해 가지구 한글 데이터 베이스로 입력을 해서,
그 파일을 입력해 놨는데,
이게 컴퓨타 환경이 사용 환경이 바뀌니까,
입력한 그 자료를 써 먹지 못하잖아요.
그럼 코드 변환 프로그램을 만들어야 되는데,
코드 변환 프로그램을 만들기 위해서는 코드 체계에 대해서 잘 알아야 되잖아요.
그 대응표를 만들어 쭉 만들어 놓고,
프로그램을 들으면 바꿔치는바껴치는.
이런 식으로 인제 만들어야 되는 건데,
그 코드 체계를 모르는 거예요 팔백팔십육자의 그 첫,
저~ 첫 번째 코드가 다른 데서 무엇에 쓰는 줄 모르는 거예요.
더군다나,
아래아 한글은,
그때 코드를,
공개화하지 않았을 땝니다.
그렇기 때문에,
그걸 바꿔칠 수가 없었죠.
그러다가 최근에 그 파일을,
옛날에 그~ 선생님이 주신 파일이 있어서,
그것을,
컴퓨타 내부에서,
제가,
명령어를 내려 가지고,
어~ 저~ 텍스트 파일로 바꿨어요.
데이터 베이스 파일을.
그래서 그것을 보니까,
코드 체계가 안 맞으니까 이상한 글자가 빠졌잖아요.
그래서 변환을 시켰어요.
근데 변환이 된 것이 있고,
안 된 것이 있어요.
그래서 안 된 것은,
수정을 봐서 다시,
학생들한테 교정 봐라,
그래 가지구 교정 봐서.
교수에게 주었더니 교수는,
너무너무 깜짝 놀랜 거죠 다 버린 줄 알았더니 자기가 입력한 자료가 왜냐면,
살아서 왔다는 게 얼마나 다행인지 모른다고 하면서.
사전 하나가 입력돼 있을 거예요.
그니까 굉장히 중요한 그~,
코드 체계가 그렇게 해서 통일이 되지 않으면 어려운 것이죠.
어~ 지금두 마찬가집니다,
지금두 그~ 지금,
으~,
문제인 것이,
남쪽 내부에서도,
통일이 안 돼 있어 가지고,
서로,
정보 전달이 안 돼 있었는데,
이제는 외부적으로,
어~ 정보 전달을,
그~ 할 수 없는.
상태가 이른 것이,
남북입니다.
그래서,
한글 코드를,
으~,
통일시켜야 되는,
문제가,
정보 전달 과정에서,
절대 필요하게 되고.
이런 코드를 만들기 위해서는,
우리 국어학자들의 노력이 절대 필요한데 국어학자들이 이 코드 문제는,
손을 놓고 있었단 말이죠.
그니까 앞으로 절대 필요한 것이죠.
어~ 시간이 다 돼서 다음에,
한글 코드를,
그~ 분류와,
한글 코드에서 문자를 어떻게 처리하는가에 대한,
에~ 조합형에서의,
이런 완성형으로 숫자를 하나로 …
초성과 중성 종성을 어떻게 나누는 것에 대해서,
말씀을 드린 뒤에,
그 다음에,
그~ 프로그램 활용법을 이야기하고,
그 다음에 인제,
프로그램을 직접 시연해서 직접 자료 처리할 수 있는 과제까지 …
